[{"/home/anushik/Desktop/dip/seebattle/src/index.js":"1","/home/anushik/Desktop/dip/seebattle/src/reportWebVitals.js":"2","/home/anushik/Desktop/dip/seebattle/src/App.js":"3","/home/anushik/Desktop/dip/seebattle/src/components/LoginComponent.jsx":"4","/home/anushik/Desktop/dip/seebattle/src/components/HomeComponent.jsx":"5","/home/anushik/Desktop/dip/seebattle/src/components/ListUserComponent.jsx":"6","/home/anushik/Desktop/dip/seebattle/src/components/RegisterConponent.jsx":"7","/home/anushik/Desktop/dip/seebattle/src/services/Service.js":"8","/home/anushik/Desktop/dip/seebattle/src/components/BattlesComponent.jsx":"9","/home/anushik/Desktop/dip/seebattle/src/components/GameComponent.jsx":"10","/home/anushik/Desktop/dip/seebattle/src/components/Stylesheet.js":"11"},{"size":502,"mtime":1619383757960,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1619347743940,"results":"14","hashOfConfig":"13"},{"size":737,"mtime":1619621196207,"results":"15","hashOfConfig":"13"},{"size":3102,"mtime":1619347899005,"results":"16","hashOfConfig":"13"},{"size":2183,"mtime":1620305243982,"results":"17","hashOfConfig":"13"},{"size":1802,"mtime":1619350794066,"results":"18","hashOfConfig":"13"},{"size":4243,"mtime":1619422261314,"results":"19","hashOfConfig":"13"},{"size":1055,"mtime":1620073992995,"results":"20","hashOfConfig":"13"},{"size":1928,"mtime":1619380094236,"results":"21","hashOfConfig":"13"},{"size":46015,"mtime":1620306953867,"results":"22","hashOfConfig":"13"},{"size":229,"mtime":1619621397466,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"s0ok62",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"26"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49"},{"filePath":"50","messages":"51","errorCount":1,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/anushik/Desktop/dip/seebattle/src/index.js",[],["52","53"],"/home/anushik/Desktop/dip/seebattle/src/reportWebVitals.js",[],"/home/anushik/Desktop/dip/seebattle/src/App.js",[],"/home/anushik/Desktop/dip/seebattle/src/components/LoginComponent.jsx",[],"/home/anushik/Desktop/dip/seebattle/src/components/HomeComponent.jsx",["54"],"import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport ListUserComponent from './ListUserComponent';\nimport { withRouter } from 'react-router-dom';\nimport RegisterConponent from './RegisterConponent';\nimport BattlesComponent from './BattlesComponent';\nimport GameComponent from './GameComponent';\n\nclass HomeComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = this.initialState;\n    if (localStorage.getItem('jwtToken') === null) {\n      this.gologin();\n    }\n    if (localStorage.getItem('role') === 'none') {\n      this.goChangePassword();\n    }\n  }\n  initialState = {\n    role: localStorage.getItem('role'), id: localStorage.getItem('uid')\n  };\n  gologin = () => {\n    this.props.history.replace(\"/login\");\n  };\n  goChangePassword() {\n    this.props.history.replace(\"/changepass\");\n  }\n  logoutClick = () => {\n    localStorage.clear();\n    this.gologin();\n  };\n\n  render() {\n    return (\n      <div>\n        <Router>\n          <div>\n            <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\n              <p className=\"h5 my-0 me-md-auto fw-normal\">Sea Battles </p>\n              <nav className=\"my-2 my-md-0 me-md-3\">\n                <Link to={\"/\"} className=\"p-2 text-dark\">Battles</Link>\n                <Link to={\"/users\"} className=\"p-2 text-dark\">Users</Link>\n                <Link to={\"/game\"} className=\"p-2 text-dark\">Game</Link>\n              </nav>\n              <div style={{ flex: 1 }}></div>\n              {<Link to={\"/logout\"} onClick={this.logoutClick} className=\"btn btn-outline-primary nav-link\">Sign Out</Link>}\n            </div>\n\n            <Switch>\n              <Route exact path=\"/users\">\n                <ListUserComponent />\n              </Route>\n              <Route exact path=\"/\">\n                <BattlesComponent />\n              </Route>\n              <Route exact path=\"/game\">\n                <GameComponent />\n              </Route>\n            </Switch>\n          </div>\n        </Router>\n      </div>\n\n    );\n  }\n}\n\nexport default withRouter(HomeComponent);\n","/home/anushik/Desktop/dip/seebattle/src/components/ListUserComponent.jsx",["55"],"import React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\n\nclass ListUserComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            users: []\n        }\n    }\n    componentDidMount(){\n        Service.getAllUsers().then((res) => {\n            this.setState({users: res.data.content});\n        });\n    }\n    render() {\n        return (\n            <div className=\"container text-center\">\n                <h2>Users List</h2>\n                <div className=\"row\">\n                    <table className=\"table table-striped table-bordered\">\n                        <thead className=\"thead-dark\">\n                            <tr>\n                                <th>User ID</th>\n                                <th>Name</th>\n                                <th>Email</th>\n                                <th>Role</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.users.map(user =>\n                                <tr key={user.id}>\n                                    <td>{user.id}</td>\n                                    <td>{user.name}</td>\n                                    <td>{user.email}</td>\n                                    <td>{user.role.name}</td>\n                                    <td><button className=\"btn btn-outline-primary\">Play</button></td>\n                                </tr>)\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(ListUserComponent);","/home/anushik/Desktop/dip/seebattle/src/components/RegisterConponent.jsx",["56","57"],"import React, { Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport axios from 'axios';\n\nclass Register extends Component {\n    constructor(props) {\n        super(props);\n        this.state = this.initialState;\n    }\n\n    initialState = {\n        email: '', name: '', password: '', confirm: '', error: ''\n    };\n\n    credentialChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        });\n    };\n\n    saveUser = () => {\n        if (this.state.password === this.state.confirm) {\n            const credentials = JSON.stringify({\n                name: this.state.name,\n                email: this.state.email,\n                password: this.state.password\n            });\n            const token = localStorage.getItem('jwtToken');\n            axios.post(\"http://localhost:9090/api/v1/users/register\", credentials, {\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': `Bearer ${token}`\n                }\n            }).then(response => {\n                this.setState({ \"error\": response.data.message });\n            }).catch(error => {\n                this.resetRegisterForm();\n                this.setState({ \"error\": \"Error!\" });\n            });\n        } else {\n            this.setState({ \"error\": \"Passwords not the same\" });\n        }\n    };\n\n    resetRegisterForm = () => {\n        this.setState(() => this.initialState);\n    };\n\n    isEmail(val) {\n        let regEmail = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n        if (!regEmail.test(val)) {\n            return 'Invalid Email';\n        }\n    }\n\n    render() {\n        const { email, name, password, confirm, error } = this.state;\n\n        return (\n            <div className=\"container text-center\">\n                <h1>Sign Up page</h1>\n                <div className=\"row justify-content-center\">\n                    <div style={{ width: 300 }}>\n                        {error && <div className=\"alert alert-danger\">{error}</div>}\n                        <div>\n                            <form action=\"/login\" method=\"post\">\n                                <div className=\"form-group\">\n                                    <input className=\"form-control\" required autoComplete=\"off\" type=\"email\" name=\"email\" value={email} onChange={this.credentialChange}\n                                        placeholder=\"Enter Email Address\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <input className=\"form-control\" required autoComplete=\"off\" type=\"text\" name=\"name\" value={name} onChange={this.credentialChange}\n                                        placeholder=\"Enter Name\" />\n                                </div>\n                                <div className=\"form-group\">\n                                    <input className=\"form-control\" required autoComplete=\"off\" type=\"password\" name=\"password\" value={password} onChange={this.credentialChange}\n                                        placeholder=\"Enter Password\" />\n\n                                </div>\n                                <div className=\"form-group\">\n                                    <input className=\"form-control\" required autoComplete=\"off\" type=\"password\" name=\"confirm\" value={confirm} onChange={this.credentialChange}\n                                        placeholder=\"Confirm Password\" />\n\n                                </div>\n                                <button className=\"btn btn-primary\" size=\"sm\" type=\"button\" variant=\"success\" onClick={this.saveUser}\n                                    disabled={this.isEmail(this.state.email) || this.state.password.length < 6 || this.state.name.length < 2 || this.state.password.length !== this.state.confirm.length}>\n                                    Register\n                                </button>\n                            </form>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(Register);","/home/anushik/Desktop/dip/seebattle/src/services/Service.js",[],"/home/anushik/Desktop/dip/seebattle/src/components/BattlesComponent.jsx",["58"],"import React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\n\nclass BattlesComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            battles: []\n        }\n    }\n    componentDidMount(){\n        Service.getAllBattles().then((res) => {\n            this.setState({battles: res.data.content});\n        });\n    }\n    render() {\n        return (\n            <div className=\"container text-center\">\n                <h2>Battles List</h2>\n                <div className=\"row\">\n                    <table className=\"table table-striped table-bordered\">\n                        <thead className=\"thead-dark\">\n                            <tr>\n                                <th>User ID</th>\n                                <th>Name</th>\n                                <th>Sender</th>\n                                <th>Receiver</th>\n                                <th>Action</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {\n                                this.state.battles.map(battle =>\n                                <tr key={battle.id}>\n                                    <td>{battle.id}</td>\n                                    <td>{battle.name}</td>\n                                    <td>{battle.senderid}</td>\n                                    <td>{battle.receiverid}</td>\n                                    {battle.status===0?<td><button className=\"btn btn-outline-primary\">Apply</button><button className=\"btn btn-outline-primary\">Refuse</button></td>:<td>Started</td>}\n                                </tr>)\n                            }\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default withRouter(BattlesComponent);","/home/anushik/Desktop/dip/seebattle/src/components/GameComponent.jsx",["59","60","61","62","63","64","65","66","67","68","69","70","71","72","73","74","75","76","77"],"import React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\nimport './styles.css';\n\n\nclass BattlesComponent extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tbattles: []\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tService.getAllBattles().then((res) => {\n\t\t\tthis.setState({ battles: res.data.content });\n\t\t});\n\t\tthis.mainGame()\n\t}\n\n\tmainGame = () => {\n\t\tvar CONST = {};\n\t\tCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1'];\n\t\t// You are player 0 and the computer is player 1\n\t\t// The virtual player is used for generating temporary ships\n\t\t// for calculating the probability heatmap\n\t\tCONST.HUMAN_PLAYER = 0;\n\t\tCONST.COMPUTER_PLAYER = 1;\n\t\tCONST.VIRTUAL_PLAYER = 2;\n\n\t\tCONST.CSS_TYPE_EMPTY = 'empty';\n\t\tCONST.CSS_TYPE_SHIP = 'ship';\n\t\tCONST.CSS_TYPE_MISS = 'miss';\n\t\tCONST.CSS_TYPE_HIT = 'hit';\n\t\tCONST.CSS_TYPE_SUNK = 'sunk';\n\n\t\tCONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\t\tCONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\t\tCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\t\tCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\t\tCONST.TYPE_SUNK = 4; // 4 = sunk ship\n\t\tCONST.TYPE_NOT_ALLOWED = 5; // 5 = neighbour of ship\n\n\t\tGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n\t\tCONST.USED = 1;\n\t\tCONST.UNUSED = 0;\n\n\t\tfunction Game(size) {\n\t\t\tGame.size = size;\n\t\t\tthis.shotsTaken = 0;\n\t\t\tthis.createGrid();\n\t\t\tthis.init();\n\t\t}\n\t\tGame.size = 10; // Default grid size is 10x10\n\t\tGame.gameOver = false;\n\t\t// Checks if the game is won, and if it is, re-initializes the game\n\t\tGame.prototype.checkIfWon = function () {\n\t\t\tif (this.computerFleet.allShipsSunk()) {\n\t\t\t\talert('Congratulations, you win!');\n\t\t\t\tGame.gameOver = true;\n\t\t\t\tthis.showRestartSidebar();\n\t\t\t} else if (this.humanFleet.allShipsSunk()) {\n\t\t\t\talert('Yarr! The computer sank all your ships. Try again.');\n\t\t\t\tGame.gameOver = true;\n\t\t\t\tthis.showRestartSidebar();\n\t\t\t}\n\t\t};\n\t\t// Shoots at the target player on the grid.\n\t\t// Returns {int} Constants.TYPE: What the shot uncovered\n\t\tGame.prototype.shoot = function (x, y, targetPlayer) {\n\t\t\tlet targetGrid;\n\t\t\tlet targetFleet;\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\t\ttargetGrid = this.humanGrid;\n\t\t\t\ttargetFleet = this.humanFleet;\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\t\ttargetGrid = this.computerGrid;\n\t\t\t\ttargetFleet = this.computerFleet;\n\t\t\t}\n\n\t\t\tif (targetGrid.isDamagedShip(x, y)) {\n\t\t\t\treturn null;\n\t\t\t} else if (targetGrid.isMiss(x, y)) {\n\t\t\t\treturn null;\n\t\t\t} else if (targetGrid.isUndamagedShip(x, y)) {\n\t\t\t\t// update the board/grid\n\t\t\t\ttargetGrid.updateCell(x, y, 'hit', targetPlayer);\n\t\t\t\t// IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n\t\t\t\t// because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\t\t\t\ttargetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\t\t\t\tthis.checkIfWon();\n\t\t\t\treturn CONST.TYPE_HIT;\n\t\t\t} else {\n\t\t\t\ttargetGrid.updateCell(x, y, 'miss', targetPlayer);\n\t\t\t\tthis.checkIfWon();\n\t\t\t\treturn CONST.TYPE_MISS;\n\t\t\t}\n\t\t};\n\t\t// Creates click event listeners on each one of the 100 grid cells\n\t\tGame.prototype.shootListener = function (e) {\n\t\t\tvar self = e.target.self;\n\t\t\t// Extract coordinates from event listener\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\tvar result = null;\n\t\t\tif (self.readyToPlay) {\n\t\t\t\tresult = self.shoot(x, y, CONST.COMPUTER_PLAYER);\n\n\t\t\t\t// Remove the tutorial arrow\n\t\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\t\tgameTutorial.nextStep();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (result !== null && !Game.gameOver) {\n\t\t\t\t// The AI shoots iff the player clicks on a cell that he/she hasn't\n\t\t\t\t// already clicked on yet\n\t\t\t\tself.robot.shoot();\n\t\t\t} else {\n\t\t\t\tGame.gameOver = false;\n\t\t\t}\n\t\t};\n\t\t// Creates click event listeners on each of the ship names in the roster\n\t\tGame.prototype.rosterListener = function (e) {\n\t\t\tvar self = e.target.self;\n\t\t\t// Remove all classes of 'placing' from the fleet roster first\n\t\t\tvar roster = document.querySelectorAll('.fleet-roster li');\n\t\t\tfor (var i = 0; i < roster.length; i++) {\n\t\t\t\tvar classes = roster[i].getAttribute('class') || '';\n\t\t\t\tclasses = classes.replace('placing', '');\n\t\t\t\troster[i].setAttribute('class', classes);\n\t\t\t}\n\n\t\t\t// Move the highlight to the next step\n\t\t\tif (gameTutorial.currentStep === 1) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t}\n\n\t\t\t// Set the class of the target ship to 'placing'\n\t\t\tGame.placeShipType = e.target.getAttribute('id');\n\t\t\tdocument.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n\t\t\tGame.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n\t\t\tself.placingOnGrid = true;\n\t\t};\n\t\t// Creates click event listeners on the human player's grid to handle\n\t\t// ship placement after the user has selected a ship name\n\t\tGame.prototype.placementListener = function (e) {\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\t// Extract coordinates from event listener\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\n\t\t\t\t// Don't screw up the direction if the user tries to place again.\n\t\t\t\tvar successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\t\t\t\tif (successful) {\n\t\t\t\t\t// Done placing this ship\n\t\t\t\t\tself.endPlacing(Game.placeShipType);\n\n\t\t\t\t\t// Remove the helper arrow\n\t\t\t\t\tif (gameTutorial.currentStep === 2) {\n\t\t\t\t\t\tgameTutorial.nextStep();\n\t\t\t\t\t}\n\n\t\t\t\t\tself.placingOnGrid = false;\n\t\t\t\t\tif (self.areAllShipsPlaced()) {\n\t\t\t\t\t\tvar el = document.getElementById('rotate-button');\n\t\t\t\t\t\tel.addEventListener(transitionEndEventName(), (function () {\n\t\t\t\t\t\t\tel.setAttribute('class', 'hidden');\n\t\t\t\t\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').setAttribute('class', 'highlight');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').removeAttribute('class');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}), false);\n\t\t\t\t\t\tel.setAttribute('class', 'invisible');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Creates mouseover event listeners that handles mouseover on the\n\t\t// human player's grid to draw a phantom ship implying that the user\n\t\t// is allowed to place a ship there\n\t\tGame.prototype.placementMouseover = function (e) {\n\t\t\t// conlose.log(\"placementMouseover\");\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\t\tvar classes;\n\t\t\t\tvar fleetRoster = self.humanFleet.fleetRoster;\n\n\t\t\t\tfor (var i = 0; i < fleetRoster.length; i++) {\n\t\t\t\t\tvar shipType = fleetRoster[i].type;\n\n\t\t\t\t\tif (Game.placeShipType === shipType &&\n\t\t\t\t\t\tfleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n\t\t\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\t\t\t\tclasses = el.getAttribute('class');\n\t\t\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\t\t\t\tif (classes.indexOf(' grid-ship') < 0) {\n\t\t\t\t\t\t\t\tclasses += ' grid-ship';\n\t\t\t\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Creates mouseout event listeners that un-draws the phantom ship\n\t\t// on the human player's grid as the user hovers over a different cell\n\t\tGame.prototype.placementMouseout = function (e) {\n\t\t\t// console.log(\"on placementMouseout\");\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\t\tvar classes = el.getAttribute('class');\n\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\t\tif (classes.indexOf(' grid-ship') > -1) {\n\t\t\t\t\t\tclasses = classes.replace(' grid-ship', '');\n\t\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Click handler for the Rotate Ship button\n\t\tGame.prototype.toggleRotation = function (e) {\n\t\t\t// Toggle rotation direction\n\t\t\tvar direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\te.target.setAttribute('data-direction', '1');\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n\t\t\t} else if (direction === Ship.DIRECTION_HORIZONTAL) {\n\t\t\t\te.target.setAttribute('data-direction', '0');\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_VERTICAL;\n\t\t\t}\n\t\t};\n\t\t// Click handler for the Start Game button\n\t\tGame.prototype.startGame = function (e) {\n\t\t\tvar self = e.target.self;\n\t\t\tvar el = document.getElementById('roster-sidebar');\n\t\t\tvar fn = function () { el.setAttribute('class', 'hidden'); };\n\t\t\tel.addEventListener(transitionEndEventName(), fn, false);\n\t\t\tel.setAttribute('class', 'invisible');\n\t\t\tself.readyToPlay = true;\n\n\t\t\t// Advanced the tutorial step\n\t\t\tif (gameTutorial.currentStep === 3) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t}\n\t\t\tel.removeEventListener(transitionEndEventName(), fn, false);\n\t\t};\n\t\t// Click handler for Restart Game button\n\t\tGame.prototype.restartGame = function (e) {\n\t\t\twindow.location.reload();\n\t\t};\n\t\t// // Debugging function used to place all ships and just start\n\t\t// Game.prototype.placeRandomly = function (e) {\n\t\t// \te.target.removeEventListener(e.type, arguments.callee);\n\t\t// \te.target.self.humanFleet.placeShipsRandomly();\n\t\t// \te.target.self.readyToPlay = true;\n\t\t// \tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n\t\t// \tthis.setAttribute('class', 'hidden');\n\t\t// };\n\t\t// Ends placing the current ship\n\t\tGame.prototype.endPlacing = function (shipType) {\n\t\t\tdocument.getElementById(shipType).setAttribute('class', 'placed');\n\n\t\t\t// Mark the ship as 'used'\n\t\t\tGame.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED;\n\n\t\t\t// Wipe out the variable when you're done with it\n\t\t\tGame.placeShipDirection = null;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\t\t};\n\t\t// Checks whether or not all ships are done placing\n\t\t// Returns boolean\n\t\tGame.prototype.areAllShipsPlaced = function () {\n\t\t\tvar playerRoster = document.querySelectorAll('.fleet-roster li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tif (playerRoster[i].getAttribute('class') === 'placed') {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Reset temporary variables\n\t\t\tGame.placeShipDirection = 0;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\t\t\treturn true;\n\t\t};\n\t\t// Resets the fog of war\n\t\tGame.prototype.resetFogOfWar = function () {\n\t\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\t\tthis.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n\t\t\t\t\tthis.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Reset all values to indicate the ships are ready to be placed again\n\t\t\tGame.usedShips = Game.usedShips.map(function () { return CONST.UNUSED; });\n\t\t};\n\t\t// Resets CSS styling of the sidebar\n\t\tGame.prototype.resetRosterSidebar = function () {\n\t\t\tvar els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < els.length; i++) {\n\t\t\t\tels[i].removeAttribute('class');\n\t\t\t}\n\n\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t} else {\n\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t\t}\n\t\t\tdocument.getElementById('rotate-button').removeAttribute('class');\n\t\t\tdocument.getElementById('start-game').setAttribute('class', 'hidden');\n\t\t};\n\t\tGame.prototype.showRestartSidebar = function () {\n\t\t\tvar sidebar = document.getElementById('restart-sidebar');\n\t\t\tsidebar.setAttribute('class', 'highlight');\n\n\t\t\t// Deregister listeners\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\t\tcomputerCells[j].removeEventListener('click', this.shootListener, false);\n\t\t\t}\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tplayerRoster[i].removeEventListener('click', this.rosterListener, false);\n\t\t\t}\n\n\t\t\tvar restartButton = document.getElementById('restart-game');\n\t\t\trestartButton.addEventListener('click', this.restartGame, false);\n\t\t\trestartButton.self = this;\n\t\t};\n\t\t// Generates the HTML divs for the grid for both players\n\t\tGame.prototype.createGrid = function () {\n\t\t\tvar gridDiv = document.querySelectorAll('.grid');\n\t\t\tfor (var grid = 0; grid < gridDiv.length; grid++) {\n\t\t\t\tgridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\t\t\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\t\t\tvar el = document.createElement('div');\n\t\t\t\t\t\tel.setAttribute('data-x', i);\n\t\t\t\t\t\tel.setAttribute('data-y', j);\n\t\t\t\t\t\tel.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n\t\t\t\t\t\tgridDiv[grid].appendChild(el);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Initializes the Game\n\t\tGame.prototype.init = function () {\n\t\t\tthis.humanGrid = new Grid(Game.size);\n\t\t\tthis.computerGrid = new Grid(Game.size);\n\t\t\tthis.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n\t\t\tthis.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n\n\t\t\tthis.robot = new AI(this);\n\n\t\t\t// Reset game variables\n\t\t\tthis.shotsTaken = 0;\n\t\t\tthis.readyToPlay = false;\n\t\t\tthis.placingOnGrid = false;\n\t\t\tGame.placeShipDirection = 0;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\n\t\t\tthis.resetRosterSidebar();\n\n\t\t\t// Add a click listener for the Grid.shoot() method for all cells\n\t\t\t// Only add this listener to the computer's grid\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\t\tcomputerCells[j].self = this;\n\t\t\t\tcomputerCells[j].addEventListener('click', this.shootListener, false);\n\t\t\t}\n\n\t\t\t// Add a click listener to the roster\t\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tplayerRoster[i].self = this;\n\t\t\t\tplayerRoster[i].addEventListener('click', this.rosterListener, false);\n\t\t\t}\n\n\t\t\t// Add a click listener to the human player's grid while placing\n\t\t\tvar humanCells = document.querySelector('.human-player').childNodes;\n\t\t\tfor (var k = 0; k < humanCells.length; k++) {\n\t\t\t\thumanCells[k].self = this;\n\t\t\t\thumanCells[k].addEventListener('click', this.placementListener, false);\n\t\t\t\thumanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n\t\t\t\thumanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n\t\t\t}\n\n\t\t\tvar rotateButton = document.getElementById('rotate-button');\n\t\t\trotateButton.addEventListener('click', this.toggleRotation, false);\n\t\t\tvar startButton = document.getElementById('start-game');\n\t\t\tstartButton.self = this;\n\t\t\tstartButton.addEventListener('click', this.startGame, false);\n\t\t\t// var resetButton = document.getElementById('reset-stats');\n\t\t\t// resetButton.addEventListener('click', Game.stats.resetStats, false);\n\t\t\tvar randomButton = document.getElementById('place-randomly');\n\t\t\trandomButton.self = this;\n\t\t\trandomButton.addEventListener('click', this.placeRandomly, false);\n\t\t\t// this.computerFleet.placeShipsRandomly();\n\t\t\tthis.computerFleet.placeShipsRandomlyComp();\n\t\t};\n\n\t\t// Grid object\n\t\t// Constructor\n\t\tfunction Grid(size) {\n\t\t\tthis.size = size;\n\t\t\tthis.cells = [];\n\t\t\tthis.init();\n\t\t}\n\n\t\t// Initialize and populate the grid\n\t\tGrid.prototype.init = function () {\n\t\t\tfor (var x = 0; x < this.size; x++) {\n\t\t\t\tvar row = [];\n\t\t\t\tthis.cells[x] = row;\n\t\t\t\tfor (var y = 0; y < this.size; y++) {\n\t\t\t\t\trow.push(CONST.TYPE_EMPTY);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Updates the cell's CSS class based on the type passed in\n\t\tGrid.prototype.updateCell = function (x, y, type, targetPlayer) {\n\t\t\tvar player;\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\t\tplayer = 'human-player';\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\t\tplayer = 'computer-player';\n\t\t\t}\n\n\t\t\tswitch (type) {\n\t\t\t\tcase CONST.CSS_TYPE_EMPTY:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_SHIP:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SHIP;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_MISS:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_MISS;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_HIT:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_HIT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_SUNK:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SUNK;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n\t\t\tdocument.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n\t\t};\n\t\t// Checks to see if a cell contains an undamaged ship\n\t\t// Returns boolean\n\t\tGrid.prototype.isUndamagedShip = function (x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_SHIP;\n\t\t};\n\t\t// Checks to see if the shot was missed. This is equivalent\n\t\t// to checking if a cell contains a cannonball\n\t\t// Returns boolean\n\t\tGrid.prototype.isMiss = function (x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_MISS;\n\t\t};\n\t\t// Checks to see if a cell contains a damaged ship,\n\t\t// either hit or sunk.\n\t\t// Returns boolean\n\t\tGrid.prototype.isDamagedShip = function (x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n\t\t};\n\n\t\t// Fleet object\n\t\t// This object is used to keep track of a player's portfolio of ships\n\t\t// Constructor\n\t\tfunction Fleet(playerGrid, player) {\n\t\t\tthis.numShips = CONST.AVAILABLE_SHIPS.length;\n\t\t\tthis.playerGrid = playerGrid;\n\t\t\tthis.player = player;\n\t\t\tthis.fleetRoster = [];\n\t\t\tthis.populate();\n\t\t}\n\t\t// Populates a fleet\n\t\tFleet.prototype.populate = function () {\n\t\t\tfor (var i = 0; i < this.numShips; i++) {\n\t\t\t\t// loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n\t\t\t\tvar j = i % CONST.AVAILABLE_SHIPS.length;\n\t\t\t\tthis.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n\t\t\t}\n\t\t};\n\t\t// Places the ship and returns whether or not the placement was successful\n\t\t// Returns boolean\n\t\tFleet.prototype.placeShip = function (x, y, direction, shipType) {\n\t\t\tvar shipCoords;\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar shipTypes = this.fleetRoster[i].type;\n\n\t\t\t\tif (shipType === shipTypes &&\n\t\t\t\t\tthis.fleetRoster[i].isLegal(x, y, direction)) {\n\t\t\t\t\tthis.fleetRoster[i].create(x, y, direction, false);\n\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\t// Places ships randomly on the board\n\t\t// TODO: Avoid placing ships too close to each other\n\t\tFleet.prototype.placeShipsRandomly = function () {\n\t\t\tvar shipCoords;\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar illegalPlacement = true;\n\n\t\t\t\t// Prevents the random placement of already placed ships\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\twhile (illegalPlacement) {\n\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\n\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\n\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\n\n\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\t\t\t\tillegalPlacement = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t\t\tGame.usedShips[i] = CONST.USED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tFleet.prototype.placeShipsRandomlyComp = function () {\n\t\t\tswitch (Math.floor(3 * Math.random())) {\n\t\t\t\tcase 0:\n\t\t\t\t\tconsole.log(\"case 0\");\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\n\t\t\t\t\tvar availableShipsCount = 10;\n\t\t\t\t\tvar shipIndex;\n\t\t\t\t\tvar ySub;\n\n\t\t\t\t\twhile (availableShipsCount > 0) {\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\n\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\n\t\t\t\t\t\tySub = 0;\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\n\t\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex after cond\");\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\n\t\t\t\t\t\t// console.log(randomDirection + \"dir\");\n\t\t\t\t\t\tif (randomDirection === 1) {\n\t\t\t\t\t\t\tySub = this.fleetRoster[shipIndex].getAllShipCells().length;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// console.log(ySub + \"sub\");\n\t\t\t\t\t\t// console.log(this.fleetRoster[shipIndex]);\n\t\t\t\t\t\tvar isPlaced = false;\n\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\n\t\t\t\t\t\t\tif (!isPlaced) {\n\t\t\t\t\t\t\t\tfor (var y = 0; y < 5; y++) {\n\t\t\t\t\t\t\t\t\tif (!isPlaced) {\n\t\t\t\t\t\t\t\t\t\tif (y + ySub < 5) {\n\t\t\t\t\t\t\t\t\t\t\tySub = 0;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\n\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\n\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\n\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y - ySub), randomDirection, false);\n\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\n\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\n\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(\"done\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tconsole.log(\"case 1\");\n\t\t\t\t\t// in the hole grid\n\t\t\t\t\tvar shipCoords;\n\t\t\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\t\t\tvar illegalPlacement = true;\n\t\t\t\t\t\twhile (illegalPlacement) {\n\t\t\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\n\t\t\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\n\t\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\n\n\t\t\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n\t\t\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n\t\t\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\t\t\t\t\t\tillegalPlacement = false;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconsole.log(\"done\");\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tconsole.log(\"case 2\");\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\n\t\t\t\t\tvar availableShipsCount = 10;\n\t\t\t\t\tvar shipIndex;\n\t\t\t\t\tvar ySub;\n\n\t\t\t\t\twhile (availableShipsCount > 4) {\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\n\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\n\t\t\t\t\t\tySub = 0;\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\n\t\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\n\t\t\t\t\t\t// console.log(randomDirection + \" dir\");\n\t\t\t\t\t\tif (randomDirection === 1) {\n\t\t\t\t\t\t\tvar isPlaced = false;\n\t\t\t\t\t\t\tfor (var x = 0; x < 10; x += 9) {\n\t\t\t\t\t\t\t\tif (!isPlaced) {\n\t\t\t\t\t\t\t\t\tfor (var y = 0; y < 10; y++) {\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, y, randomDirection, false);\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar isPlaced = false;\n\t\t\t\t\t\t\tfor (var y = 0; y < 10; y += 9) {\n\n\t\t\t\t\t\t\t\tif (!isPlaced) {\n\t\t\t\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\n\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvar m = 0;\n\t\t\t\t\twhile (availableShipsCount > 0) {\n\t\t\t\t\t\t// console.log(\"in last while\");\t\t\t\t\t\t\n\t\t\t\t\t\tvar x = Math.floor(8 * Math.random() + 1);\n\t\t\t\t\t\tvar y = Math.floor(8 * Math.random() + 1);\n\t\t\t\t\t\trandomDirection = Math.floor(2 * Math.random());\n\t\t\t\t\t\tif (this.fleetRoster[m].isLegal(x, y, randomDirection)) {\n\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\n\t\t\t\t\t\t\t// console.log(\"is legal\")\n\t\t\t\t\t\t\tthis.fleetRoster[m].create(x, (y), randomDirection, false);\n\t\t\t\t\t\t\tunusedShips[m] = 'used';\n\t\t\t\t\t\t\t// console.log(availableShipsCount + \"ship count\")\n\t\t\t\t\t\t\tavailableShipsCount--;\n\t\t\t\t\t\t\tm++;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// console.log(unusedShips);\n\t\t\t\t\tconsole.log(\"done\");\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\t// Finds a ship by location\n\t\t// Returns the ship object located at (x, y)\n\t\t// If no ship exists at (x, y), this returns null instead\n\t\tFleet.prototype.findShipByCoords = function (x, y) {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar currentShip = this.fleetRoster[i];\n\t\t\t\tif (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tif (y === currentShip.yPosition &&\n\t\t\t\t\t\tx >= currentShip.xPosition &&\n\t\t\t\t\t\tx < currentShip.xPosition + currentShip.shipLength) {\n\t\t\t\t\t\treturn currentShip;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (x === currentShip.xPosition &&\n\t\t\t\t\t\ty >= currentShip.yPosition &&\n\t\t\t\t\t\ty < currentShip.yPosition + currentShip.shipLength) {\n\t\t\t\t\t\treturn currentShip;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t// Finds a ship by its type\n\t\t// Param shipType is a string\n\t\t// Returns the ship object that is of type shipType\n\t\t// If no ship exists, this returns null.\n\t\tFleet.prototype.findShipByType = function (shipType) {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tif (this.fleetRoster[i].type === shipType) {\n\t\t\t\t\treturn this.fleetRoster[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t// Checks to see if all ships have been sunk\n\t\t// Returns boolean\n\t\tFleet.prototype.allShipsSunk = function () {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\t// If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n\t\t\t\tif (this.fleetRoster[i].sunk === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t// Ship object\n\t\t// Constructor\n\t\tfunction Ship(type, playerGrid, player) {\n\t\t\tthis.damage = 0;\n\t\t\tthis.type = type;\n\t\t\tthis.playerGrid = playerGrid;\n\t\t\tthis.player = player;\n\n\t\t\tswitch (this.type) {\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[0]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[1]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[2]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[3]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[4]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[5]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[6]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[7]:\n\t\t\t\t\tthis.shipLength = 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[8]:\n\t\t\t\t\tthis.shipLength = 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[9]:\n\t\t\t\t\tthis.shipLength = 4;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.maxDamage = this.shipLength;\n\t\t\tthis.sunk = false;\n\t\t}\n\t\t// Checks to see if the placement of a ship is legal\n\t\t// Returns boolean\n\t\tShip.prototype.isLegal = function (x, y, direction) {\n\t\t\t// first, check if the ship is within the grid...\n\t\t\tif (this.withinBounds(x, y, direction)) {\n\t\t\t\t// ...then check to make sure it doesn't collide with another ship\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\t\tif (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_MISS ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_MISS ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t\t// Checks to see if the ship is within bounds of the grid\n\t\t// Returns boolean\n\t\tShip.prototype.withinBounds = function (x, y, direction) {\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\treturn x + this.shipLength <= Game.size;\n\t\t\t} else {\n\t\t\t\treturn y + this.shipLength <= Game.size;\n\t\t\t}\n\t\t};\n\n\t\t// Increments the damage counter of a ship\n\t\t// Returns Ship\n\t\tShip.prototype.incrementDamage = function () {\n\t\t\tthis.damage++;\n\t\t\tif (this.isSunk()) {\n\t\t\t\tthis.sinkShip(false); // Sinks the ship\n\t\t\t}\n\t\t};\n\t\t// Checks to see if the ship is sunk\n\t\t// Returns boolean\n\t\tShip.prototype.isSunk = function () {\n\t\t\treturn this.damage >= this.maxDamage;\n\t\t};\n\t\t// Sinks the ship\n\t\tShip.prototype.sinkShip = function (virtual) {\n\t\t\tthis.damage = this.maxDamage; // Force the damage to exceed max damage\n\t\t\tthis.sunk = true;\n\n\t\t\t// Make the CSS class sunk, but only if the ship is not virtual\n\t\t\tif (!virtual) {\n\t\t\t\tvar allCells = this.getAllShipCells();\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tthis.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * Gets all the ship cells\n\t\t *\n\t\t * Returns an array with all (x, y) coordinates of the ship:\n\t\t * e.g.\n\t\t * [\n\t\t *\t{'x':2, 'y':2},\n\t\t *\t{'x':3, 'y':2},\n\t\t *\t{'x':4, 'y':2}\n\t\t * ]\n\t\t */\n\t\tShip.prototype.getAllShipCells = function () {\n\t\t\tvar resultObject = [];\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition + i, 'y': this.yPosition };\n\t\t\t\t} else {\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition, 'y': this.yPosition + i };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resultObject;\n\t\t};\n\t\t// Initializes a ship with the given coordinates and direction (bearing).\n\t\t// If the ship is declared \"virtual\", then the ship gets initialized with\n\t\t// its coordinates but DOESN'T get placed on the grid.\n\t\tShip.prototype.create = function (x, y, direction, virtual) {\n\t\t\t// This function assumes that you've already checked that the placement is legal\n\t\t\tthis.xPosition = x;\n\t\t\tthis.yPosition = y;\n\t\t\tthis.direction = direction;\n\n\t\t\t// If the ship is virtual, don't add it to the grid.\n\t\t\tif (!virtual) {\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n\t\t\t\t\t\tif (this.checkPosition(x + i, y + 1)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.checkPosition(x + i, y - 1)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\n\t\t\t\t\t\tif (this.checkPosition(x + 1, y + i)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.checkPosition(x - 1, y + i)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x - 1, y)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x - 1, y + 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y + 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tif (this.checkPosition(x + 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x + 1, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x - 1, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tShip.prototype.checkPosition = function (x, y) {\n\t\t\tlet triger = false;\n\t\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\n\t\t\t\ttriger = true;\n\t\t\t}\n\t\t\treturn triger\n\t\t};\n\t\t// direction === 0 when the ship is facing north/south\n\t\t// direction === 1 when the ship is facing east/west\n\t\tShip.DIRECTION_VERTICAL = 0;\n\t\tShip.DIRECTION_HORIZONTAL = 1;\n\n\t\t// Tutorial Object\n\t\t// Constructor\n\t\tfunction Tutorial() {\n\t\t\tthis.currentStep = 0;\n\t\t\t// Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\t\t\tthis.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n\t\t}\n\t\t// Advances the tutorial to the next step\n\t\tTutorial.prototype.nextStep = function () {\n\t\t\tvar humanGrid = document.querySelector('.human-player');\n\t\t\tvar computerGrid = document.querySelector('.computer-player');\n\t\t\tswitch (this.currentStep) {\n\t\t\t\tcase 0:\n\t\t\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'highlight');\n\t\t\t\t\t//document.getElementById('step1').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t\t\t\t// document.getElementById('step1').removeAttribute('class');\n\t\t\t\t\thumanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\n\t\t\t\t\t// document.getElementById('step2').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t// document.getElementById('step2').removeAttribute('class');\n\t\t\t\t\tvar humanClasses = humanGrid.getAttribute('class');\n\t\t\t\t\thumanClasses = humanClasses.replace(' highlight', '');\n\t\t\t\t\thumanGrid.setAttribute('class', humanClasses);\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\n\t\t\t\t\t// document.getElementById('step3').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tvar computerClasses = computerGrid.getAttribute('class');\n\t\t\t\t\t// document.getElementById('step3').removeAttribute('class');\n\t\t\t\t\tcomputerClasses = computerClasses.replace(' highlight', '');\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerClasses);\n\t\t\t\t\t// document.getElementById('step4').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t//document.getElementById('step4').removeAttribute('class');\n\t\t\t\t\tthis.currentStep = 6;\n\t\t\t\t\tthis.showTutorial = false;\n\t\t\t\t\tlocalStorage.setItem('showTutorial', false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// AI Object\n\t\t// Optimal battleship-playing AI\n\t\t// Constructor\n\t\tfunction AI(gameObject) {\n\t\t\tthis.gameObject = gameObject;\n\t\t\tthis.virtualGrid = new Grid(Game.size);\n\t\t\tthis.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n\n\t\t\tthis.probGrid = []; // Probability Grid\n\t\t\tthis.initProbs();\n\t\t\tthis.updateProbs();\n\t\t}\n\n\t\tAI.PROB_WEIGHT = 5000; // arbitrarily big number\n\t\t// how much weight to give to the opening book's high probability cells\n\t\tAI.OPEN_HIGH_MIN = 20;\n\t\tAI.OPEN_HIGH_MAX = 30;\n\t\t// how much weight to give to the opening book's medium probability cells\n\t\tAI.OPEN_MED_MIN = 15;\n\t\tAI.OPEN_MED_MAX = 25;\n\t\t// how much weight to give to the opening book's low probability cells\n\t\tAI.OPEN_LOW_MIN = 10;\n\t\tAI.OPEN_LOW_MAX = 20;\n\t\t// Amount of randomness when selecting between cells of equal probability\n\t\tAI.RANDOMNESS = 0.1;\n\t\t// AI's opening book.\n\t\t// This is the pattern of the first cells for the AI to target\n\t\tAI.OPENINGS = [\n\t\t\t{ 'x': 7, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 6, 'y': 2, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 3, 'y': 7, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 2, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 6, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 3, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 5, 'y': 5, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 4, 'y': 4, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 0, 'y': 8, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\n\t\t\t{ 'x': 1, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\n\t\t\t{ 'x': 8, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\n\t\t\t{ 'x': 9, 'y': 1, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\n\t\t\t{ 'x': 9, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\n\t\t\t{ 'x': 0, 'y': 0, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) }\n\t\t];\n\t\t// Scouts the grid based on max probability, and shoots at the cell\n\t\t// that has the highest probability of containing a ship\n\t\tAI.prototype.shoot = function () {\n\t\t\tvar maxProbability = 0;\n\t\t\tvar maxProbCoords;\n\t\t\tvar maxProbs = [];\n\n\t\t\t// Add the AI's opening book to the probability grid\n\t\t\tfor (var i = 0; i < AI.OPENINGS.length; i++) {\n\t\t\t\tvar cell = AI.OPENINGS[i];\n\t\t\t\tif (this.probGrid[cell.x][cell.y] !== 0) {\n\t\t\t\t\tthis.probGrid[cell.x][cell.y] += cell.weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\tif (this.probGrid[x][y] > maxProbability) {\n\t\t\t\t\t\tmaxProbability = this.probGrid[x][y];\n\t\t\t\t\t\tmaxProbs = [{ 'x': x, 'y': y }]; // Replace the array\n\t\t\t\t\t} else if (this.probGrid[x][y] === maxProbability) {\n\t\t\t\t\t\tmaxProbs.push({ 'x': x, 'y': y });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmaxProbCoords = Math.random() < AI.RANDOMNESS ?\n\t\t\t\tmaxProbs[Math.floor(Math.random() * maxProbs.length)] :\n\t\t\t\tmaxProbs[0];\n\n\t\t\tvar result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER);\n\n\t\t\t// If the game ends, the next lines need to be skipped.\n\t\t\tif (Game.gameOver) {\n\t\t\t\tGame.gameOver = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result;\n\n\t\t\t// If you hit a ship, check to make sure if you've sunk it.\n\t\t\tif (result === CONST.TYPE_HIT) {\n\t\t\t\tvar humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\t\t\t\tif (humanShip.isSunk()) {\n\t\t\t\t\t// Remove any ships from the roster that have been sunk\n\t\t\t\t\tvar shipTypes = [];\n\t\t\t\t\tfor (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n\t\t\t\t\t\tshipTypes.push(this.virtualFleet.fleetRoster[k].type);\n\t\t\t\t\t}\n\t\t\t\t\tvar index = shipTypes.indexOf(humanShip.type);\n\t\t\t\t\tthis.virtualFleet.fleetRoster.splice(index, 1);\n\n\t\t\t\t\t// Update the virtual grid with the sunk ship's cells\n\t\t\t\t\tvar shipCells = humanShip.getAllShipCells();\n\t\t\t\t\tfor (var _i = 0; _i < shipCells.length; _i++) {\n\t\t\t\t\t\tthis.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Update probability grid after each shot\n\t\t\tthis.updateProbs();\n\t\t};\n\t\t// Update the probability grid\n\t\tAI.prototype.updateProbs = function () {\n\t\t\tvar roster = this.virtualFleet.fleetRoster;\n\t\t\tvar coords;\n\t\t\tthis.resetProbs();\n\n\t\t\t// Probabilities are not normalized to fit in the interval [0, 1]\n\t\t\t// because we're only interested in the maximum value.\n\n\t\t\t// This works by trying to fit each ship in each cell in every orientation\n\t\t\t// For every cell, the more legal ways a ship can pass through it, the more\n\t\t\t// likely the cell is to contain a ship.\n\t\t\t// Cells that surround known 'hits' are given an arbitrarily large probability\n\t\t\t// so that the AI tries to completely sink the ship before moving on.\n\n\t\t\tfor (var k = 0; k < roster.length; k++) {\n\t\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\t\tfor (var i = 0; i < coords.length; i++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (var _i = 0; _i < coords.length; _i++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_i].x][coords[_i].y]++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\t\tfor (var j = 0; j < coords.length; j++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (var _j = 0; _j < coords.length; _j++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_j].x][coords[_j].y]++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set hit cells to probability zero so the AI doesn't\n\t\t\t\t\t\t// target cells that are already hit\n\t\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n\t\t\t\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Initializes the probability grid for targeting\n\t\tAI.prototype.initProbs = function () {\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tvar row = [];\n\t\t\t\tthis.probGrid[x] = row;\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\trow.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Resets the probability grid to all 0.\n\t\tAI.prototype.resetProbs = function () {\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Finds a human ship by coordinates\n\t\t// Returns Ship\n\t\tAI.prototype.findHumanShip = function (x, y) {\n\t\t\treturn this.gameObject.humanFleet.findShipByCoords(x, y);\n\t\t};\n\t\t// Checks whether or not a given ship's cells passes through\n\t\t// any cell that is hit.\n\t\t// Returns boolean\n\t\tAI.prototype.passesThroughHitCell = function (shipCells) {\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\t// Gives the number of hit cells the ships passes through. The more\n\t\t// cells this is, the more probable the ship exists in those coordinates\n\t\t// Returns int\n\t\tAI.prototype.numHitCellsCovered = function (shipCells) {\n\t\t\tvar cells = 0;\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\t\tcells++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cells;\n\t\t};\n\n\t\t// Global constant only initialized once\n\t\tvar gameTutorial = new Tutorial();\n\n\t\t// Start the game\n\t\tnew Game(10);\n\n\t\tfunction transitionEndEventName() {\n\t\t\tvar i,\n\t\t\t\tundefined,\n\t\t\t\tel = document.createElement('div'),\n\t\t\t\ttransitions = {\n\t\t\t\t\t'transition': 'transitionend',\n\t\t\t\t\t'OTransition': 'otransitionend',  // oTransitionEnd in very old Opera\n\t\t\t\t\t'MozTransition': 'transitionend',\n\t\t\t\t\t'WebkitTransition': 'webkitTransitionEnd'\n\t\t\t\t};\n\n\t\t\tfor (i in transitions) {\n\t\t\t\tif (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n\t\t\t\t\treturn transitions[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Returns a random number between min (inclusive) and max (exclusive)\n\t\tfunction getRandom(min, max) {\n\t\t\treturn Math.random() * (max - min) + min;\n\t\t}\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container text-center\">\n\t\t\t\t<h2>Sea Battle with computer</h2>\n\t\t\t\t<div className=\"game-container\">\n\t\t\t\t\t<div className=\"game-container\">\n\t\t\t\t\t\t<div id=\"restart-sidebar\" className=\"hidden\">\n\t\t\t\t\t\t\t<h2>Try Again</h2>\n\t\t\t\t\t\t\t<button id=\"restart-game\">Restart Game</button>\n\t\t\t\t\t\t</div><div id=\"roster-sidebar\">\n\t\t\t\t\t\t\t<h2>Place Your Ships</h2>\n\t\t\t\t\t\t\t<ul className=\"fleet-roster\" id=\"fleet-roster\">\n\t\t\t\t\t\t\t\t<li id=\"1.1\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"1.2\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"1.3\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"1.4\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"2.1\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"2.2\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"2.3\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"3.1\" > </li>\n\t\t\t\t\t\t\t\t<li id=\"3.2\" > </li>\n\t\t\t\t\t\t\t\t<li id=\"4.1\" >  </li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t<button id=\"rotate-button\" data-direction=\"0\">Rotate Ship</button>\n\t\t\t\t\t\t\t<button id=\"start-game\" className=\"hidden\">Start Game</button>\n\t\t\t\t\t\t\t<button id=\"place-randomly\" className=\"hidden\">Place Randomly and Start</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"flex-box-contenier\">\n\t\t\t\t\t\t\t<div className=\"grid-container\">\n\t\t\t\t\t\t\t\t<h2>Your Fleet</h2>\n\t\t\t\t\t\t\t\t<div className=\"grid human-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"grid-container\">\n\t\t\t\t\t\t\t\t<h2>Enemy Fleet</h2>\n\t\t\t\t\t\t\t\t<div className=\"grid computer-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch1\"></span>\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch2\"></span>\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch3\"></span>\n\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withRouter(BattlesComponent);","/home/anushik/Desktop/dip/seebattle/src/components/Stylesheet.js",["78","79"],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":5,"column":8,"nodeType":"86","messageId":"87","endLine":5,"endColumn":25},{"ruleId":"84","severity":1,"message":"88","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":14},{"ruleId":"89","severity":1,"message":"90","line":50,"column":34,"nodeType":"91","messageId":"92","endLine":50,"endColumn":35,"suggestions":"93"},{"ruleId":"89","severity":1,"message":"90","line":50,"column":59,"nodeType":"91","messageId":"92","endLine":50,"endColumn":60,"suggestions":"94"},{"ruleId":"84","severity":1,"message":"88","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":14},{"ruleId":"84","severity":1,"message":"88","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":14},{"ruleId":"95","severity":1,"message":"96","line":566,"column":37,"nodeType":"97","messageId":"98","endLine":566,"endColumn":39},{"ruleId":"99","severity":1,"message":"100","line":610,"column":12,"nodeType":"86","messageId":"101","endLine":610,"endColumn":27},{"ruleId":"84","severity":1,"message":"102","line":614,"column":9,"nodeType":"86","messageId":"87","endLine":614,"endColumn":19},{"ruleId":"99","severity":1,"message":"103","line":625,"column":10,"nodeType":"86","messageId":"101","endLine":625,"endColumn":21},{"ruleId":"99","severity":1,"message":"104","line":626,"column":10,"nodeType":"86","messageId":"101","endLine":626,"endColumn":29},{"ruleId":"99","severity":1,"message":"105","line":627,"column":10,"nodeType":"86","messageId":"101","endLine":627,"endColumn":19},{"ruleId":"99","severity":1,"message":"106","line":628,"column":10,"nodeType":"86","messageId":"101","endLine":628,"endColumn":14},{"ruleId":"95","severity":1,"message":"96","line":635,"column":37,"nodeType":"97","messageId":"98","endLine":635,"endColumn":39},{"ruleId":"99","severity":1,"message":"100","line":639,"column":11,"nodeType":"86","messageId":"101","endLine":639,"endColumn":26},{"ruleId":"99","severity":1,"message":"107","line":642,"column":12,"nodeType":"86","messageId":"101","endLine":642,"endColumn":20},{"ruleId":"99","severity":1,"message":"108","line":643,"column":17,"nodeType":"86","messageId":"101","endLine":643,"endColumn":18},{"ruleId":"99","severity":1,"message":"109","line":645,"column":19,"nodeType":"86","messageId":"101","endLine":645,"endColumn":20},{"ruleId":"99","severity":1,"message":"107","line":661,"column":12,"nodeType":"86","messageId":"101","endLine":661,"endColumn":20},{"ruleId":"99","severity":1,"message":"109","line":662,"column":17,"nodeType":"86","messageId":"101","endLine":662,"endColumn":18},{"ruleId":"99","severity":1,"message":"108","line":665,"column":19,"nodeType":"86","messageId":"101","endLine":665,"endColumn":20},{"ruleId":"99","severity":1,"message":"108","line":685,"column":11,"nodeType":"86","messageId":"101","endLine":685,"endColumn":12},{"ruleId":"99","severity":1,"message":"109","line":686,"column":11,"nodeType":"86","messageId":"101","endLine":686,"endColumn":12},{"ruleId":"110","severity":1,"message":"111","line":763,"column":4,"nodeType":"112","messageId":"113","endLine":794,"endColumn":5},{"ruleId":"84","severity":1,"message":"114","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":13},{"ruleId":"115","severity":2,"message":"116","line":13,"column":16,"nodeType":"86","messageId":"117","endLine":13,"endColumn":26},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'RegisterConponent' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","no-useless-escape","Unnecessary escape character: \\[.","Literal","unnecessaryEscape",["120","121"],["122","123"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'randomDirection' is already defined.","redeclared","'shipCoords' is assigned a value but never used.","'unusedShips' is already defined.","'availableShipsCount' is already defined.","'shipIndex' is already defined.","'ySub' is already defined.","'isPlaced' is already defined.","'x' is already defined.","'y' is already defined.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'React' is defined but never used.","no-undef","'Stylesheet' is not defined.","undef","no-global-assign","no-unsafe-negation",{"messageId":"124","fix":"125","desc":"126"},{"messageId":"127","fix":"128","desc":"129"},{"messageId":"124","fix":"130","desc":"126"},{"messageId":"127","fix":"131","desc":"129"},"removeEscape",{"range":"132","text":"133"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"134","text":"135"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"136","text":"133"},{"range":"137","text":"135"},[1530,1531],"",[1530,1530],"\\",[1555,1556],[1555,1555]]