[{"C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\index.js":"1","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\reportWebVitals.js":"2","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\App.js":"3","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\LoginComponent.jsx":"4","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\HomeComponent.jsx":"5","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\RegisterConponent.jsx":"6","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\GameComponent.jsx":"7","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\services\\Service.js":"8","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\BattlesComponent.jsx":"9","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\ListUserComponent.jsx":"10","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\InfoPopupComponent.jsx":"11","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\MultiGameComponent.jsx":"12","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\UserInfoComponent.jsx":"13"},{"size":521,"mtime":1620469163634,"results":"14","hashOfConfig":"15"},{"size":375,"mtime":1620469163635,"results":"16","hashOfConfig":"15"},{"size":761,"mtime":1620469163615,"results":"17","hashOfConfig":"15"},{"size":3614,"mtime":1620646094024,"results":"18","hashOfConfig":"15"},{"size":2638,"mtime":1620669144693,"results":"19","hashOfConfig":"15"},{"size":4493,"mtime":1620815182396,"results":"20","hashOfConfig":"15"},{"size":52207,"mtime":1621156427778,"results":"21","hashOfConfig":"15"},{"size":1223,"mtime":1620669070604,"results":"22","hashOfConfig":"15"},{"size":1994,"mtime":1621173404847,"results":"23","hashOfConfig":"15"},{"size":2754,"mtime":1621172915466,"results":"24","hashOfConfig":"15"},{"size":454,"mtime":1620560722334,"results":"25","hashOfConfig":"15"},{"size":47329,"mtime":1620561197716,"results":"26","hashOfConfig":"15"},{"size":1924,"mtime":1620669076995,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"jhmp5s",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"30"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\index.js",[],["61","62"],"C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\reportWebVitals.js",[],"C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\App.js",[],"C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\LoginComponent.jsx",[],"C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\HomeComponent.jsx",["63"],"import React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\r\nimport ListUserComponent from './ListUserComponent';\r\nimport { withRouter } from 'react-router-dom';\r\nimport BattlesComponent from './BattlesComponent';\r\nimport GameComponent from './GameComponent';\r\nimport MultiGameComponent from './MultiGameComponent';\r\nimport UserInfoComponent from './UserInfoComponent';\r\n\r\nclass HomeComponent extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = this.initialState;\r\n    if (localStorage.getItem('jwtToken') === null) {\r\n      this.gologin();\r\n    }\r\n    // if (localStorage.getItem('role') === 'none') {\r\n    //   this.goChangePassword();\r\n    // }\r\n  }\r\n  \r\n  initialState = {\r\n    role: localStorage.getItem('role'), id: localStorage.getItem('uid')\r\n  };\r\n  gologin = () => {\r\n    this.props.history.replace(\"/login\");\r\n  };\r\n  goChangePassword() {\r\n    this.props.history.replace(\"/changepass\");\r\n  }\r\n  logoutClick = () => {\r\n    localStorage.clear();\r\n    this.gologin();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Router>\r\n          <div>\r\n            <div className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white border-bottom shadow-sm\">\r\n              <p className=\"h5 my-0 me-md-auto fw-normal\">Sea Battles </p>\r\n              <nav className=\"my-2 my-md-0 me-md-3\">\r\n                <Link to={\"/\"} className=\"p-2 text-dark\">Battles</Link>\r\n                <Link to={\"/users\"} className=\"p-2 text-dark\">Users</Link>\r\n                <Link to={\"/game\"} className=\"p-2 text-dark\">Game</Link>\r\n                {/* <Link to={\"/userInfo\"} className=\"p-2 text-dark\">My Page</Link> */}\r\n              </nav>\r\n              <div style={{ flex: 1 }}></div>\r\n              {<Link to={\"/logout\"} onClick={this.logoutClick} className=\"btn btn-outline-primary nav-link\">Sign Out</Link>}\r\n            </div>\r\n\r\n            <Switch>\r\n              <Route exact path=\"/users\">\r\n                <ListUserComponent />\r\n              </Route>\r\n              <Route exact path=\"/\">\r\n                <BattlesComponent />\r\n              </Route>\r\n              <Route exact path=\"/game\">\r\n                <GameComponent />\r\n              </Route>\r\n              <Route exact path=\"/multigame\">\r\n                <MultiGameComponent />\r\n              </Route>\r\n              {/* <Route exact path=\"/userInfo\">\r\n                <UserInfoComponent />\r\n              </Route> */}\r\n            </Switch>\r\n          </div>\r\n        </Router>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(HomeComponent);\r\n","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\RegisterConponent.jsx",[],"C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\GameComponent.jsx",["64","65","66","67","68","69","70","71","72","73","74","75","76","77","78","79","80","81","82","83","84","85","86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101"],"import React, { Component } from 'react';\r\nimport Service from '../services/Service';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport './styles.css';\r\nimport axios from 'axios';\r\n\r\n\r\nclass BattlesComponent extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tbattles: []\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tService.getAllBattles().then((res) => {\r\n\t\t\tthis.setState({ battles: res.data.content });\r\n\t\t});\r\n\t\tthis.mainGame();\r\n\t}\r\n\r\n\tmainGame = () => {\r\n\t\tvar CONST = {};\r\n\t\tCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1'];\r\n\t\t// You are player 0 and the computer is player 1\r\n\t\t// The virtual player is used for generating temporary ships\r\n\t\t// for calculating the probability heatmap\r\n\t\tCONST.HUMAN_PLAYER = 0;\r\n\t\tCONST.COMPUTER_PLAYER = 1;\r\n\t\tCONST.VIRTUAL_PLAYER = 2;\r\n\r\n\t\tCONST.CSS_TYPE_EMPTY = 'empty';\r\n\t\tCONST.CSS_TYPE_SHIP = 'ship';\r\n\t\tCONST.CSS_TYPE_MISS = 'miss';\r\n\t\tCONST.CSS_TYPE_HIT = 'hit';\r\n\t\tCONST.CSS_TYPE_SUNK = 'sunk';\r\n\r\n\t\tCONST.TYPE_EMPTY = 0; // 0 = water (empty)\r\n\t\tCONST.TYPE_SHIP = 1; // 1 = undamaged ship\r\n\t\tCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\r\n\t\tCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\r\n\t\tCONST.TYPE_SUNK = 4; // 4 = sunk ship\r\n\t\tCONST.TYPE_NOT_ALLOWED = 5; // 5 = neighbour of ship\r\n\r\n\t\tGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\r\n\t\tCONST.USED = 1;\r\n\t\tCONST.UNUSED = 0;\r\n\r\n\t\tfunction Game(size) {\r\n\t\t\tGame.size = size;\r\n\t\t\tthis.shotsTaken = 0;\r\n\t\t\tthis.createGrid();\r\n\t\t\tthis.init();\r\n\t\t}\r\n\t\tGame.size = 10; // Default grid size is 10x10\r\n\t\tGame.gameOver = false;\r\n\t\t// Checks if the game is won, and if it is, re-initializes the game\r\n\t\tGame.prototype.checkIfWon = function () {\r\n\t\t\tif (this.computerFleet.allShipsSunk()) {\r\n\t\t\t\talert('Congratulations, you win!');\r\n\t\t\t\tconsole.log(this.shotsTaken);\r\n\r\n\t\t\t\tconst token = localStorage.getItem('jwtToken');\r\n\t\t\t\tconst userId = localStorage.getItem('uid');\r\n\t\t\t\tconst userPoint = (100 - this.shotsTaken - 20) * 23;\r\n\t\t\t\tconst sendData = [userId, userPoint];\r\n\t\t\t\taxios.post(\"http://localhost:9090/api/v1/users/rating\", sendData, {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t'Authorization': `Bearer ${token}`\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tGame.gameOver = true;\r\n\t\t\t\tthis.showRestartSidebar();\r\n\t\t\t} else if (this.humanFleet.allShipsSunk()) {\r\n\t\t\t\talert('Yarr! The computer sank all your ships. Try again.');\r\n\t\t\t\tGame.gameOver = true;\r\n\t\t\t\tthis.showRestartSidebar();\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Shoots at the target player on the grid.\r\n\t\t// Returns {int} Constants.TYPE: What the shot uncovered\r\n\t\tGame.prototype.shoot = function (x, y, targetPlayer) {\r\n\t\t\tlet targetGrid;\r\n\t\t\tlet targetFleet;\r\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\ttargetGrid = this.humanGrid;\r\n\t\t\t\ttargetFleet = this.humanFleet;\r\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\r\n\t\t\t\ttargetGrid = this.computerGrid;\r\n\t\t\t\ttargetFleet = this.computerFleet;\r\n\t\t\t}\r\n\r\n\t\t\tif (targetGrid.isDamagedShip(x, y)) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else if (targetGrid.isMiss(x, y)) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else\r\n\t\t\t\tif (targetGrid.isUndamagedShip(x, y)) {\r\n\t\t\t\t\t// update the board/grid\r\n\t\t\t\t\ttargetGrid.updateCell(x, y, 'hit', targetPlayer);\r\n\t\t\t\t\t// IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\r\n\t\t\t\t\t// because it overrides the CSS class to 'sunk' if we find that the ship was sunk\r\n\t\t\t\t\ttargetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\r\n\t\t\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\t\t\tthis.shotsTaken++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.checkIfWon();\r\n\t\t\t\t\treturn CONST.TYPE_HIT;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttargetGrid.updateCell(x, y, 'miss', targetPlayer);\r\n\t\t\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\t\t\tthis.shotsTaken++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.checkIfWon();\r\n\t\t\t\t\treturn CONST.TYPE_MISS;\r\n\t\t\t\t}\r\n\t\t};\r\n\t\t// Creates click event listeners on each one of the 100 grid cells\r\n\t\tGame.prototype.shootListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\t// Extract coordinates from event listener\r\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\t\t\tvar result = null;\r\n\t\t\tif (self.readyToPlay) {\r\n\t\t\t\tresult = self.shoot(x, y, CONST.COMPUTER_PLAYER);\r\n\r\n\t\t\t\t// Remove the tutorial arrow\r\n\t\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (result !== null && !Game.gameOver) {\r\n\t\t\t\t// The AI shoots iff the player clicks on a cell that he/she hasn't\r\n\t\t\t\t// already clicked on yet\r\n\t\t\t\tself.robot.shoot();\r\n\t\t\t} else {\r\n\t\t\t\tGame.gameOver = false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates click event listeners on each of the ship names in the roster\r\n\t\tGame.prototype.rosterListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\t// Remove all classes of 'placing' from the fleet roster first\r\n\t\t\tvar roster = document.querySelectorAll('.fleet-roster li');\r\n\t\t\tfor (var i = 0; i < roster.length; i++) {\r\n\t\t\t\tvar classes = roster[i].getAttribute('class') || '';\r\n\t\t\t\tclasses = classes.replace('placing', '');\r\n\t\t\t\troster[i].setAttribute('class', classes);\r\n\t\t\t}\r\n\r\n\t\t\t// Move the highlight to the next step\r\n\t\t\tif (gameTutorial.currentStep === 1) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t}\r\n\r\n\t\t\t// Set the class of the target ship to 'placing'\r\n\t\t\tGame.placeShipType = e.target.getAttribute('id');\r\n\t\t\tdocument.getElementById(Game.placeShipType).setAttribute('class', 'placing');\r\n\t\t\tGame.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\r\n\t\t\tself.placingOnGrid = true;\r\n\t\t};\r\n\t\t// Creates click event listeners on the human player's grid to handle\r\n\t\t// ship placement after the user has selected a ship name\r\n\t\tGame.prototype.placementListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\t// Extract coordinates from event listener\r\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\r\n\t\t\t\t// Don't screw up the direction if the user tries to place again.\r\n\t\t\t\tvar successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\r\n\t\t\t\tif (successful) {\r\n\t\t\t\t\t// Done placing this ship\r\n\t\t\t\t\tself.endPlacing(Game.placeShipType);\r\n\r\n\t\t\t\t\t// Remove the helper arrow\r\n\t\t\t\t\tif (gameTutorial.currentStep === 2) {\r\n\t\t\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tself.placingOnGrid = false;\r\n\t\t\t\t\tif (self.areAllShipsPlaced()) {\r\n\t\t\t\t\t\tvar el = document.getElementById('rotate-button');\r\n\t\t\t\t\t\tel.addEventListener(transitionEndEventName(), (function () {\r\n\t\t\t\t\t\t\tel.setAttribute('class', 'hidden');\r\n\t\t\t\t\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').setAttribute('class', 'highlight');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').removeAttribute('class');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}), false);\r\n\t\t\t\t\t\tel.setAttribute('class', 'invisible');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates mouseover event listeners that handles mouseover on the\r\n\t\t// human player's grid to draw a phantom ship implying that the user\r\n\t\t// is allowed to place a ship there\r\n\t\tGame.prototype.placementMouseover = function (e) {\r\n\t\t\t// conlose.log(\"placementMouseover\");\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\t\t\t\tvar classes;\r\n\t\t\t\tvar fleetRoster = self.humanFleet.fleetRoster;\r\n\r\n\t\t\t\tfor (var i = 0; i < fleetRoster.length; i++) {\r\n\t\t\t\t\tvar shipType = fleetRoster[i].type;\r\n\r\n\t\t\t\t\tif (Game.placeShipType === shipType &&\r\n\t\t\t\t\t\tfleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\r\n\t\t\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\r\n\t\t\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\r\n\t\t\t\t\t\t\tclasses = el.getAttribute('class');\r\n\t\t\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\r\n\t\t\t\t\t\t\tif (classes.indexOf(' grid-ship') < 0) {\r\n\t\t\t\t\t\t\t\tclasses += ' grid-ship';\r\n\t\t\t\t\t\t\t\tel.setAttribute('class', classes);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates mouseout event listeners that un-draws the phantom ship\r\n\t\t// on the human player's grid as the user hovers over a different cell\r\n\t\tGame.prototype.placementMouseout = function (e) {\r\n\t\t\t// console.log(\"on placementMouseout\");\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\r\n\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\r\n\t\t\t\t\tvar classes = el.getAttribute('class');\r\n\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\r\n\t\t\t\t\tif (classes.indexOf(' grid-ship') > -1) {\r\n\t\t\t\t\t\tclasses = classes.replace(' grid-ship', '');\r\n\t\t\t\t\t\tel.setAttribute('class', classes);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Click handler for the Rotate Ship button\r\n\t\tGame.prototype.toggleRotation = function (e) {\r\n\t\t\t// Toggle rotation direction\r\n\t\t\tvar direction = parseInt(e.target.getAttribute('data-direction'), 10);\r\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\te.target.setAttribute('data-direction', '1');\r\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\r\n\t\t\t} else if (direction === Ship.DIRECTION_HORIZONTAL) {\r\n\t\t\t\te.target.setAttribute('data-direction', '0');\r\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_VERTICAL;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Click handler for the Start Game button\r\n\t\tGame.prototype.startGame = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tvar el = document.getElementById('roster-sidebar');\r\n\t\t\tvar fn = function () { el.setAttribute('class', 'hidden'); };\r\n\t\t\tel.addEventListener(transitionEndEventName(), fn, false);\r\n\t\t\tel.setAttribute('class', 'invisible');\r\n\t\t\tself.readyToPlay = true;\r\n\r\n\t\t\t// Advanced the tutorial step\r\n\t\t\tif (gameTutorial.currentStep === 3) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t}\r\n\t\t\tel.removeEventListener(transitionEndEventName(), fn, false);\r\n\t\t};\r\n\t\t// Click handler for Restart Game button\r\n\t\tGame.prototype.restartGame = function (e) {\r\n\t\t\twindow.location.reload();\r\n\t\t};\r\n\t\t// Ends placing the current ship\r\n\t\tGame.prototype.endPlacing = function (shipType) {\r\n\t\t\tdocument.getElementById(shipType).setAttribute('class', 'placed');\r\n\r\n\t\t\t// Mark the ship as 'used'\r\n\t\t\tGame.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED;\r\n\r\n\t\t\t// Wipe out the variable when you're done with it\r\n\t\t\tGame.placeShipDirection = null;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\t\t};\r\n\t\t// Checks whether or not all ships are done placing\r\n\t\t// Returns boolean\r\n\t\tGame.prototype.areAllShipsPlaced = function () {\r\n\t\t\tvar playerRoster = document.querySelectorAll('.fleet-roster li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tif (playerRoster[i].getAttribute('class') === 'placed') {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Reset temporary variables\r\n\t\t\tGame.placeShipDirection = 0;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t// Resets the fog of war\r\n\t\tGame.prototype.resetFogOfWar = function () {\r\n\t\t\tfor (var i = 0; i < Game.size; i++) {\r\n\t\t\t\tfor (var j = 0; j < Game.size; j++) {\r\n\t\t\t\t\tthis.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\r\n\t\t\t\t\tthis.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Reset all values to indicate the ships are ready to be placed again\r\n\t\t\tGame.usedShips = Game.usedShips.map(function () { return CONST.UNUSED; });\r\n\t\t};\r\n\t\t// Resets CSS styling of the sidebar\r\n\t\tGame.prototype.resetRosterSidebar = function () {\r\n\t\t\tvar els = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < els.length; i++) {\r\n\t\t\t\tels[i].removeAttribute('class');\r\n\t\t\t}\r\n\r\n\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t} else {\r\n\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\r\n\t\t\t}\r\n\t\t\tdocument.getElementById('rotate-button').removeAttribute('class');\r\n\t\t\tdocument.getElementById('start-game').setAttribute('class', 'hidden');\r\n\t\t};\r\n\t\tGame.prototype.showRestartSidebar = function () {\r\n\t\t\tvar sidebar = document.getElementById('restart-sidebar');\r\n\t\t\tsidebar.setAttribute('class', 'highlight');\r\n\r\n\t\t\t// Deregister listeners\r\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\r\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\r\n\t\t\t\tcomputerCells[j].removeEventListener('click', this.shootListener, false);\r\n\t\t\t}\r\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tplayerRoster[i].removeEventListener('click', this.rosterListener, false);\r\n\t\t\t}\r\n\r\n\t\t\tvar restartButton = document.getElementById('restart-game');\r\n\t\t\trestartButton.addEventListener('click', this.restartGame, false);\r\n\t\t\trestartButton.self = this;\r\n\t\t};\r\n\t\t// Generates the HTML divs for the grid for both players\r\n\t\tGame.prototype.createGrid = function () {\r\n\t\t\tvar gridDiv = document.querySelectorAll('.grid');\r\n\t\t\tfor (var grid = 0; grid < gridDiv.length; grid++) {\r\n\t\t\t\tgridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\r\n\t\t\t\tfor (var i = 0; i < Game.size; i++) {\r\n\t\t\t\t\tfor (var j = 0; j < Game.size; j++) {\r\n\t\t\t\t\t\tvar el = document.createElement('div');\r\n\t\t\t\t\t\tel.setAttribute('data-x', i);\r\n\t\t\t\t\t\tel.setAttribute('data-y', j);\r\n\t\t\t\t\t\tel.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\r\n\t\t\t\t\t\tgridDiv[grid].appendChild(el);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Initializes the Game\r\n\t\tGame.prototype.init = function () {\r\n\t\t\tthis.humanGrid = new Grid(Game.size);\r\n\t\t\tthis.computerGrid = new Grid(Game.size);\r\n\t\t\tthis.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\r\n\t\t\tthis.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\r\n\r\n\t\t\tthis.robot = new AI(this);\r\n\r\n\t\t\t// Reset game variables\r\n\t\t\tthis.shotsTaken = 0;\r\n\t\t\tthis.readyToPlay = false;\r\n\t\t\tthis.placingOnGrid = false;\r\n\t\t\tGame.placeShipDirection = 0;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\r\n\t\t\tthis.resetRosterSidebar();\r\n\r\n\t\t\t// Add a click listener for the Grid.shoot() method for all cells\r\n\t\t\t// Only add this listener to the computer's grid\r\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\r\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\r\n\t\t\t\tcomputerCells[j].self = this;\r\n\t\t\t\tcomputerCells[j].addEventListener('click', this.shootListener, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add a click listener to the roster\t\r\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tplayerRoster[i].self = this;\r\n\t\t\t\tplayerRoster[i].addEventListener('click', this.rosterListener, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add a click listener to the human player's grid while placing\r\n\t\t\tvar humanCells = document.querySelector('.human-player').childNodes;\r\n\t\t\tfor (var k = 0; k < humanCells.length; k++) {\r\n\t\t\t\thumanCells[k].self = this;\r\n\t\t\t\thumanCells[k].addEventListener('click', this.placementListener, false);\r\n\t\t\t\thumanCells[k].addEventListener('mouseover', this.placementMouseover, false);\r\n\t\t\t\thumanCells[k].addEventListener('mouseout', this.placementMouseout, false);\r\n\t\t\t}\r\n\r\n\t\t\tvar rotateButton = document.getElementById('rotate-button');\r\n\t\t\trotateButton.addEventListener('click', this.toggleRotation, false);\r\n\t\t\tvar startButton = document.getElementById('start-game');\r\n\t\t\tstartButton.self = this;\r\n\t\t\tstartButton.addEventListener('click', this.startGame, false);\r\n\t\t\t// var resetButton = document.getElementById('reset-stats');\r\n\t\t\t// resetButton.addEventListener('click', Game.stats.resetStats, false);\r\n\t\t\tvar randomButton = document.getElementById('place-randomly');\r\n\t\t\trandomButton.self = this;\r\n\t\t\trandomButton.addEventListener('click', this.placeRandomly, false);\r\n\t\t\t// this.computerFleet.placeShipsRandomly();\r\n\t\t\tthis.computerFleet.placeShipsRandomlyComp();\r\n\t\t};\r\n\r\n\t\t// Grid object\r\n\t\t// Constructor\r\n\t\tfunction Grid(size) {\r\n\t\t\tthis.size = size;\r\n\t\t\tthis.cells = [];\r\n\t\t\tthis.init();\r\n\t\t}\r\n\r\n\t\t// Initialize and populate the grid\r\n\t\tGrid.prototype.init = function () {\r\n\t\t\tfor (var x = 0; x < this.size; x++) {\r\n\t\t\t\tvar row = [];\r\n\t\t\t\tthis.cells[x] = row;\r\n\t\t\t\tfor (var y = 0; y < this.size; y++) {\r\n\t\t\t\t\trow.push(CONST.TYPE_EMPTY);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Updates the cell's CSS class based on the type passed in\r\n\t\tGrid.prototype.updateCell = function (x, y, type, targetPlayer) {\r\n\t\t\tvar player;\r\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\tplayer = 'human-player';\r\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\r\n\t\t\t\tplayer = 'computer-player';\r\n\t\t\t}\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase CONST.CSS_TYPE_EMPTY:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_SHIP:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SHIP;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_MISS:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_MISS;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_HIT:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_HIT;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_SUNK:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SUNK;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\r\n\t\t\tdocument.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\r\n\t\t};\r\n\t\t// Checks to see if a cell contains an undamaged ship\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isUndamagedShip = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_SHIP;\r\n\t\t};\r\n\t\t// Checks to see if the shot was missed. This is equivalent\r\n\t\t// to checking if a cell contains a cannonball\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isMiss = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_MISS;\r\n\t\t};\r\n\t\t// Checks to see if a cell contains a damaged ship,\r\n\t\t// either hit or sunk.\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isDamagedShip = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\r\n\t\t};\r\n\r\n\t\t// Fleet object\r\n\t\t// This object is used to keep track of a player's portfolio of ships\r\n\t\t// Constructor\r\n\t\tfunction Fleet(playerGrid, player) {\r\n\t\t\tthis.numShips = CONST.AVAILABLE_SHIPS.length;\r\n\t\t\tthis.playerGrid = playerGrid;\r\n\t\t\tthis.player = player;\r\n\t\t\tthis.fleetRoster = [];\r\n\t\t\tthis.populate();\r\n\t\t}\r\n\t\t// Populates a fleet\r\n\t\tFleet.prototype.populate = function () {\r\n\t\t\tfor (var i = 0; i < this.numShips; i++) {\r\n\t\t\t\t// loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\r\n\t\t\t\tvar j = i % CONST.AVAILABLE_SHIPS.length;\r\n\t\t\t\tthis.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Places the ship and returns whether or not the placement was successful\r\n\t\t// Returns boolean\r\n\t\tFleet.prototype.placeShip = function (x, y, direction, shipType) {\r\n\t\t\tvar shipCoords;\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar shipTypes = this.fleetRoster[i].type;\r\n\r\n\t\t\t\tif (shipType === shipTypes &&\r\n\t\t\t\t\tthis.fleetRoster[i].isLegal(x, y, direction)) {\r\n\t\t\t\t\tthis.fleetRoster[i].create(x, y, direction, false);\r\n\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\r\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\r\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t// Places ships randomly on the board\r\n\t\t// TODO: Avoid placing ships too close to each other\r\n\t\tFleet.prototype.placeShipsRandomly = function () {\r\n\t\t\tvar shipCoords;\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar illegalPlacement = true;\r\n\r\n\t\t\t\t// Prevents the random placement of already placed ships\r\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\twhile (illegalPlacement) {\r\n\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\r\n\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\r\n\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\r\n\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\t\t\t\t\t\tillegalPlacement = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\r\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\r\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\r\n\t\t\t\t\t\tGame.usedShips[i] = CONST.USED;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tFleet.prototype.placeShipsRandomlyComp = function () {\r\n\t\t\tswitch (Math.floor(4 * Math.random())) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tconsole.log(\"case 0\");\r\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\r\n\t\t\t\t\tvar availableShipsCount = 10;\r\n\t\t\t\t\tvar shipIndex;\r\n\t\t\t\t\tvar ySub;\r\n\r\n\t\t\t\t\twhile (availableShipsCount > 0) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex after cond\");\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \"dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tySub = this.fleetRoster[shipIndex].maxDamage;\r\n\t\t\t\t\t\t\tconsole.log(\" in cond\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconsole.log(ySub + \"  sub\");\r\n\t\t\t\t\t\t// console.log(this.fleetRoster[shipIndex]);\r\n\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\tfor (var y = 0; y < 5; y++) {\r\n\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t// if (y + ySub < 5) {\r\n\t\t\t\t\t\t\t\t\t\t// \tySub = 0;\r\n\t\t\t\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t\t\t\t\t// console.log(ySub + \"  after if   \" + y);\r\n\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection) && (y + ySub < 5)) {\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tconsole.log(\"case 1\");\r\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\r\n\t\t\t\t\tvar availableShipsCount = 10;\r\n\t\t\t\t\tvar shipIndex;\r\n\t\t\t\t\tvar ySub;\r\n\r\n\t\t\t\t\twhile (availableShipsCount > 0) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex after cond\");\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \"dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tySub = this.fleetRoster[shipIndex].maxDamage;\r\n\t\t\t\t\t\t\tconsole.log(\" in cond\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconsole.log(ySub + \"  sub\");\r\n\t\t\t\t\t\t// console.log(this.fleetRoster[shipIndex]);\r\n\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\tfor (var y = 5; y < 10; y++) {\r\n\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection) && (y + ySub < 10)) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tconsole.log(\"case 2\");\r\n\t\t\t\t\t// in the hole grid\r\n\t\t\t\t\tvar shipCoords;\r\n\t\t\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\t\t\tvar illegalPlacement = true;\r\n\t\t\t\t\t\twhile (illegalPlacement) {\r\n\t\t\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\r\n\t\t\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\r\n\t\t\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\r\n\t\t\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\t\t\t\t\t\t\t\tillegalPlacement = false;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tconsole.log(\"case 3\");\r\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\r\n\t\t\t\t\tvar availableShipsCount = 10;\r\n\t\t\t\t\tvar shipIndex;\r\n\t\t\t\t\tvar ySub;\r\n\r\n\t\t\t\t\tvar randomCount = Math.floor(7 * Math.random());\r\n\r\n\t\t\t\t\twhile (availableShipsCount > 4 + randomCount) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \" dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var x = 0; x < 10; x += 9) {\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var y = 0; y < 10; y++) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, y, randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var y = 0; y < 10; y += 9) {\r\n\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile (availableShipsCount > 4) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \" dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var x = 0; x < 10; x += 9) {\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var y = 9; y >= 0 ; y--) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, y, randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var y = 0; y < 10; y += 9) {\r\n\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var x = 9; x >= 0; x--) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar m = 0;\r\n\t\t\t\t\twhile (availableShipsCount > 0) {\r\n\t\t\t\t\t\t// console.log(\"in last while\");\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar x = Math.floor(8 * Math.random() + 1);\r\n\t\t\t\t\t\tvar y = Math.floor(8 * Math.random() + 1);\r\n\t\t\t\t\t\trandomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\tif (this.fleetRoster[m].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\tthis.fleetRoster[m].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\tunusedShips[m] = 'used';\r\n\t\t\t\t\t\t\t// console.log(availableShipsCount + \"ship count\")\r\n\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\tm++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// console.log(unusedShips);\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Finds a ship by location\r\n\t\t// Returns the ship object located at (x, y)\r\n\t\t// If no ship exists at (x, y), this returns null instead\r\n\t\tFleet.prototype.findShipByCoords = function (x, y) {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar currentShip = this.fleetRoster[i];\r\n\t\t\t\tif (currentShip.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tif (y === currentShip.yPosition &&\r\n\t\t\t\t\t\tx >= currentShip.xPosition &&\r\n\t\t\t\t\t\tx < currentShip.xPosition + currentShip.shipLength) {\r\n\t\t\t\t\t\treturn currentShip;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (x === currentShip.xPosition &&\r\n\t\t\t\t\t\ty >= currentShip.yPosition &&\r\n\t\t\t\t\t\ty < currentShip.yPosition + currentShip.shipLength) {\r\n\t\t\t\t\t\treturn currentShip;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\t// Finds a ship by its type\r\n\t\t// Param shipType is a string\r\n\t\t// Returns the ship object that is of type shipType\r\n\t\t// If no ship exists, this returns null.\r\n\t\tFleet.prototype.findShipByType = function (shipType) {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tif (this.fleetRoster[i].type === shipType) {\r\n\t\t\t\t\treturn this.fleetRoster[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\t// Checks to see if all ships have been sunk\r\n\t\t// Returns boolean\r\n\t\tFleet.prototype.allShipsSunk = function () {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\t// If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\r\n\t\t\t\tif (this.fleetRoster[i].sunk === false) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// Ship object\r\n\t\t// Constructor\r\n\t\tfunction Ship(type, playerGrid, player) {\r\n\t\t\tthis.damage = 0;\r\n\t\t\tthis.type = type;\r\n\t\t\tthis.playerGrid = playerGrid;\r\n\t\t\tthis.player = player;\r\n\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[0]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[1]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[2]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[3]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[4]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[5]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[6]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[7]:\r\n\t\t\t\t\tthis.shipLength = 3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[8]:\r\n\t\t\t\t\tthis.shipLength = 3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[9]:\r\n\t\t\t\t\tthis.shipLength = 4;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.maxDamage = this.shipLength;\r\n\t\t\tthis.sunk = false;\r\n\t\t}\r\n\t\t// Checks to see if the placement of a ship is legal\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.isLegal = function (x, y, direction) {\r\n\t\t\t// first, check if the ship is within the grid...\r\n\t\t\tif (this.withinBounds(x, y, direction)) {\r\n\t\t\t\t// ...then check to make sure it doesn't collide with another ship\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\t\tif (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_MISS ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_MISS ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Checks to see if the ship is within bounds of the grid\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.withinBounds = function (x, y, direction) {\r\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\treturn x + this.shipLength <= Game.size;\r\n\t\t\t} else {\r\n\t\t\t\treturn y + this.shipLength <= Game.size;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Increments the damage counter of a ship\r\n\t\t// Returns Ship\r\n\t\tShip.prototype.incrementDamage = function () {\r\n\t\t\tthis.damage++;\r\n\t\t\tif (this.isSunk()) {\r\n\t\t\t\tthis.sinkShip(false); // Sinks the ship\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Checks to see if the ship is sunk\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.isSunk = function () {\r\n\t\t\treturn this.damage >= this.maxDamage;\r\n\t\t};\r\n\t\t// Sinks the ship\r\n\t\tShip.prototype.sinkShip = function (virtual) {\r\n\t\t\tthis.damage = this.maxDamage; // Force the damage to exceed max damage\r\n\t\t\tthis.sunk = true;\r\n\r\n\t\t\t// Make the CSS class sunk, but only if the ship is not virtual\r\n\t\t\tif (!virtual) {\r\n\t\t\t\tvar allCells = this.getAllShipCells();\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tthis.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * Gets all the ship cells\r\n\t\t *\r\n\t\t * Returns an array with all (x, y) coordinates of the ship:\r\n\t\t * e.g.\r\n\t\t * [\r\n\t\t *\t{'x':2, 'y':2},\r\n\t\t *\t{'x':3, 'y':2},\r\n\t\t *\t{'x':4, 'y':2}\r\n\t\t * ]\r\n\t\t */\r\n\t\tShip.prototype.getAllShipCells = function () {\r\n\t\t\tvar resultObject = [];\r\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition + i, 'y': this.yPosition };\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition, 'y': this.yPosition + i };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn resultObject;\r\n\t\t};\r\n\t\t// Initializes a ship with the given coordinates and direction (bearing).\r\n\t\t// If the ship is declared \"virtual\", then the ship gets initialized with\r\n\t\t// its coordinates but DOESN'T get placed on the grid.\r\n\t\tShip.prototype.create = function (x, y, direction, virtual) {\r\n\t\t\t// This function assumes that you've already checked that the placement is legal\r\n\t\t\tthis.xPosition = x;\r\n\t\t\tthis.yPosition = y;\r\n\t\t\tthis.direction = direction;\r\n\r\n\t\t\t// If the ship is virtual, don't add it to the grid.\r\n\t\t\tif (!virtual) {\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\r\n\r\n\t\t\t\t\t\tif (this.checkPosition(x + i, y + 1)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPosition(x + i, y - 1)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\r\n\r\n\t\t\t\t\t\tif (this.checkPosition(x + 1, y + i)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPosition(x - 1, y + i)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y + 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y + 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (this.checkPosition(x + 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + 1, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tShip.prototype.checkPosition = function (x, y) {\r\n\t\t\tlet triger = false;\r\n\t\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\r\n\t\t\t\ttriger = true;\r\n\t\t\t}\r\n\t\t\treturn triger\r\n\t\t};\r\n\t\t// direction === 0 when the ship is facing north/south\r\n\t\t// direction === 1 when the ship is facing east/west\r\n\t\tShip.DIRECTION_VERTICAL = 0;\r\n\t\tShip.DIRECTION_HORIZONTAL = 1;\r\n\r\n\t\t// Tutorial Object\r\n\t\t// Constructor\r\n\t\tfunction Tutorial() {\r\n\t\t\tthis.currentStep = 0;\r\n\t\t\t// Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\r\n\t\t\tthis.showTutorial = localStorage.getItem('showTutorial') !== 'false';\r\n\t\t}\r\n\t\t// Advances the tutorial to the next step\r\n\t\tTutorial.prototype.nextStep = function () {\r\n\t\t\tvar humanGrid = document.querySelector('.human-player');\r\n\t\t\tvar computerGrid = document.querySelector('.computer-player');\r\n\t\t\tswitch (this.currentStep) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'highlight');\r\n\t\t\t\t\t//document.getElementById('step1').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\r\n\t\t\t\t\t// document.getElementById('step1').removeAttribute('class');\r\n\t\t\t\t\thumanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\r\n\t\t\t\t\t// document.getElementById('step2').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t// document.getElementById('step2').removeAttribute('class');\r\n\t\t\t\t\tvar humanClasses = humanGrid.getAttribute('class');\r\n\t\t\t\t\thumanClasses = humanClasses.replace(' highlight', '');\r\n\t\t\t\t\thumanGrid.setAttribute('class', humanClasses);\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\r\n\t\t\t\t\t// document.getElementById('step3').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tvar computerClasses = computerGrid.getAttribute('class');\r\n\t\t\t\t\t// document.getElementById('step3').removeAttribute('class');\r\n\t\t\t\t\tcomputerClasses = computerClasses.replace(' highlight', '');\r\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerClasses);\r\n\t\t\t\t\t// document.getElementById('step4').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\t//document.getElementById('step4').removeAttribute('class');\r\n\t\t\t\t\tthis.currentStep = 6;\r\n\t\t\t\t\tthis.showTutorial = false;\r\n\t\t\t\t\tlocalStorage.setItem('showTutorial', false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// AI Object\r\n\t\t// Optimal battleship-playing AI\r\n\t\t// Constructor\r\n\t\tfunction AI(gameObject) {\r\n\t\t\tthis.gameObject = gameObject;\r\n\t\t\tthis.virtualGrid = new Grid(Game.size);\r\n\t\t\tthis.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\r\n\r\n\t\t\tthis.probGrid = []; // Probability Grid\r\n\t\t\tthis.initProbs();\r\n\t\t\tthis.updateProbs();\r\n\t\t}\r\n\r\n\t\tAI.PROB_WEIGHT = 5000; // arbitrarily big number\r\n\t\t// how much weight to give to the opening book's high probability cells\r\n\t\tAI.OPEN_HIGH_MIN = 20;\r\n\t\tAI.OPEN_HIGH_MAX = 30;\r\n\t\t// how much weight to give to the opening book's medium probability cells\r\n\t\tAI.OPEN_MED_MIN = 15;\r\n\t\tAI.OPEN_MED_MAX = 25;\r\n\t\t// how much weight to give to the opening book's low probability cells\r\n\t\tAI.OPEN_LOW_MIN = 10;\r\n\t\tAI.OPEN_LOW_MAX = 20;\r\n\t\t// Amount of randomness when selecting between cells of equal probability\r\n\t\tAI.RANDOMNESS = 0.1;\r\n\t\t// AI's opening book.\r\n\t\t// This is the pattern of the first cells for the AI to target\r\n\t\tAI.OPENINGS = [\r\n\t\t\t{ 'x': 7, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 6, 'y': 2, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 3, 'y': 7, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 2, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 6, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 3, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 5, 'y': 5, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 4, 'y': 4, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 0, 'y': 8, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\r\n\t\t\t{ 'x': 1, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 8, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\r\n\t\t\t{ 'x': 9, 'y': 1, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 9, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 0, 'y': 0, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) }\r\n\t\t];\r\n\t\t// Scouts the grid based on max probability, and shoots at the cell\r\n\t\t// that has the highest probability of containing a ship\r\n\t\tAI.prototype.shoot = function () {\r\n\t\t\tvar maxProbability = 0;\r\n\t\t\tvar maxProbCoords;\r\n\t\t\tvar maxProbs = [];\r\n\r\n\t\t\t// Add the AI's opening book to the probability grid\r\n\t\t\tfor (var i = 0; i < AI.OPENINGS.length; i++) {\r\n\t\t\t\tvar cell = AI.OPENINGS[i];\r\n\t\t\t\tif (this.probGrid[cell.x][cell.y] !== 0) {\r\n\t\t\t\t\tthis.probGrid[cell.x][cell.y] += cell.weight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\tif (this.probGrid[x][y] > maxProbability) {\r\n\t\t\t\t\t\tmaxProbability = this.probGrid[x][y];\r\n\t\t\t\t\t\tmaxProbs = [{ 'x': x, 'y': y }]; // Replace the array\r\n\t\t\t\t\t} else if (this.probGrid[x][y] === maxProbability) {\r\n\t\t\t\t\t\tmaxProbs.push({ 'x': x, 'y': y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tmaxProbCoords = Math.random() < AI.RANDOMNESS ?\r\n\t\t\t\tmaxProbs[Math.floor(Math.random() * maxProbs.length)] :\r\n\t\t\t\tmaxProbs[0];\r\n\r\n\t\t\tvar result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER);\r\n\r\n\t\t\t// If the game ends, the next lines need to be skipped.\r\n\t\t\tif (Game.gameOver) {\r\n\t\t\t\tGame.gameOver = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result;\r\n\r\n\t\t\t// If you hit a ship, check to make sure if you've sunk it.\r\n\t\t\tif (result === CONST.TYPE_HIT) {\r\n\t\t\t\tvar humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\r\n\t\t\t\tif (humanShip.isSunk()) {\r\n\t\t\t\t\r\n\r\n\t\t\t\t\t// Remove any ships from the roster that have been sunk\r\n\t\t\t\t\tvar shipTypes = [];\r\n\t\t\t\t\tfor (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\r\n\t\t\t\t\t\tshipTypes.push(this.virtualFleet.fleetRoster[k].type);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar index = shipTypes.indexOf(humanShip.type);\r\n\t\t\t\t\tthis.virtualFleet.fleetRoster.splice(index, 1);\r\n\r\n\t\t\t\t\t// Update the virtual grid with the sunk ship's cells\r\n\t\t\t\t\tvar shipCells = humanShip.getAllShipCells();\r\n\t\t\t\t\tfor (var _i = 0; _i < shipCells.length; _i++) {\r\n\t\t\t\t\t\tthis.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// add here\r\n\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Update probability grid after each shot\r\n\t\t\tthis.updateProbs();\r\n\t\t};\r\n\t\tAI.prototype.checkPos = function (x, y) {\r\n\t\t\tlet triger = false;\r\n\t\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\r\n\t\t\t\ttriger = true;\r\n\t\t\t}\r\n\t\t\treturn triger\r\n\t\t};\r\n\t\t// Update the probability grid\r\n\t\tAI.prototype.updateProbs = function () {\r\n\t\t\tvar roster = this.virtualFleet.fleetRoster;\r\n\t\t\tvar coords;\r\n\t\t\tthis.resetProbs();\r\n\r\n\t\t\t// Probabilities are not normalized to fit in the interval [0, 1]\r\n\t\t\t// because we're only interested in the maximum value.\r\n\r\n\t\t\t// This works by trying to fit each ship in each cell in every orientation\r\n\t\t\t// For every cell, the more legal ways a ship can pass through it, the more\r\n\t\t\t// likely the cell is to contain a ship.\r\n\t\t\t// Cells that surround known 'hits' are given an arbitrarily large probability\r\n\t\t\t// so that the AI tries to completely sink the ship before moving on.\r\n\r\n\t\t\tfor (var k = 0; k < roster.length; k++) {\r\n\t\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\r\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\r\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\r\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < coords.length; i++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfor (var _i = 0; _i < coords.length; _i++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_i].x][coords[_i].y]++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\r\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\r\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\r\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\r\n\t\t\t\t\t\t\t\tfor (var j = 0; j < coords.length; j++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfor (var _j = 0; _j < coords.length; _j++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_j].x][coords[_j].y]++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Set hit cells to probability zero so the AI doesn't\r\n\t\t\t\t\t\t// target cells that are already hit\r\n\t\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\t\t\tthis.probGrid[x][y] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_SUNK) {\r\n\t\t\t\t\t\tconsole.log(\"this sell is sunk   \" + x + \"   \" + y);\r\n\t\t\t\t\t\tif (this.checkPos(x - 1, y - 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x - 1][y - 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x - 1, y)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x - 1][y] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x - 1, y + 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x - 1][y + 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x, y - 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x][y - 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x, y + 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x][y + 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x + 1, y - 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x + 1][y - 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x + 1, y)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x + 1][y] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x + 1, y + 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x + 1][y + 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconsole.log(this.probGrid);\r\n\t\t};\r\n\t\t// Initializes the probability grid for targeting\r\n\t\tAI.prototype.initProbs = function () {\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tvar row = [];\r\n\t\t\t\tthis.probGrid[x] = row;\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\trow.push(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Resets the probability grid to all 0.\r\n\t\tAI.prototype.resetProbs = function () {\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\tthis.probGrid[x][y] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Finds a human ship by coordinates\r\n\t\t// Returns Ship\r\n\t\tAI.prototype.findHumanShip = function (x, y) {\r\n\t\t\treturn this.gameObject.humanFleet.findShipByCoords(x, y);\r\n\t\t};\r\n\t\t// Checks whether or not a given ship's cells passes through\r\n\t\t// any cell that is hit.\r\n\t\t// Returns boolean\r\n\t\tAI.prototype.passesThroughHitCell = function (shipCells) {\r\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\r\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t// Gives the number of hit cells the ships passes through. The more\r\n\t\t// cells this is, the more probable the ship exists in those coordinates\r\n\t\t// Returns int\r\n\t\tAI.prototype.numHitCellsCovered = function (shipCells) {\r\n\t\t\tvar cells = 0;\r\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\r\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\tcells++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn cells;\r\n\t\t};\r\n\r\n\t\t// Global constant only initialized once\r\n\t\tvar gameTutorial = new Tutorial();\r\n\r\n\t\t// Start the game\r\n\t\tnew Game(10);\r\n\r\n\t\tfunction transitionEndEventName() {\r\n\t\t\tvar i,\r\n\t\t\t\tundefined,\r\n\t\t\t\tel = document.createElement('div'),\r\n\t\t\t\ttransitions = {\r\n\t\t\t\t\t'transition': 'transitionend',\r\n\t\t\t\t\t'OTransition': 'otransitionend',  // oTransitionEnd in very old Opera\r\n\t\t\t\t\t'MozTransition': 'transitionend',\r\n\t\t\t\t\t'WebkitTransition': 'webkitTransitionEnd'\r\n\t\t\t\t};\r\n\r\n\t\t\tfor (i in transitions) {\r\n\t\t\t\tif (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\r\n\t\t\t\t\treturn transitions[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Returns a random number between min (inclusive) and max (exclusive)\r\n\t\tfunction getRandom(min, max) {\r\n\t\t\treturn Math.random() * (max - min) + min;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container text-center\">\r\n\t\t\t\t<h2>Sea Battle with computer</h2>\r\n\t\t\t\t<div className=\"game-container\">\r\n\t\t\t\t\t<div className=\"game-container\">\r\n\t\t\t\t\t\t<div id=\"restart-sidebar\" className=\"hidden\">\r\n\t\t\t\t\t\t\t<h2>Try Again</h2>\r\n\t\t\t\t\t\t\t<button id=\"restart-game\">Restart Game</button>\r\n\t\t\t\t\t\t</div><div id=\"roster-sidebar\">\r\n\t\t\t\t\t\t\t<h2>Place Your Ships</h2>\r\n\t\t\t\t\t\t\t<ul className=\"fleet-roster\" id=\"fleet-roster\">\r\n\t\t\t\t\t\t\t\t<li id=\"1.1\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.2\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.3\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.4\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.1\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.2\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.3\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"3.1\" > </li>\r\n\t\t\t\t\t\t\t\t<li id=\"3.2\" > </li>\r\n\t\t\t\t\t\t\t\t<li id=\"4.1\" >  </li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t<button id=\"rotate-button\" data-direction=\"0\">Rotate Ship</button>\r\n\t\t\t\t\t\t\t<button id=\"start-game\" className=\"hidden\">Start Game</button>\r\n\t\t\t\t\t\t\t<button id=\"place-randomly\" className=\"hidden\">Place Randomly and Start</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex-box-contenier\">\r\n\t\t\t\t\t\t\t<div className=\"grid-container\">\r\n\t\t\t\t\t\t\t\t<h2>Your Fleet</h2>\r\n\t\t\t\t\t\t\t\t<div className=\"grid human-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"grid-container\">\r\n\t\t\t\t\t\t\t\t<h2>Enemy Fleet</h2>\r\n\t\t\t\t\t\t\t\t<div className=\"grid computer-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch1\"></span>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch2\"></span>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch3\"></span>\r\n\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withRouter(BattlesComponent);","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\services\\Service.js",["102"],"import axios from 'axios';\r\n\r\nconst USER_URL = \"http://localhost:9090/api/v1/users/allusers\";\r\nconst BATTLE_URL = \"http://localhost:9090/api/v1/allbattles\";\r\nconst USER_INFO_URL = \"http://localhost:9090/api/v1/users/userinfo\";\r\n\r\nclass Service{\r\n    getAllUsers(){\r\n        const token = localStorage.getItem('jwtToken');\r\n        return axios.get(USER_URL, {\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Authorization': `Bearer ${token}`\r\n            }\r\n          });\r\n    }\r\n    getAllBattles(){\r\n      const token = localStorage.getItem('jwtToken');\r\n      return axios.get(BATTLE_URL, {\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': `Bearer ${token}`\r\n          }\r\n        });\r\n    }\r\n    // getUserInfo(){\r\n    //   const token = localStorage.getItem('jwtToken');\r\n    //   const userId = localStorage.getItem('uid');\r\n    //   console.log(userId + \"  userId\");\r\n    //   return axios.get(USER_INFO_URL, userId, {\r\n    //       headers: {\r\n    //         'Content-Type': 'application/json',\r\n    //         'Authorization': `Bearer ${token}`\r\n    //       }\r\n    //     })\r\n    // }\r\n}\r\n\r\nexport default new Service()","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\BattlesComponent.jsx",["103"],"import React, { Component } from 'react';\r\nimport Service from '../services/Service';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\n\r\nclass BattlesComponent extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            battles: []\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        Service.getAllBattles().then((res) => {\r\n            this.setState({battles: res.data.content});\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"container text-center\">\r\n                <h2>Battles List</h2>\r\n                <div className=\"row\">\r\n                    <table className=\"table table-striped table-bordered\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th>User ID</th>\r\n                                <th>Name</th>\r\n                                {/* <th>Sender</th>\r\n                                <th>Receiver</th> */}\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.battles.map(battle =>\r\n                                <tr key={battle.id}>\r\n                                    <td>{battle.id}</td>\r\n                                    <td>{battle.name}</td>\r\n                                    {/* <td>{battle.senderid}</td>\r\n                                    <td>{battle.receiverid}</td> */}\r\n                                    {battle.status===0?<td><button className=\"btn btn-outline-primary\">Apply</button><button className=\"btn btn-outline-primary\">Refuse</button></td>:<td>Started</td>}\r\n                                </tr>)\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(BattlesComponent);","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\ListUserComponent.jsx",["104","105"],"import React, { Component } from 'react';\r\nimport Service from '../services/Service';\r\nimport { withRouter } from \"react-router-dom\";\r\nimport InfoPopup from './InfoPopupComponent';\r\n\r\nclass ListUserComponent extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            users: [],\r\n            showPopup: false, userInfo: ''\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        Service.getAllUsers().then((res) => {\r\n            this.setState({ users: res.data.content });\r\n        });\r\n    }\r\n\r\n    goPlay = () => {\r\n        this.props.history.replace(\"/multigame\");\r\n    };\r\n    // updatePopup = (popup) => {this.setState({ showPopup: popup})}\r\n    // showPopupInfo(id){\r\n    //     let info = '<h1>Start game</h1><br><a>Play</a>';\r\n    //     this.setState({userInfo: info});\r\n    //     this.setState({showPopup: true});\r\n    // }\r\n    render() {\r\n        return (\r\n            <div className=\"container text-center\">\r\n                <h2>Users List</h2>\r\n                <div className=\"row\">\r\n                    <table className=\"table table-striped table-bordered\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th>User ID</th>\r\n                                <th>Name</th>\r\n                                <th>Email</th>\r\n                                {/* <th>Role</th> */}\r\n                                <th>Rating</th>\r\n                                <th>Action</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.users.map(user =>\r\n                                    <tr key={user.id}>\r\n                                        <td>{user.id}</td>\r\n                                        <td>{user.name}</td>\r\n                                        <td>{user.email}</td>\r\n                                        {/* <td>{user.role.name}</td> */}\r\n                                        <td>{user.rating}</td>\r\n                                    {user.id != localStorage.getItem('uid') && \r\n                                            <td><a onClick={() => this.goPlay()} className=\"btn btn-outline-primary\">Play</a></td>\r\n                                        }\r\n                                    </tr>)\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <InfoPopup trigger={this.state.showPopup} setTrigger={this.updatePopup}>\r\n                    {this.state.userInfo}\r\n                </InfoPopup>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default withRouter(ListUserComponent);","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\InfoPopupComponent.jsx",[],"C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\MultiGameComponent.jsx",["106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124"],"import React, { Component } from 'react';\r\nimport Service from '../services/Service';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport './styles.css';\r\n\r\n\r\nclass BattlesComponent extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tbattles: []\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tService.getAllBattles().then((res) => {\r\n\t\t\tthis.setState({ battles: res.data.content });\r\n\t\t});\r\n\t\tthis.mainGame()\r\n\t}\r\n\r\n\tmainGame = () => {\r\n\t\tvar CONST = {};\r\n\t\tCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1'];\r\n\t\t// You are player 0 and the computer is player 1\r\n\t\t// The virtual player is used for generating temporary ships\r\n\t\t// for calculating the probability heatmap\r\n\t\tCONST.HUMAN_PLAYER = 0;\r\n\t\tCONST.COMPUTER_PLAYER = 1;\r\n\t\tCONST.VIRTUAL_PLAYER = 2;\r\n\r\n\t\tCONST.CSS_TYPE_EMPTY = 'empty';\r\n\t\tCONST.CSS_TYPE_SHIP = 'ship';\r\n\t\tCONST.CSS_TYPE_MISS = 'miss';\r\n\t\tCONST.CSS_TYPE_HIT = 'hit';\r\n\t\tCONST.CSS_TYPE_SUNK = 'sunk';\r\n\r\n\t\tCONST.TYPE_EMPTY = 0; // 0 = water (empty)\r\n\t\tCONST.TYPE_SHIP = 1; // 1 = undamaged ship\r\n\t\tCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\r\n\t\tCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\r\n\t\tCONST.TYPE_SUNK = 4; // 4 = sunk ship\r\n\t\tCONST.TYPE_NOT_ALLOWED = 5; // 5 = neighbour of ship\r\n\r\n\t\tGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\r\n\t\tCONST.USED = 1;\r\n\t\tCONST.UNUSED = 0;\r\n\r\n\t\tfunction Game(size) {\r\n\t\t\tGame.size = size;\r\n\t\t\tthis.shotsTaken = 0;\r\n\t\t\tthis.createGrid();\r\n\t\t\tthis.init();\r\n\t\t}\r\n\t\tGame.size = 10; // Default grid size is 10x10\r\n\t\tGame.gameOver = false;\r\n\t\t// Checks if the game is won, and if it is, re-initializes the game\r\n\t\tGame.prototype.checkIfWon = function () {\r\n\t\t\tif (this.computerFleet.allShipsSunk()) {\r\n\t\t\t\talert('Congratulations, you win!');\r\n\t\t\t\tGame.gameOver = true;\r\n\t\t\t\tthis.showRestartSidebar();\r\n\t\t\t} else if (this.humanFleet.allShipsSunk()) {\r\n\t\t\t\talert('Yarr! The computer sank all your ships. Try again.');\r\n\t\t\t\tGame.gameOver = true;\r\n\t\t\t\tthis.showRestartSidebar();\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Shoots at the target player on the grid.\r\n\t\t// Returns {int} Constants.TYPE: What the shot uncovered\r\n\t\tGame.prototype.shoot = function (x, y, targetPlayer) {\r\n\t\t\tlet targetGrid;\r\n\t\t\tlet targetFleet;\r\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\ttargetGrid = this.humanGrid;\r\n\t\t\t\ttargetFleet = this.humanFleet;\r\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\r\n\t\t\t\ttargetGrid = this.computerGrid;\r\n\t\t\t\ttargetFleet = this.computerFleet;\r\n\t\t\t}\r\n\r\n\t\t\tif (targetGrid.isDamagedShip(x, y)) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else if (targetGrid.isMiss(x, y)) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else if (targetGrid.isUndamagedShip(x, y)) {\r\n\t\t\t\t// update the board/grid\r\n\t\t\t\ttargetGrid.updateCell(x, y, 'hit', targetPlayer);\r\n\t\t\t\t// IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\r\n\t\t\t\t// because it overrides the CSS class to 'sunk' if we find that the ship was sunk\r\n\t\t\t\ttargetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\r\n\t\t\t\tthis.checkIfWon();\r\n\t\t\t\treturn CONST.TYPE_HIT;\r\n\t\t\t} else {\r\n\t\t\t\ttargetGrid.updateCell(x, y, 'miss', targetPlayer);\r\n\t\t\t\tthis.checkIfWon();\r\n\t\t\t\treturn CONST.TYPE_MISS;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates click event listeners on each one of the 100 grid cells\r\n\t\tGame.prototype.shootListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\t// Extract coordinates from event listener\r\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\t\t\tvar result = null;\r\n\t\t\tif (self.readyToPlay) {\r\n\t\t\t\tresult = self.shoot(x, y, CONST.COMPUTER_PLAYER);\r\n\r\n\t\t\t\t// Remove the tutorial arrow\r\n\t\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (result !== null && !Game.gameOver) {\r\n\t\t\t\t// The AI shoots iff the player clicks on a cell that he/she hasn't\r\n\t\t\t\t// already clicked on yet\r\n\t\t\t\tself.robot.shoot();\r\n\t\t\t} else {\r\n\t\t\t\tGame.gameOver = false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates click event listeners on each of the ship names in the roster\r\n\t\tGame.prototype.rosterListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\t// Remove all classes of 'placing' from the fleet roster first\r\n\t\t\tvar roster = document.querySelectorAll('.fleet-roster li');\r\n\t\t\tfor (var i = 0; i < roster.length; i++) {\r\n\t\t\t\tvar classes = roster[i].getAttribute('class') || '';\r\n\t\t\t\tclasses = classes.replace('placing', '');\r\n\t\t\t\troster[i].setAttribute('class', classes);\r\n\t\t\t}\r\n\r\n\t\t\t// Move the highlight to the next step\r\n\t\t\tif (gameTutorial.currentStep === 1) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t}\r\n\r\n\t\t\t// Set the class of the target ship to 'placing'\r\n\t\t\tGame.placeShipType = e.target.getAttribute('id');\r\n\t\t\tdocument.getElementById(Game.placeShipType).setAttribute('class', 'placing');\r\n\t\t\tGame.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\r\n\t\t\tself.placingOnGrid = true;\r\n\t\t};\r\n\t\t// Creates click event listeners on the human player's grid to handle\r\n\t\t// ship placement after the user has selected a ship name\r\n\t\tGame.prototype.placementListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\t// Extract coordinates from event listener\r\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\r\n\t\t\t\t// Don't screw up the direction if the user tries to place again.\r\n\t\t\t\tvar successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\r\n\t\t\t\tif (successful) {\r\n\t\t\t\t\t// Done placing this ship\r\n\t\t\t\t\tself.endPlacing(Game.placeShipType);\r\n\r\n\t\t\t\t\t// Remove the helper arrow\r\n\t\t\t\t\tif (gameTutorial.currentStep === 2) {\r\n\t\t\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tself.placingOnGrid = false;\r\n\t\t\t\t\tif (self.areAllShipsPlaced()) {\r\n\t\t\t\t\t\tvar el = document.getElementById('rotate-button');\r\n\t\t\t\t\t\tel.addEventListener(transitionEndEventName(), (function () {\r\n\t\t\t\t\t\t\tel.setAttribute('class', 'hidden');\r\n\t\t\t\t\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').setAttribute('class', 'highlight');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').removeAttribute('class');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}), false);\r\n\t\t\t\t\t\tel.setAttribute('class', 'invisible');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates mouseover event listeners that handles mouseover on the\r\n\t\t// human player's grid to draw a phantom ship implying that the user\r\n\t\t// is allowed to place a ship there\r\n\t\tGame.prototype.placementMouseover = function (e) {\r\n\t\t\t// conlose.log(\"placementMouseover\");\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\t\t\t\tvar classes;\r\n\t\t\t\tvar fleetRoster = self.humanFleet.fleetRoster;\r\n\r\n\t\t\t\tfor (var i = 0; i < fleetRoster.length; i++) {\r\n\t\t\t\t\tvar shipType = fleetRoster[i].type;\r\n\r\n\t\t\t\t\tif (Game.placeShipType === shipType &&\r\n\t\t\t\t\t\tfleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\r\n\t\t\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\r\n\t\t\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\r\n\t\t\t\t\t\t\tclasses = el.getAttribute('class');\r\n\t\t\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\r\n\t\t\t\t\t\t\tif (classes.indexOf(' grid-ship') < 0) {\r\n\t\t\t\t\t\t\t\tclasses += ' grid-ship';\r\n\t\t\t\t\t\t\t\tel.setAttribute('class', classes);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates mouseout event listeners that un-draws the phantom ship\r\n\t\t// on the human player's grid as the user hovers over a different cell\r\n\t\tGame.prototype.placementMouseout = function (e) {\r\n\t\t\t// console.log(\"on placementMouseout\");\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\r\n\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\r\n\t\t\t\t\tvar classes = el.getAttribute('class');\r\n\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\r\n\t\t\t\t\tif (classes.indexOf(' grid-ship') > -1) {\r\n\t\t\t\t\t\tclasses = classes.replace(' grid-ship', '');\r\n\t\t\t\t\t\tel.setAttribute('class', classes);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Click handler for the Rotate Ship button\r\n\t\tGame.prototype.toggleRotation = function (e) {\r\n\t\t\t// Toggle rotation direction\r\n\t\t\tvar direction = parseInt(e.target.getAttribute('data-direction'), 10);\r\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\te.target.setAttribute('data-direction', '1');\r\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\r\n\t\t\t} else if (direction === Ship.DIRECTION_HORIZONTAL) {\r\n\t\t\t\te.target.setAttribute('data-direction', '0');\r\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_VERTICAL;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Click handler for the Start Game button\r\n\t\tGame.prototype.startGame = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tvar el = document.getElementById('roster-sidebar');\r\n\t\t\tvar fn = function () { el.setAttribute('class', 'hidden'); };\r\n\t\t\tel.addEventListener(transitionEndEventName(), fn, false);\r\n\t\t\tel.setAttribute('class', 'invisible');\r\n\t\t\tself.readyToPlay = true;\r\n\r\n\t\t\t// Advanced the tutorial step\r\n\t\t\tif (gameTutorial.currentStep === 3) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t}\r\n\t\t\tel.removeEventListener(transitionEndEventName(), fn, false);\r\n\t\t};\r\n\t\t// Click handler for Restart Game button\r\n\t\tGame.prototype.restartGame = function (e) {\r\n\t\t\twindow.location.reload();\r\n\t\t};\r\n\t\t// // Debugging function used to place all ships and just start\r\n\t\t// Game.prototype.placeRandomly = function (e) {\r\n\t\t// \te.target.removeEventListener(e.type, arguments.callee);\r\n\t\t// \te.target.self.humanFleet.placeShipsRandomly();\r\n\t\t// \te.target.self.readyToPlay = true;\r\n\t\t// \tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\r\n\t\t// \tthis.setAttribute('class', 'hidden');\r\n\t\t// };\r\n\t\t// Ends placing the current ship\r\n\t\tGame.prototype.endPlacing = function (shipType) {\r\n\t\t\tdocument.getElementById(shipType).setAttribute('class', 'placed');\r\n\r\n\t\t\t// Mark the ship as 'used'\r\n\t\t\tGame.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED;\r\n\r\n\t\t\t// Wipe out the variable when you're done with it\r\n\t\t\tGame.placeShipDirection = null;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\t\t};\r\n\t\t// Checks whether or not all ships are done placing\r\n\t\t// Returns boolean\r\n\t\tGame.prototype.areAllShipsPlaced = function () {\r\n\t\t\tvar playerRoster = document.querySelectorAll('.fleet-roster li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tif (playerRoster[i].getAttribute('class') === 'placed') {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Reset temporary variables\r\n\t\t\tGame.placeShipDirection = 0;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t// Resets the fog of war\r\n\t\tGame.prototype.resetFogOfWar = function () {\r\n\t\t\tfor (var i = 0; i < Game.size; i++) {\r\n\t\t\t\tfor (var j = 0; j < Game.size; j++) {\r\n\t\t\t\t\tthis.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\r\n\t\t\t\t\tthis.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Reset all values to indicate the ships are ready to be placed again\r\n\t\t\tGame.usedShips = Game.usedShips.map(function () { return CONST.UNUSED; });\r\n\t\t};\r\n\t\t// Resets CSS styling of the sidebar\r\n\t\tGame.prototype.resetRosterSidebar = function () {\r\n\t\t\tvar els = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < els.length; i++) {\r\n\t\t\t\tels[i].removeAttribute('class');\r\n\t\t\t}\r\n\r\n\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t} else {\r\n\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\r\n\t\t\t}\r\n\t\t\tdocument.getElementById('rotate-button').removeAttribute('class');\r\n\t\t\tdocument.getElementById('start-game').setAttribute('class', 'hidden');\r\n\t\t};\r\n\t\tGame.prototype.showRestartSidebar = function () {\r\n\t\t\tvar sidebar = document.getElementById('restart-sidebar');\r\n\t\t\tsidebar.setAttribute('class', 'highlight');\r\n\r\n\t\t\t// Deregister listeners\r\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\r\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\r\n\t\t\t\tcomputerCells[j].removeEventListener('click', this.shootListener, false);\r\n\t\t\t}\r\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tplayerRoster[i].removeEventListener('click', this.rosterListener, false);\r\n\t\t\t}\r\n\r\n\t\t\tvar restartButton = document.getElementById('restart-game');\r\n\t\t\trestartButton.addEventListener('click', this.restartGame, false);\r\n\t\t\trestartButton.self = this;\r\n\t\t};\r\n\t\t// Generates the HTML divs for the grid for both players\r\n\t\tGame.prototype.createGrid = function () {\r\n\t\t\tvar gridDiv = document.querySelectorAll('.grid');\r\n\t\t\tfor (var grid = 0; grid < gridDiv.length; grid++) {\r\n\t\t\t\tgridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\r\n\t\t\t\tfor (var i = 0; i < Game.size; i++) {\r\n\t\t\t\t\tfor (var j = 0; j < Game.size; j++) {\r\n\t\t\t\t\t\tvar el = document.createElement('div');\r\n\t\t\t\t\t\tel.setAttribute('data-x', i);\r\n\t\t\t\t\t\tel.setAttribute('data-y', j);\r\n\t\t\t\t\t\tel.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\r\n\t\t\t\t\t\tgridDiv[grid].appendChild(el);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Initializes the Game\r\n\t\tGame.prototype.init = function () {\r\n\t\t\tthis.humanGrid = new Grid(Game.size);\r\n\t\t\tthis.computerGrid = new Grid(Game.size);\r\n\t\t\tthis.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\r\n\t\t\tthis.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\r\n\r\n\t\t\tthis.robot = new AI(this);\r\n\r\n\t\t\t// Reset game variables\r\n\t\t\tthis.shotsTaken = 0;\r\n\t\t\tthis.readyToPlay = false;\r\n\t\t\tthis.placingOnGrid = false;\r\n\t\t\tGame.placeShipDirection = 0;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\r\n\t\t\tthis.resetRosterSidebar();\r\n\r\n\t\t\t// Add a click listener for the Grid.shoot() method for all cells\r\n\t\t\t// Only add this listener to the computer's grid\r\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\r\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\r\n\t\t\t\tcomputerCells[j].self = this;\r\n\t\t\t\tcomputerCells[j].addEventListener('click', this.shootListener, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add a click listener to the roster\t\r\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tplayerRoster[i].self = this;\r\n\t\t\t\tplayerRoster[i].addEventListener('click', this.rosterListener, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add a click listener to the human player's grid while placing\r\n\t\t\tvar humanCells = document.querySelector('.human-player').childNodes;\r\n\t\t\tfor (var k = 0; k < humanCells.length; k++) {\r\n\t\t\t\thumanCells[k].self = this;\r\n\t\t\t\thumanCells[k].addEventListener('click', this.placementListener, false);\r\n\t\t\t\thumanCells[k].addEventListener('mouseover', this.placementMouseover, false);\r\n\t\t\t\thumanCells[k].addEventListener('mouseout', this.placementMouseout, false);\r\n\t\t\t}\r\n\r\n\t\t\tvar rotateButton = document.getElementById('rotate-button');\r\n\t\t\trotateButton.addEventListener('click', this.toggleRotation, false);\r\n\t\t\tvar startButton = document.getElementById('start-game');\r\n\t\t\tstartButton.self = this;\r\n\t\t\tstartButton.addEventListener('click', this.startGame, false);\r\n\t\t\t// var resetButton = document.getElementById('reset-stats');\r\n\t\t\t// resetButton.addEventListener('click', Game.stats.resetStats, false);\r\n\t\t\tvar randomButton = document.getElementById('place-randomly');\r\n\t\t\trandomButton.self = this;\r\n\t\t\trandomButton.addEventListener('click', this.placeRandomly, false);\r\n\t\t\t// this.computerFleet.placeShipsRandomly();\r\n\t\t\tthis.computerFleet.placeShipsRandomlyComp();\r\n\t\t};\r\n\r\n\t\t// Grid object\r\n\t\t// Constructor\r\n\t\tfunction Grid(size) {\r\n\t\t\tthis.size = size;\r\n\t\t\tthis.cells = [];\r\n\t\t\tthis.init();\r\n\t\t}\r\n\r\n\t\t// Initialize and populate the grid\r\n\t\tGrid.prototype.init = function () {\r\n\t\t\tfor (var x = 0; x < this.size; x++) {\r\n\t\t\t\tvar row = [];\r\n\t\t\t\tthis.cells[x] = row;\r\n\t\t\t\tfor (var y = 0; y < this.size; y++) {\r\n\t\t\t\t\trow.push(CONST.TYPE_EMPTY);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Updates the cell's CSS class based on the type passed in\r\n\t\tGrid.prototype.updateCell = function (x, y, type, targetPlayer) {\r\n\t\t\tvar player;\r\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\tplayer = 'human-player';\r\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\r\n\t\t\t\tplayer = 'computer-player';\r\n\t\t\t}\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase CONST.CSS_TYPE_EMPTY:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_SHIP:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SHIP;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_MISS:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_MISS;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_HIT:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_HIT;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_SUNK:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SUNK;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\r\n\t\t\tdocument.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\r\n\t\t};\r\n\t\t// Checks to see if a cell contains an undamaged ship\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isUndamagedShip = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_SHIP;\r\n\t\t};\r\n\t\t// Checks to see if the shot was missed. This is equivalent\r\n\t\t// to checking if a cell contains a cannonball\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isMiss = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_MISS;\r\n\t\t};\r\n\t\t// Checks to see if a cell contains a damaged ship,\r\n\t\t// either hit or sunk.\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isDamagedShip = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\r\n\t\t};\r\n\r\n\t\t// Fleet object\r\n\t\t// This object is used to keep track of a player's portfolio of ships\r\n\t\t// Constructor\r\n\t\tfunction Fleet(playerGrid, player) {\r\n\t\t\tthis.numShips = CONST.AVAILABLE_SHIPS.length;\r\n\t\t\tthis.playerGrid = playerGrid;\r\n\t\t\tthis.player = player;\r\n\t\t\tthis.fleetRoster = [];\r\n\t\t\tthis.populate();\r\n\t\t}\r\n\t\t// Populates a fleet\r\n\t\tFleet.prototype.populate = function () {\r\n\t\t\tfor (var i = 0; i < this.numShips; i++) {\r\n\t\t\t\t// loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\r\n\t\t\t\tvar j = i % CONST.AVAILABLE_SHIPS.length;\r\n\t\t\t\tthis.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Places the ship and returns whether or not the placement was successful\r\n\t\t// Returns boolean\r\n\t\tFleet.prototype.placeShip = function (x, y, direction, shipType) {\r\n\t\t\tvar shipCoords;\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar shipTypes = this.fleetRoster[i].type;\r\n\r\n\t\t\t\tif (shipType === shipTypes &&\r\n\t\t\t\t\tthis.fleetRoster[i].isLegal(x, y, direction)) {\r\n\t\t\t\t\tthis.fleetRoster[i].create(x, y, direction, false);\r\n\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\r\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\r\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t// Places ships randomly on the board\r\n\t\t// TODO: Avoid placing ships too close to each other\r\n\t\tFleet.prototype.placeShipsRandomly = function () {\r\n\t\t\tvar shipCoords;\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar illegalPlacement = true;\r\n\r\n\t\t\t\t// Prevents the random placement of already placed ships\r\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\twhile (illegalPlacement) {\r\n\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\r\n\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\r\n\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\r\n\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\t\t\t\t\t\tillegalPlacement = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\r\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\r\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\r\n\t\t\t\t\t\tGame.usedShips[i] = CONST.USED;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tFleet.prototype.placeShipsRandomlyComp = function () {\r\n\t\t\tswitch (Math.floor(3 * Math.random())) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tconsole.log(\"case 0\");\r\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\r\n\t\t\t\t\tvar availableShipsCount = 10;\r\n\t\t\t\t\tvar shipIndex;\r\n\t\t\t\t\tvar ySub;\r\n\r\n\t\t\t\t\twhile (availableShipsCount > 0) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex after cond\");\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \"dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tySub = this.fleetRoster[shipIndex].getAllShipCells().length;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log(ySub + \"sub\");\r\n\t\t\t\t\t\t// console.log(this.fleetRoster[shipIndex]);\r\n\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\tfor (var y = 0; y < 5; y++) {\r\n\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\tif (y + ySub < 5) {\r\n\t\t\t\t\t\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y - ySub), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tconsole.log(\"case 1\");\r\n\t\t\t\t\t// in the hole grid\r\n\t\t\t\t\tvar shipCoords;\r\n\t\t\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\t\t\tvar illegalPlacement = true;\r\n\t\t\t\t\t\twhile (illegalPlacement) {\r\n\t\t\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\r\n\t\t\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\r\n\t\t\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\r\n\t\t\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\t\t\t\t\t\t\t\tillegalPlacement = false;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tconsole.log(\"case 2\");\r\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\r\n\t\t\t\t\tvar availableShipsCount = 10;\r\n\t\t\t\t\tvar shipIndex;\r\n\t\t\t\t\tvar ySub;\r\n\r\n\t\t\t\t\twhile (availableShipsCount > 4) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \" dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var x = 0; x < 10; x += 9) {\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var y = 0; y < 10; y++) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, y, randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var y = 0; y < 10; y += 9) {\r\n\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar m = 0;\r\n\t\t\t\t\twhile (availableShipsCount > 0) {\r\n\t\t\t\t\t\t// console.log(\"in last while\");\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar x = Math.floor(8 * Math.random() + 1);\r\n\t\t\t\t\t\tvar y = Math.floor(8 * Math.random() + 1);\r\n\t\t\t\t\t\trandomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\tif (this.fleetRoster[m].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\tthis.fleetRoster[m].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\tunusedShips[m] = 'used';\r\n\t\t\t\t\t\t\t// console.log(availableShipsCount + \"ship count\")\r\n\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\tm++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// console.log(unusedShips);\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Finds a ship by location\r\n\t\t// Returns the ship object located at (x, y)\r\n\t\t// If no ship exists at (x, y), this returns null instead\r\n\t\tFleet.prototype.findShipByCoords = function (x, y) {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar currentShip = this.fleetRoster[i];\r\n\t\t\t\tif (currentShip.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tif (y === currentShip.yPosition &&\r\n\t\t\t\t\t\tx >= currentShip.xPosition &&\r\n\t\t\t\t\t\tx < currentShip.xPosition + currentShip.shipLength) {\r\n\t\t\t\t\t\treturn currentShip;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (x === currentShip.xPosition &&\r\n\t\t\t\t\t\ty >= currentShip.yPosition &&\r\n\t\t\t\t\t\ty < currentShip.yPosition + currentShip.shipLength) {\r\n\t\t\t\t\t\treturn currentShip;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\t// Finds a ship by its type\r\n\t\t// Param shipType is a string\r\n\t\t// Returns the ship object that is of type shipType\r\n\t\t// If no ship exists, this returns null.\r\n\t\tFleet.prototype.findShipByType = function (shipType) {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tif (this.fleetRoster[i].type === shipType) {\r\n\t\t\t\t\treturn this.fleetRoster[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\t// Checks to see if all ships have been sunk\r\n\t\t// Returns boolean\r\n\t\tFleet.prototype.allShipsSunk = function () {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\t// If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\r\n\t\t\t\tif (this.fleetRoster[i].sunk === false) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// Ship object\r\n\t\t// Constructor\r\n\t\tfunction Ship(type, playerGrid, player) {\r\n\t\t\tthis.damage = 0;\r\n\t\t\tthis.type = type;\r\n\t\t\tthis.playerGrid = playerGrid;\r\n\t\t\tthis.player = player;\r\n\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[0]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[1]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[2]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[3]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[4]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[5]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[6]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[7]:\r\n\t\t\t\t\tthis.shipLength = 3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[8]:\r\n\t\t\t\t\tthis.shipLength = 3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[9]:\r\n\t\t\t\t\tthis.shipLength = 4;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.maxDamage = this.shipLength;\r\n\t\t\tthis.sunk = false;\r\n\t\t}\r\n\t\t// Checks to see if the placement of a ship is legal\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.isLegal = function (x, y, direction) {\r\n\t\t\t// first, check if the ship is within the grid...\r\n\t\t\tif (this.withinBounds(x, y, direction)) {\r\n\t\t\t\t// ...then check to make sure it doesn't collide with another ship\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\t\tif (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_MISS ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_MISS ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Checks to see if the ship is within bounds of the grid\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.withinBounds = function (x, y, direction) {\r\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\treturn x + this.shipLength <= Game.size;\r\n\t\t\t} else {\r\n\t\t\t\treturn y + this.shipLength <= Game.size;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Increments the damage counter of a ship\r\n\t\t// Returns Ship\r\n\t\tShip.prototype.incrementDamage = function () {\r\n\t\t\tthis.damage++;\r\n\t\t\tif (this.isSunk()) {\r\n\t\t\t\tthis.sinkShip(false); // Sinks the ship\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Checks to see if the ship is sunk\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.isSunk = function () {\r\n\t\t\treturn this.damage >= this.maxDamage;\r\n\t\t};\r\n\t\t// Sinks the ship\r\n\t\tShip.prototype.sinkShip = function (virtual) {\r\n\t\t\tthis.damage = this.maxDamage; // Force the damage to exceed max damage\r\n\t\t\tthis.sunk = true;\r\n\r\n\t\t\t// Make the CSS class sunk, but only if the ship is not virtual\r\n\t\t\tif (!virtual) {\r\n\t\t\t\tvar allCells = this.getAllShipCells();\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tthis.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * Gets all the ship cells\r\n\t\t *\r\n\t\t * Returns an array with all (x, y) coordinates of the ship:\r\n\t\t * e.g.\r\n\t\t * [\r\n\t\t *\t{'x':2, 'y':2},\r\n\t\t *\t{'x':3, 'y':2},\r\n\t\t *\t{'x':4, 'y':2}\r\n\t\t * ]\r\n\t\t */\r\n\t\tShip.prototype.getAllShipCells = function () {\r\n\t\t\tvar resultObject = [];\r\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition + i, 'y': this.yPosition };\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition, 'y': this.yPosition + i };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn resultObject;\r\n\t\t};\r\n\t\t// Initializes a ship with the given coordinates and direction (bearing).\r\n\t\t// If the ship is declared \"virtual\", then the ship gets initialized with\r\n\t\t// its coordinates but DOESN'T get placed on the grid.\r\n\t\tShip.prototype.create = function (x, y, direction, virtual) {\r\n\t\t\t// This function assumes that you've already checked that the placement is legal\r\n\t\t\tthis.xPosition = x;\r\n\t\t\tthis.yPosition = y;\r\n\t\t\tthis.direction = direction;\r\n\r\n\t\t\t// If the ship is virtual, don't add it to the grid.\r\n\t\t\tif (!virtual) {\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\r\n\r\n\t\t\t\t\t\tif (this.checkPosition(x + i, y + 1)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPosition(x + i, y - 1)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\r\n\r\n\t\t\t\t\t\tif (this.checkPosition(x + 1, y + i)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPosition(x - 1, y + i)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y + 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y + 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (this.checkPosition(x + 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + 1, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tShip.prototype.checkPosition = function (x, y) {\r\n\t\t\tlet triger = false;\r\n\t\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\r\n\t\t\t\ttriger = true;\r\n\t\t\t}\r\n\t\t\treturn triger\r\n\t\t};\r\n\t\t// direction === 0 when the ship is facing north/south\r\n\t\t// direction === 1 when the ship is facing east/west\r\n\t\tShip.DIRECTION_VERTICAL = 0;\r\n\t\tShip.DIRECTION_HORIZONTAL = 1;\r\n\r\n\t\t// Tutorial Object\r\n\t\t// Constructor\r\n\t\tfunction Tutorial() {\r\n\t\t\tthis.currentStep = 0;\r\n\t\t\t// Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\r\n\t\t\tthis.showTutorial = localStorage.getItem('showTutorial') !== 'false';\r\n\t\t}\r\n\t\t// Advances the tutorial to the next step\r\n\t\tTutorial.prototype.nextStep = function () {\r\n\t\t\tvar humanGrid = document.querySelector('.human-player');\r\n\t\t\tvar computerGrid = document.querySelector('.computer-player');\r\n\t\t\tswitch (this.currentStep) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'highlight');\r\n\t\t\t\t\t//document.getElementById('step1').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\r\n\t\t\t\t\t// document.getElementById('step1').removeAttribute('class');\r\n\t\t\t\t\thumanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\r\n\t\t\t\t\t// document.getElementById('step2').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t// document.getElementById('step2').removeAttribute('class');\r\n\t\t\t\t\tvar humanClasses = humanGrid.getAttribute('class');\r\n\t\t\t\t\thumanClasses = humanClasses.replace(' highlight', '');\r\n\t\t\t\t\thumanGrid.setAttribute('class', humanClasses);\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\r\n\t\t\t\t\t// document.getElementById('step3').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tvar computerClasses = computerGrid.getAttribute('class');\r\n\t\t\t\t\t// document.getElementById('step3').removeAttribute('class');\r\n\t\t\t\t\tcomputerClasses = computerClasses.replace(' highlight', '');\r\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerClasses);\r\n\t\t\t\t\t// document.getElementById('step4').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\t//document.getElementById('step4').removeAttribute('class');\r\n\t\t\t\t\tthis.currentStep = 6;\r\n\t\t\t\t\tthis.showTutorial = false;\r\n\t\t\t\t\tlocalStorage.setItem('showTutorial', false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// AI Object\r\n\t\t// Optimal battleship-playing AI\r\n\t\t// Constructor\r\n\t\tfunction AI(gameObject) {\r\n\t\t\tthis.gameObject = gameObject;\r\n\t\t\tthis.virtualGrid = new Grid(Game.size);\r\n\t\t\tthis.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\r\n\r\n\t\t\tthis.probGrid = []; // Probability Grid\r\n\t\t\tthis.initProbs();\r\n\t\t\tthis.updateProbs();\r\n\t\t}\r\n\r\n\t\tAI.PROB_WEIGHT = 5000; // arbitrarily big number\r\n\t\t// how much weight to give to the opening book's high probability cells\r\n\t\tAI.OPEN_HIGH_MIN = 20;\r\n\t\tAI.OPEN_HIGH_MAX = 30;\r\n\t\t// how much weight to give to the opening book's medium probability cells\r\n\t\tAI.OPEN_MED_MIN = 15;\r\n\t\tAI.OPEN_MED_MAX = 25;\r\n\t\t// how much weight to give to the opening book's low probability cells\r\n\t\tAI.OPEN_LOW_MIN = 10;\r\n\t\tAI.OPEN_LOW_MAX = 20;\r\n\t\t// Amount of randomness when selecting between cells of equal probability\r\n\t\tAI.RANDOMNESS = 0.1;\r\n\t\t// AI's opening book.\r\n\t\t// This is the pattern of the first cells for the AI to target\r\n\t\tAI.OPENINGS = [\r\n\t\t\t{ 'x': 7, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 6, 'y': 2, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 3, 'y': 7, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 2, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 6, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 3, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 5, 'y': 5, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 4, 'y': 4, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 0, 'y': 8, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\r\n\t\t\t{ 'x': 1, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 8, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\r\n\t\t\t{ 'x': 9, 'y': 1, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 9, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 0, 'y': 0, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) }\r\n\t\t];\r\n\t\t// Scouts the grid based on max probability, and shoots at the cell\r\n\t\t// that has the highest probability of containing a ship\r\n\t\tAI.prototype.shoot = function () {\r\n\t\t\tvar maxProbability = 0;\r\n\t\t\tvar maxProbCoords;\r\n\t\t\tvar maxProbs = [];\r\n\r\n\t\t\t// Add the AI's opening book to the probability grid\r\n\t\t\tfor (var i = 0; i < AI.OPENINGS.length; i++) {\r\n\t\t\t\tvar cell = AI.OPENINGS[i];\r\n\t\t\t\tif (this.probGrid[cell.x][cell.y] !== 0) {\r\n\t\t\t\t\tthis.probGrid[cell.x][cell.y] += cell.weight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\tif (this.probGrid[x][y] > maxProbability) {\r\n\t\t\t\t\t\tmaxProbability = this.probGrid[x][y];\r\n\t\t\t\t\t\tmaxProbs = [{ 'x': x, 'y': y }]; // Replace the array\r\n\t\t\t\t\t} else if (this.probGrid[x][y] === maxProbability) {\r\n\t\t\t\t\t\tmaxProbs.push({ 'x': x, 'y': y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tmaxProbCoords = Math.random() < AI.RANDOMNESS ?\r\n\t\t\t\tmaxProbs[Math.floor(Math.random() * maxProbs.length)] :\r\n\t\t\t\tmaxProbs[0];\r\n\r\n\t\t\tvar result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER);\r\n\r\n\t\t\t// If the game ends, the next lines need to be skipped.\r\n\t\t\tif (Game.gameOver) {\r\n\t\t\t\tGame.gameOver = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result;\r\n\r\n\t\t\t// If you hit a ship, check to make sure if you've sunk it.\r\n\t\t\tif (result === CONST.TYPE_HIT) {\r\n\t\t\t\tvar humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\r\n\t\t\t\tif (humanShip.isSunk()) {\r\n\t\t\t\t\t// Remove any ships from the roster that have been sunk\r\n\t\t\t\t\tvar shipTypes = [];\r\n\t\t\t\t\tfor (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\r\n\t\t\t\t\t\tshipTypes.push(this.virtualFleet.fleetRoster[k].type);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar index = shipTypes.indexOf(humanShip.type);\r\n\t\t\t\t\tthis.virtualFleet.fleetRoster.splice(index, 1);\r\n\r\n\t\t\t\t\t// Update the virtual grid with the sunk ship's cells\r\n\t\t\t\t\tvar shipCells = humanShip.getAllShipCells();\r\n\t\t\t\t\tfor (var _i = 0; _i < shipCells.length; _i++) {\r\n\t\t\t\t\t\tthis.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Update probability grid after each shot\r\n\t\t\tthis.updateProbs();\r\n\t\t};\r\n\t\t// Update the probability grid\r\n\t\tAI.prototype.updateProbs = function () {\r\n\t\t\tvar roster = this.virtualFleet.fleetRoster;\r\n\t\t\tvar coords;\r\n\t\t\tthis.resetProbs();\r\n\r\n\t\t\t// Probabilities are not normalized to fit in the interval [0, 1]\r\n\t\t\t// because we're only interested in the maximum value.\r\n\r\n\t\t\t// This works by trying to fit each ship in each cell in every orientation\r\n\t\t\t// For every cell, the more legal ways a ship can pass through it, the more\r\n\t\t\t// likely the cell is to contain a ship.\r\n\t\t\t// Cells that surround known 'hits' are given an arbitrarily large probability\r\n\t\t\t// so that the AI tries to completely sink the ship before moving on.\r\n\r\n\t\t\tfor (var k = 0; k < roster.length; k++) {\r\n\t\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\r\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\r\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\r\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < coords.length; i++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfor (var _i = 0; _i < coords.length; _i++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_i].x][coords[_i].y]++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\r\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\r\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\r\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\r\n\t\t\t\t\t\t\t\tfor (var j = 0; j < coords.length; j++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfor (var _j = 0; _j < coords.length; _j++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_j].x][coords[_j].y]++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Set hit cells to probability zero so the AI doesn't\r\n\t\t\t\t\t\t// target cells that are already hit\r\n\t\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\t\t\tthis.probGrid[x][y] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Initializes the probability grid for targeting\r\n\t\tAI.prototype.initProbs = function () {\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tvar row = [];\r\n\t\t\t\tthis.probGrid[x] = row;\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\trow.push(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Resets the probability grid to all 0.\r\n\t\tAI.prototype.resetProbs = function () {\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\tthis.probGrid[x][y] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Finds a human ship by coordinates\r\n\t\t// Returns Ship\r\n\t\tAI.prototype.findHumanShip = function (x, y) {\r\n\t\t\treturn this.gameObject.humanFleet.findShipByCoords(x, y);\r\n\t\t};\r\n\t\t// Checks whether or not a given ship's cells passes through\r\n\t\t// any cell that is hit.\r\n\t\t// Returns boolean\r\n\t\tAI.prototype.passesThroughHitCell = function (shipCells) {\r\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\r\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t// Gives the number of hit cells the ships passes through. The more\r\n\t\t// cells this is, the more probable the ship exists in those coordinates\r\n\t\t// Returns int\r\n\t\tAI.prototype.numHitCellsCovered = function (shipCells) {\r\n\t\t\tvar cells = 0;\r\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\r\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\tcells++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn cells;\r\n\t\t};\r\n\r\n\t\t// Global constant only initialized once\r\n\t\tvar gameTutorial = new Tutorial();\r\n\r\n\t\t// Start the game\r\n\t\tnew Game(10);\r\n\r\n\t\tfunction transitionEndEventName() {\r\n\t\t\tvar i,\r\n\t\t\t\tundefined,\r\n\t\t\t\tel = document.createElement('div'),\r\n\t\t\t\ttransitions = {\r\n\t\t\t\t\t'transition': 'transitionend',\r\n\t\t\t\t\t'OTransition': 'otransitionend',  // oTransitionEnd in very old Opera\r\n\t\t\t\t\t'MozTransition': 'transitionend',\r\n\t\t\t\t\t'WebkitTransition': 'webkitTransitionEnd'\r\n\t\t\t\t};\r\n\r\n\t\t\tfor (i in transitions) {\r\n\t\t\t\tif (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\r\n\t\t\t\t\treturn transitions[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Returns a random number between min (inclusive) and max (exclusive)\r\n\t\tfunction getRandom(min, max) {\r\n\t\t\treturn Math.random() * (max - min) + min;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container text-center\">\r\n\t\t\t\t<h2>Sea Battle with computer</h2>\r\n\t\t\t\t<div className=\"game-container\">\r\n\t\t\t\t\t<div className=\"game-container\">\r\n\t\t\t\t\t\t<div id=\"restart-sidebar\" className=\"hidden\">\r\n\t\t\t\t\t\t\t<h2>Try Again</h2>\r\n\t\t\t\t\t\t\t<button id=\"restart-game\">Restart Game</button>\r\n\t\t\t\t\t\t</div><div id=\"roster-sidebar\">\r\n\t\t\t\t\t\t\t<h2>Place Your Ships</h2>\r\n\t\t\t\t\t\t\t<ul className=\"fleet-roster\" id=\"fleet-roster\">\r\n\t\t\t\t\t\t\t\t<li id=\"1.1\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.2\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.3\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.4\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.1\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.2\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.3\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"3.1\" > </li>\r\n\t\t\t\t\t\t\t\t<li id=\"3.2\" > </li>\r\n\t\t\t\t\t\t\t\t<li id=\"4.1\" >  </li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t<button id=\"rotate-button\" data-direction=\"0\">Rotate Ship</button>\r\n\t\t\t\t\t\t\t<button id=\"start-game\" className=\"hidden\">Start Game</button>\r\n\t\t\t\t\t\t\t<button id=\"place-randomly\" className=\"hidden\">Place Randomly and Start</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex-box-contenier\">\r\n\t\t\t\t\t\t\t<div className=\"grid-container\">\r\n\t\t\t\t\t\t\t\t<h2>Your Fleet</h2>\r\n\t\t\t\t\t\t\t\t<div className=\"grid human-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"grid-container\">\r\n\t\t\t\t\t\t\t\t<h2>Enemy Fleet</h2>\r\n\t\t\t\t\t\t\t\t<div className=\"grid computer-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch1\"></span>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch2\"></span>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch3\"></span>\r\n\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withRouter(BattlesComponent);","C:\\Users\\HP_USER\\Desktop\\diploma\\Diploma\\seebattle\\src\\components\\UserInfoComponent.jsx",[],{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","replacedBy":"128"},{"ruleId":"129","severity":1,"message":"130","line":8,"column":8,"nodeType":"131","messageId":"132","endLine":8,"endColumn":25},{"ruleId":"129","severity":1,"message":"133","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":578,"column":37,"nodeType":"136","messageId":"137","endLine":578,"endColumn":39},{"ruleId":"138","severity":1,"message":"139","line":617,"column":10,"nodeType":"131","messageId":"140","endLine":617,"endColumn":21},{"ruleId":"138","severity":1,"message":"141","line":618,"column":10,"nodeType":"131","messageId":"140","endLine":618,"endColumn":29},{"ruleId":"138","severity":1,"message":"142","line":619,"column":10,"nodeType":"131","messageId":"140","endLine":619,"endColumn":19},{"ruleId":"138","severity":1,"message":"143","line":620,"column":10,"nodeType":"131","messageId":"140","endLine":620,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":627,"column":37,"nodeType":"136","messageId":"137","endLine":627,"endColumn":39},{"ruleId":"138","severity":1,"message":"144","line":632,"column":11,"nodeType":"131","messageId":"140","endLine":632,"endColumn":26},{"ruleId":"138","severity":1,"message":"145","line":640,"column":11,"nodeType":"131","messageId":"140","endLine":640,"endColumn":19},{"ruleId":"138","severity":1,"message":"146","line":641,"column":16,"nodeType":"131","messageId":"140","endLine":641,"endColumn":17},{"ruleId":"138","severity":1,"message":"147","line":643,"column":18,"nodeType":"131","messageId":"140","endLine":643,"endColumn":19},{"ruleId":"138","severity":1,"message":"144","line":667,"column":12,"nodeType":"131","messageId":"140","endLine":667,"endColumn":27},{"ruleId":"129","severity":1,"message":"148","line":671,"column":9,"nodeType":"131","messageId":"132","endLine":671,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":682,"column":10,"nodeType":"131","messageId":"140","endLine":682,"endColumn":21},{"ruleId":"138","severity":1,"message":"141","line":683,"column":10,"nodeType":"131","messageId":"140","endLine":683,"endColumn":29},{"ruleId":"138","severity":1,"message":"142","line":684,"column":10,"nodeType":"131","messageId":"140","endLine":684,"endColumn":19},{"ruleId":"138","severity":1,"message":"143","line":685,"column":10,"nodeType":"131","messageId":"140","endLine":685,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":694,"column":37,"nodeType":"136","messageId":"137","endLine":694,"endColumn":39},{"ruleId":"138","severity":1,"message":"144","line":698,"column":11,"nodeType":"131","messageId":"140","endLine":698,"endColumn":26},{"ruleId":"138","severity":1,"message":"145","line":701,"column":12,"nodeType":"131","messageId":"140","endLine":701,"endColumn":20},{"ruleId":"138","severity":1,"message":"146","line":702,"column":17,"nodeType":"131","messageId":"140","endLine":702,"endColumn":18},{"ruleId":"138","severity":1,"message":"147","line":704,"column":19,"nodeType":"131","messageId":"140","endLine":704,"endColumn":20},{"ruleId":"138","severity":1,"message":"145","line":720,"column":12,"nodeType":"131","messageId":"140","endLine":720,"endColumn":20},{"ruleId":"138","severity":1,"message":"147","line":721,"column":17,"nodeType":"131","messageId":"140","endLine":721,"endColumn":18},{"ruleId":"138","severity":1,"message":"146","line":724,"column":19,"nodeType":"131","messageId":"140","endLine":724,"endColumn":20},{"ruleId":"134","severity":1,"message":"135","line":746,"column":37,"nodeType":"136","messageId":"137","endLine":746,"endColumn":39},{"ruleId":"138","severity":1,"message":"144","line":750,"column":11,"nodeType":"131","messageId":"140","endLine":750,"endColumn":26},{"ruleId":"138","severity":1,"message":"145","line":753,"column":12,"nodeType":"131","messageId":"140","endLine":753,"endColumn":20},{"ruleId":"138","severity":1,"message":"146","line":754,"column":17,"nodeType":"131","messageId":"140","endLine":754,"endColumn":18},{"ruleId":"138","severity":1,"message":"147","line":756,"column":19,"nodeType":"131","messageId":"140","endLine":756,"endColumn":20},{"ruleId":"138","severity":1,"message":"145","line":772,"column":12,"nodeType":"131","messageId":"140","endLine":772,"endColumn":20},{"ruleId":"138","severity":1,"message":"147","line":773,"column":17,"nodeType":"131","messageId":"140","endLine":773,"endColumn":18},{"ruleId":"138","severity":1,"message":"146","line":776,"column":19,"nodeType":"131","messageId":"140","endLine":776,"endColumn":20},{"ruleId":"138","severity":1,"message":"146","line":796,"column":11,"nodeType":"131","messageId":"140","endLine":796,"endColumn":12},{"ruleId":"138","severity":1,"message":"147","line":797,"column":11,"nodeType":"131","messageId":"140","endLine":797,"endColumn":12},{"ruleId":"149","severity":1,"message":"150","line":874,"column":4,"nodeType":"151","messageId":"152","endLine":905,"endColumn":5},{"ruleId":"138","severity":1,"message":"146","line":1309,"column":13,"nodeType":"131","messageId":"140","endLine":1309,"endColumn":14},{"ruleId":"138","severity":1,"message":"147","line":1310,"column":14,"nodeType":"131","messageId":"140","endLine":1310,"endColumn":15},{"ruleId":"129","severity":1,"message":"153","line":5,"column":7,"nodeType":"131","messageId":"132","endLine":5,"endColumn":20},{"ruleId":"129","severity":1,"message":"133","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"134","severity":1,"message":"154","line":54,"column":46,"nodeType":"136","messageId":"137","endLine":54,"endColumn":48},{"ruleId":"155","severity":1,"message":"156","line":55,"column":49,"nodeType":"157","endLine":55,"endColumn":118},{"ruleId":"129","severity":1,"message":"133","line":3,"column":10,"nodeType":"131","messageId":"132","endLine":3,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":566,"column":37,"nodeType":"136","messageId":"137","endLine":566,"endColumn":39},{"ruleId":"138","severity":1,"message":"144","line":610,"column":12,"nodeType":"131","messageId":"140","endLine":610,"endColumn":27},{"ruleId":"129","severity":1,"message":"148","line":614,"column":9,"nodeType":"131","messageId":"132","endLine":614,"endColumn":19},{"ruleId":"138","severity":1,"message":"139","line":625,"column":10,"nodeType":"131","messageId":"140","endLine":625,"endColumn":21},{"ruleId":"138","severity":1,"message":"141","line":626,"column":10,"nodeType":"131","messageId":"140","endLine":626,"endColumn":29},{"ruleId":"138","severity":1,"message":"142","line":627,"column":10,"nodeType":"131","messageId":"140","endLine":627,"endColumn":19},{"ruleId":"138","severity":1,"message":"143","line":628,"column":10,"nodeType":"131","messageId":"140","endLine":628,"endColumn":14},{"ruleId":"134","severity":1,"message":"135","line":635,"column":37,"nodeType":"136","messageId":"137","endLine":635,"endColumn":39},{"ruleId":"138","severity":1,"message":"144","line":639,"column":11,"nodeType":"131","messageId":"140","endLine":639,"endColumn":26},{"ruleId":"138","severity":1,"message":"145","line":642,"column":12,"nodeType":"131","messageId":"140","endLine":642,"endColumn":20},{"ruleId":"138","severity":1,"message":"146","line":643,"column":17,"nodeType":"131","messageId":"140","endLine":643,"endColumn":18},{"ruleId":"138","severity":1,"message":"147","line":645,"column":19,"nodeType":"131","messageId":"140","endLine":645,"endColumn":20},{"ruleId":"138","severity":1,"message":"145","line":661,"column":12,"nodeType":"131","messageId":"140","endLine":661,"endColumn":20},{"ruleId":"138","severity":1,"message":"147","line":662,"column":17,"nodeType":"131","messageId":"140","endLine":662,"endColumn":18},{"ruleId":"138","severity":1,"message":"146","line":665,"column":19,"nodeType":"131","messageId":"140","endLine":665,"endColumn":20},{"ruleId":"138","severity":1,"message":"146","line":685,"column":11,"nodeType":"131","messageId":"140","endLine":685,"endColumn":12},{"ruleId":"138","severity":1,"message":"147","line":686,"column":11,"nodeType":"131","messageId":"140","endLine":686,"endColumn":12},{"ruleId":"149","severity":1,"message":"150","line":763,"column":4,"nodeType":"151","messageId":"152","endLine":794,"endColumn":5},"no-native-reassign",["158"],"no-negated-in-lhs",["159"],"no-unused-vars","'UserInfoComponent' is defined but never used.","Identifier","unusedVar","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'unusedShips' is already defined.","redeclared","'availableShipsCount' is already defined.","'shipIndex' is already defined.","'ySub' is already defined.","'randomDirection' is already defined.","'isPlaced' is already defined.","'x' is already defined.","'y' is already defined.","'shipCoords' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'USER_INFO_URL' is assigned a value but never used.","Expected '!==' and instead saw '!='.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]