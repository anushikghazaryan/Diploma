{"ast":null,"code":"var _jsxFileName = \"/home/anushik/Desktop/dip/seebattle/src/components/GameComponent.jsx\";\nimport React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\"; // import Stylesheet from './Stylesheet';\n\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BattlesComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.mainGame = () => {\n      // Global Constants\n      var CONST = {};\n      CONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1']; // You are player 0 and the computer is player 1\n      // The virtual player is used for generating temporary ships\n      // for calculating the probability heatmap\n\n      CONST.HUMAN_PLAYER = 0;\n      CONST.COMPUTER_PLAYER = 1;\n      CONST.VIRTUAL_PLAYER = 2; // Possible values for the parameter `type` (string)\n\n      CONST.CSS_TYPE_EMPTY = 'empty';\n      CONST.CSS_TYPE_SHIP = 'ship';\n      CONST.CSS_TYPE_MISS = 'miss';\n      CONST.CSS_TYPE_HIT = 'hit';\n      CONST.CSS_TYPE_SUNK = 'sunk'; // Grid code:\n\n      CONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\n      CONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\n      CONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\n      CONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\n      CONST.TYPE_SUNK = 4; // 4 = sunk ship\n\n      CONST.TYPE_NOT_ALLOWED = 5;\n      Game.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n      CONST.USED = 1;\n      CONST.UNUSED = 0; // Constructor\n\n      function Game(size) {\n        Game.size = size;\n        this.shotsTaken = 0;\n        this.createGrid();\n        this.init();\n      }\n\n      Game.size = 10; // Default grid size is 10x10\n\n      Game.gameOver = false; // Checks if the game is won, and if it is, re-initializes the game\n\n      Game.prototype.checkIfWon = function () {\n        if (this.computerFleet.allShipsSunk()) {\n          alert('Congratulations, you win!');\n          Game.gameOver = true; // Game.stats.wonGame();\n          // Game.stats.syncStats();\n          // Game.stats.updateStatsSidebar();\n\n          this.showRestartSidebar();\n        } else if (this.humanFleet.allShipsSunk()) {\n          alert('Yarr! The computer sank all your ships. Try again.');\n          Game.gameOver = true; // Game.stats.lostGame();\n          // Game.stats.syncStats();\n          // Game.stats.updateStatsSidebar();\n\n          this.showRestartSidebar();\n        }\n      }; // Shoots at the target player on the grid.\n      // Returns {int} Constants.TYPE: What the shot uncovered\n\n\n      Game.prototype.shoot = function (x, y, targetPlayer) {\n        let targetGrid;\n        let targetFleet;\n\n        if (targetPlayer === CONST.HUMAN_PLAYER) {\n          targetGrid = this.humanGrid;\n          targetFleet = this.humanFleet;\n        } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n          targetGrid = this.computerGrid;\n          targetFleet = this.computerFleet;\n        } else {\n          // Should never be called\n          console.log(\"There was an error trying to find the correct player to target\");\n        }\n\n        if (targetGrid.isDamagedShip(x, y)) {\n          return null;\n        } else if (targetGrid.isMiss(x, y)) {\n          return null;\n        } else if (targetGrid.isUndamagedShip(x, y)) {\n          // update the board/grid\n          targetGrid.updateCell(x, y, 'hit', targetPlayer); // IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n          // because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\n          targetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\n          this.checkIfWon();\n          return CONST.TYPE_HIT;\n        } else {\n          targetGrid.updateCell(x, y, 'miss', targetPlayer);\n          this.checkIfWon();\n          return CONST.TYPE_MISS;\n        }\n      }; // Creates click event listeners on each one of the 100 grid cells\n\n\n      Game.prototype.shootListener = function (e) {\n        var self = e.target.self; // Extract coordinates from event listener\n\n        var x = parseInt(e.target.getAttribute('data-x'), 10);\n        var y = parseInt(e.target.getAttribute('data-y'), 10);\n        var result = null;\n\n        if (self.readyToPlay) {\n          result = self.shoot(x, y, CONST.COMPUTER_PLAYER); // Remove the tutorial arrow\n\n          if (gameTutorial.showTutorial) {\n            gameTutorial.nextStep();\n          }\n        }\n\n        if (result !== null && !Game.gameOver) {\n          //Game.stats.incrementShots();\n          // if (result === CONST.TYPE_HIT) {\n          // \tGame.stats.hitShot();\n          // }\n          // The AI shoots iff the player clicks on a cell that he/she hasn't\n          // already clicked on yet\n          self.robot.shoot();\n        } else {\n          Game.gameOver = false;\n        }\n      }; // Creates click event listeners on each of the ship names in the roster\n\n\n      Game.prototype.rosterListener = function (e) {\n        var self = e.target.self; // Remove all classes of 'placing' from the fleet roster first\n\n        var roster = document.querySelectorAll('.fleet-roster li');\n\n        for (var i = 0; i < roster.length; i++) {\n          var classes = roster[i].getAttribute('class') || '';\n          classes = classes.replace('placing', '');\n          roster[i].setAttribute('class', classes);\n        } // Move the highlight to the next step\n\n\n        if (gameTutorial.currentStep === 1) {\n          gameTutorial.nextStep();\n        } // Set the class of the target ship to 'placing'\n\n\n        Game.placeShipType = e.target.getAttribute('id');\n        document.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n        Game.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n        self.placingOnGrid = true;\n      }; // Creates click event listeners on the human player's grid to handle\n      // ship placement after the user has selected a ship name\n\n\n      Game.prototype.placementListener = function (e) {\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          // Extract coordinates from event listener\n          var x = parseInt(e.target.getAttribute('data-x'), 10);\n          var y = parseInt(e.target.getAttribute('data-y'), 10); // Don't screw up the direction if the user tries to place again.\n\n          var successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\n          if (successful) {\n            // Done placing this ship\n            self.endPlacing(Game.placeShipType); // Remove the helper arrow\n\n            if (gameTutorial.currentStep === 2) {\n              gameTutorial.nextStep();\n            }\n\n            self.placingOnGrid = false;\n\n            if (self.areAllShipsPlaced()) {\n              var el = document.getElementById('rotate-button');\n              el.addEventListener(transitionEndEventName(), function () {\n                el.setAttribute('class', 'hidden');\n\n                if (gameTutorial.showTutorial) {\n                  document.getElementById('start-game').setAttribute('class', 'highlight');\n                } else {\n                  document.getElementById('start-game').removeAttribute('class');\n                }\n              }, false);\n              el.setAttribute('class', 'invisible');\n            }\n          }\n        }\n      }; // Creates mouseover event listeners that handles mouseover on the\n      // human player's grid to draw a phantom ship implying that the user\n      // is allowed to place a ship there\n\n\n      Game.prototype.placementMouseover = function (e) {\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          var x = parseInt(e.target.getAttribute('data-x'), 10);\n          var y = parseInt(e.target.getAttribute('data-y'), 10);\n          var classes;\n          var fleetRoster = self.humanFleet.fleetRoster;\n\n          for (var i = 0; i < fleetRoster.length; i++) {\n            var shipType = fleetRoster[i].type;\n\n            if (Game.placeShipType === shipType && fleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n              for (var j = 0; j < Game.placeShipCoords.length; j++) {\n                var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n                classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n                if (classes.indexOf(' grid-ship') < 0) {\n                  classes += ' grid-ship';\n                  el.setAttribute('class', classes);\n                }\n              }\n            }\n          }\n        }\n      }; // Creates mouseout event listeners that un-draws the phantom ship\n      // on the human player's grid as the user hovers over a different cell\n\n\n      Game.prototype.placementMouseout = function (e) {\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          for (var j = 0; j < Game.placeShipCoords.length; j++) {\n            var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n            var classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n            if (classes.indexOf(' grid-ship') > -1) {\n              classes = classes.replace(' grid-ship', '');\n              el.setAttribute('class', classes);\n            }\n          }\n        }\n      }; // Click handler for the Rotate Ship button\n\n\n      Game.prototype.toggleRotation = function (e) {\n        // Toggle rotation direction\n        var direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\n        if (direction === Ship.DIRECTION_VERTICAL) {\n          e.target.setAttribute('data-direction', '1');\n          Game.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n        } else if (direction === Ship.DIRECTION_HORIZONTAL) {\n          e.target.setAttribute('data-direction', '0');\n          Game.placeShipDirection = Ship.DIRECTION_VERTICAL;\n        }\n      }; // Click handler for the Start Game button\n\n\n      Game.prototype.startGame = function (e) {\n        var self = e.target.self;\n        var el = document.getElementById('roster-sidebar');\n\n        var fn = function () {\n          el.setAttribute('class', 'hidden');\n        };\n\n        el.addEventListener(transitionEndEventName(), fn, false);\n        el.setAttribute('class', 'invisible');\n        self.readyToPlay = true; // Advanced the tutorial step\n\n        if (gameTutorial.currentStep === 3) {\n          gameTutorial.nextStep();\n        }\n\n        el.removeEventListener(transitionEndEventName(), fn, false);\n      }; // Click handler for Restart Game button\n\n\n      Game.prototype.restartGame = function (e) {\n        e.target.removeEventListener(e.type, arguments.callee);\n        var self = e.target.self;\n        document.getElementById('restart-sidebar').setAttribute('class', 'hidden');\n        self.resetFogOfWar();\n        self.init();\n      }; // Debugging function used to place all ships and just start\n\n\n      Game.prototype.placeRandomly = function (e) {\n        e.target.removeEventListener(e.type, arguments.callee);\n        e.target.self.humanFleet.placeShipsRandomly();\n        e.target.self.readyToPlay = true;\n        document.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n        this.setAttribute('class', 'hidden');\n      }; // Ends placing the current ship\n\n\n      Game.prototype.endPlacing = function (shipType) {\n        document.getElementById(shipType).setAttribute('class', 'placed'); // Mark the ship as 'used'\n\n        Game.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED; // Wipe out the variable when you're done with it\n\n        Game.placeShipDirection = null;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n      }; // Checks whether or not all ships are done placing\n      // Returns boolean\n\n\n      Game.prototype.areAllShipsPlaced = function () {\n        var playerRoster = document.querySelectorAll('.fleet-roster li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          if (playerRoster[i].getAttribute('class') === 'placed') {\n            continue;\n          } else {\n            return false;\n          }\n        } // Reset temporary variables\n\n\n        Game.placeShipDirection = 0;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n        return true;\n      }; // Resets the fog of war\n\n\n      Game.prototype.resetFogOfWar = function () {\n        for (var i = 0; i < Game.size; i++) {\n          for (var j = 0; j < Game.size; j++) {\n            this.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n            this.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n          }\n        } // Reset all values to indicate the ships are ready to be placed again\n\n\n        Game.usedShips = Game.usedShips.map(function () {\n          return CONST.UNUSED;\n        });\n      }; // Resets CSS styling of the sidebar\n\n\n      Game.prototype.resetRosterSidebar = function () {\n        console.log(document.getElementById('fleet-roster'));\n        var els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < els.length; i++) {\n          els[i].removeAttribute('class');\n        }\n\n        if (gameTutorial.showTutorial) {\n          gameTutorial.nextStep();\n        } else {\n          document.getElementById('roster-sidebar').removeAttribute('class');\n        }\n\n        document.getElementById('rotate-button').removeAttribute('class');\n        document.getElementById('start-game').setAttribute('class', 'hidden'); // if (DEBUG_MODE) {\n        // \tdocument.getElementById('place-randomly').removeAttribute('class');\n        // }\n      };\n\n      Game.prototype.showRestartSidebar = function () {\n        var sidebar = document.getElementById('restart-sidebar');\n        sidebar.setAttribute('class', 'highlight'); // Deregister listeners\n\n        var computerCells = document.querySelector('.computer-player').childNodes;\n\n        for (var j = 0; j < computerCells.length; j++) {\n          computerCells[j].removeEventListener('click', this.shootListener, false);\n        }\n\n        var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          playerRoster[i].removeEventListener('click', this.rosterListener, false);\n        }\n\n        var restartButton = document.getElementById('restart-game');\n        restartButton.addEventListener('click', this.restartGame, false);\n        restartButton.self = this;\n      }; // Generates the HTML divs for the grid for both players\n\n\n      Game.prototype.createGrid = function () {\n        var gridDiv = document.querySelectorAll('.grid');\n\n        for (var grid = 0; grid < gridDiv.length; grid++) {\n          gridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\n          for (var i = 0; i < Game.size; i++) {\n            for (var j = 0; j < Game.size; j++) {\n              var el = document.createElement('div');\n              el.setAttribute('data-x', i);\n              el.setAttribute('data-y', j);\n              el.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n              gridDiv[grid].appendChild(el);\n            }\n          }\n        }\n      }; // Initializes the Game. Also resets the game if previously initialized\n\n\n      Game.prototype.init = function () {\n        this.humanGrid = new Grid(Game.size);\n        this.computerGrid = new Grid(Game.size);\n        this.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n        this.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n        this.robot = new AI(this); //Game.stats = new Stats();\n        //Game.stats.updateStatsSidebar();\n        // Reset game variables\n\n        this.shotsTaken = 0;\n        this.readyToPlay = false;\n        this.placingOnGrid = false;\n        Game.placeShipDirection = 0;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n        this.resetRosterSidebar(); // Add a click listener for the Grid.shoot() method for all cells\n        // Only add this listener to the computer's grid\n\n        var computerCells = document.querySelector('.computer-player').childNodes;\n\n        for (var j = 0; j < computerCells.length; j++) {\n          computerCells[j].self = this;\n          computerCells[j].addEventListener('click', this.shootListener, false);\n        } // Add a click listener to the roster\t\n\n\n        var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          playerRoster[i].self = this;\n          playerRoster[i].addEventListener('click', this.rosterListener, false);\n        } // Add a click listener to the human player's grid while placing\n\n\n        var humanCells = document.querySelector('.human-player').childNodes;\n\n        for (var k = 0; k < humanCells.length; k++) {\n          humanCells[k].self = this;\n          humanCells[k].addEventListener('click', this.placementListener, false);\n          humanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n          humanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n        }\n\n        var rotateButton = document.getElementById('rotate-button');\n        rotateButton.addEventListener('click', this.toggleRotation, false);\n        var startButton = document.getElementById('start-game');\n        startButton.self = this;\n        startButton.addEventListener('click', this.startGame, false); // var resetButton = document.getElementById('reset-stats');\n        // resetButton.addEventListener('click', Game.stats.resetStats, false);\n\n        var randomButton = document.getElementById('place-randomly');\n        randomButton.self = this;\n        randomButton.addEventListener('click', this.placeRandomly, false);\n        this.computerFleet.placeShipsRandomly();\n      }; // Grid object\n      // Constructor\n\n\n      function Grid(size) {\n        this.size = size;\n        this.cells = [];\n        this.init();\n      } // Initialize and populate the grid\n\n\n      Grid.prototype.init = function () {\n        for (var x = 0; x < this.size; x++) {\n          var row = [];\n          this.cells[x] = row;\n\n          for (var y = 0; y < this.size; y++) {\n            row.push(CONST.TYPE_EMPTY);\n          }\n        }\n      }; // Updates the cell's CSS class based on the type passed in\n\n\n      Grid.prototype.updateCell = function (x, y, type, targetPlayer) {\n        var player;\n\n        if (targetPlayer === CONST.HUMAN_PLAYER) {\n          player = 'human-player';\n        } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n          player = 'computer-player';\n        } else {\n          // Should never be called\n          console.log(\"There was an error trying to find the correct player's grid\");\n        }\n\n        switch (type) {\n          case CONST.CSS_TYPE_EMPTY:\n            this.cells[x][y] = CONST.TYPE_EMPTY;\n            break;\n\n          case CONST.CSS_TYPE_SHIP:\n            this.cells[x][y] = CONST.TYPE_SHIP;\n            break;\n\n          case CONST.CSS_TYPE_MISS:\n            this.cells[x][y] = CONST.TYPE_MISS;\n            break;\n\n          case CONST.CSS_TYPE_HIT:\n            this.cells[x][y] = CONST.TYPE_HIT;\n            break;\n\n          case CONST.CSS_TYPE_SUNK:\n            this.cells[x][y] = CONST.TYPE_SUNK;\n            break;\n\n          default:\n            this.cells[x][y] = CONST.TYPE_EMPTY;\n            break;\n        }\n\n        var classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n        document.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n      }; // Checks to see if a cell contains an undamaged ship\n      // Returns boolean\n\n\n      Grid.prototype.isUndamagedShip = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_SHIP;\n      }; // Checks to see if the shot was missed. This is equivalent\n      // to checking if a cell contains a cannonball\n      // Returns boolean\n\n\n      Grid.prototype.isMiss = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_MISS;\n      }; // Checks to see if a cell contains a damaged ship,\n      // either hit or sunk.\n      // Returns boolean\n\n\n      Grid.prototype.isDamagedShip = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n      }; // Fleet object\n      // This object is used to keep track of a player's portfolio of ships\n      // Constructor\n\n\n      function Fleet(playerGrid, player) {\n        this.numShips = CONST.AVAILABLE_SHIPS.length;\n        this.playerGrid = playerGrid;\n        this.player = player;\n        this.fleetRoster = [];\n        this.populate();\n      } // Populates a fleet\n\n\n      Fleet.prototype.populate = function () {\n        for (var i = 0; i < this.numShips; i++) {\n          // loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n          var j = i % CONST.AVAILABLE_SHIPS.length;\n          this.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n        }\n      }; // Places the ship and returns whether or not the placement was successful\n      // Returns boolean\n\n\n      Fleet.prototype.placeShip = function (x, y, direction, shipType) {\n        var shipCoords;\n\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var shipTypes = this.fleetRoster[i].type;\n\n          if (shipType === shipTypes && this.fleetRoster[i].isLegal(x, y, direction)) {\n            this.fleetRoster[i].create(x, y, direction, false);\n            shipCoords = this.fleetRoster[i].getAllShipCells();\n\n            for (var j = 0; j < shipCoords.length; j++) {\n              this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n            }\n\n            return true;\n          }\n        }\n\n        return false;\n      }; // Places ships randomly on the board\n      // TODO: Avoid placing ships too close to each other\n\n\n      Fleet.prototype.placeShipsRandomly = function () {\n        var shipCoords;\n\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var illegalPlacement = true; // Prevents the random placement of already placed ships\n\n          if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n            continue;\n          }\n\n          while (illegalPlacement) {\n            var randomX = Math.floor(Game.size * Math.random());\n            var randomY = Math.floor(Game.size * Math.random());\n            var randomDirection = Math.floor(2 * Math.random());\n\n            if (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n              this.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n              shipCoords = this.fleetRoster[i].getAllShipCells();\n              illegalPlacement = false;\n            } else {\n              continue;\n            }\n          }\n\n          if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n            for (var j = 0; j < shipCoords.length; j++) {\n              this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n              Game.usedShips[i] = CONST.USED;\n            }\n          }\n        }\n      }; // Finds a ship by location\n      // Returns the ship object located at (x, y)\n      // If no ship exists at (x, y), this returns null instead\n\n\n      Fleet.prototype.findShipByCoords = function (x, y) {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var currentShip = this.fleetRoster[i];\n\n          if (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n            if (y === currentShip.yPosition && x >= currentShip.xPosition && x < currentShip.xPosition + currentShip.shipLength) {\n              return currentShip;\n            } else {\n              continue;\n            }\n          } else {\n            if (x === currentShip.xPosition && y >= currentShip.yPosition && y < currentShip.yPosition + currentShip.shipLength) {\n              return currentShip;\n            } else {\n              continue;\n            }\n          }\n        }\n\n        return null;\n      }; // Finds a ship by its type\n      // Param shipType is a string\n      // Returns the ship object that is of type shipType\n      // If no ship exists, this returns null.\n\n\n      Fleet.prototype.findShipByType = function (shipType) {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          if (this.fleetRoster[i].type === shipType) {\n            return this.fleetRoster[i];\n          }\n        }\n\n        return null;\n      }; // Checks to see if all ships have been sunk\n      // Returns boolean\n\n\n      Fleet.prototype.allShipsSunk = function () {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          // If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n          if (this.fleetRoster[i].sunk === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }; // Ship object\n      // Constructor\n\n\n      function Ship(type, playerGrid, player) {\n        this.damage = 0;\n        this.type = type;\n        this.playerGrid = playerGrid;\n        this.player = player;\n\n        switch (this.type) {\n          case CONST.AVAILABLE_SHIPS[0]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[1]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[2]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[3]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[4]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[5]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[6]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[7]:\n            this.shipLength = 3;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[8]:\n            this.shipLength = 3;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[9]:\n            this.shipLength = 4;\n            break;\n        }\n\n        this.maxDamage = this.shipLength;\n        this.sunk = false;\n      } // Checks to see if the placement of a ship is legal\n      // Returns boolean\n\n\n      Ship.prototype.isLegal = function (x, y, direction) {\n        // first, check if the ship is within the grid...\n        if (this.withinBounds(x, y, direction)) {\n          // ...then check to make sure it doesn't collide with another ship\n          for (var i = 0; i < this.shipLength; i++) {\n            if (direction === Ship.DIRECTION_VERTICAL) {\n              if (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP || this.playerGrid.cells[x + i][y] === CONST.TYPE_MISS || this.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK || this.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n                return false;\n              }\n            } else {\n              if (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP || this.playerGrid.cells[x][y + i] === CONST.TYPE_MISS || this.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK || this.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\n                return false;\n              }\n            }\n          }\n\n          return true;\n        } else {\n          return false;\n        }\n      }; // Checks to see if the ship is within bounds of the grid\n      // Returns boolean\n\n\n      Ship.prototype.withinBounds = function (x, y, direction) {\n        if (direction === Ship.DIRECTION_VERTICAL) {\n          return x + this.shipLength <= Game.size;\n        } else {\n          return y + this.shipLength <= Game.size;\n        }\n      }; // Increments the damage counter of a ship\n      // Returns Ship\n\n\n      Ship.prototype.incrementDamage = function () {\n        this.damage++;\n\n        if (this.isSunk()) {\n          this.sinkShip(false); // Sinks the ship\n        }\n      }; // Checks to see if the ship is sunk\n      // Returns boolean\n\n\n      Ship.prototype.isSunk = function () {\n        return this.damage >= this.maxDamage;\n      }; // Sinks the ship\n\n\n      Ship.prototype.sinkShip = function (virtual) {\n        this.damage = this.maxDamage; // Force the damage to exceed max damage\n\n        this.sunk = true; // Make the CSS class sunk, but only if the ship is not virtual\n\n        if (!virtual) {\n          var allCells = this.getAllShipCells();\n\n          for (var i = 0; i < this.shipLength; i++) {\n            this.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n          }\n        }\n      };\n      /**\n       * Gets all the ship cells\n       *\n       * Returns an array with all (x, y) coordinates of the ship:\n       * e.g.\n       * [\n       *\t{'x':2, 'y':2},\n       *\t{'x':3, 'y':2},\n       *\t{'x':4, 'y':2}\n       * ]\n       */\n\n\n      Ship.prototype.getAllShipCells = function () {\n        var resultObject = [];\n\n        for (var i = 0; i < this.shipLength; i++) {\n          if (this.direction === Ship.DIRECTION_VERTICAL) {\n            resultObject[i] = {\n              'x': this.xPosition + i,\n              'y': this.yPosition\n            };\n          } else {\n            resultObject[i] = {\n              'x': this.xPosition,\n              'y': this.yPosition + i\n            };\n          }\n        }\n\n        return resultObject;\n      }; // Initializes a ship with the given coordinates and direction (bearing).\n      // If the ship is declared \"virtual\", then the ship gets initialized with\n      // its coordinates but DOESN'T get placed on the grid.\n\n\n      Ship.prototype.create = function (x, y, direction, virtual) {\n        // This function assumes that you've already checked that the placement is legal\n        this.xPosition = x;\n        this.yPosition = y;\n        this.direction = direction; // If the ship is virtual, don't add it to the grid.\n\n        if (!virtual) {\n          for (var i = 0; i < this.shipLength; i++) {\n            if (this.direction === Ship.DIRECTION_VERTICAL) {\n              this.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n              if (this.checkPosition(x + i, y + 1)) {\n                this.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n              }\n\n              if (this.checkPosition(x + i, y - 1)) {\n                this.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n              }\n            } else {\n              this.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\n              if (this.checkPosition(x + 1, y + i)) {\n                this.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n              }\n\n              if (this.checkPosition(x - 1, y + i)) {\n                this.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n              }\n            }\n          }\n\n          if (this.direction === Ship.DIRECTION_VERTICAL) {\n            if (this.checkPosition(x - 1, y - 1)) {\n              this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y)) {\n              this.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y + 1)) {\n              this.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y - 1)) {\n              this.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y)) {\n              this.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y + 1)) {\n              this.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n          } else {\n            if (this.checkPosition(x + 1, y - 1)) {\n              this.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y - 1)) {\n              this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x, y - 1)) {\n              this.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + 1, y + this.shipLength)) {\n              this.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y + this.shipLength)) {\n              this.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x, y + this.shipLength)) {\n              this.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n          }\n        }\n      };\n\n      Ship.prototype.checkPosition = function (x, y) {\n        let triger = false;\n\n        if (x < 10 && y < 10 && x >= 0 && y >= 0) {\n          triger = true;\n        }\n\n        return triger;\n      }; // direction === 0 when the ship is facing north/south\n      // direction === 1 when the ship is facing east/west\n\n\n      Ship.DIRECTION_VERTICAL = 0;\n      Ship.DIRECTION_HORIZONTAL = 1; // Tutorial Object\n      // Constructor\n\n      function Tutorial() {\n        this.currentStep = 0; // Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\n        this.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n      } // Advances the tutorial to the next step\n\n\n      Tutorial.prototype.nextStep = function () {\n        var humanGrid = document.querySelector('.human-player');\n        var computerGrid = document.querySelector('.computer-player');\n\n        switch (this.currentStep) {\n          case 0:\n            document.getElementById('roster-sidebar').setAttribute('class', 'highlight');\n            document.getElementById('step1').setAttribute('class', 'current-step');\n            this.currentStep++;\n            break;\n\n          case 1:\n            document.getElementById('roster-sidebar').removeAttribute('class');\n            document.getElementById('step1').removeAttribute('class');\n            humanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\n            document.getElementById('step2').setAttribute('class', 'current-step');\n            this.currentStep++;\n            break;\n\n          case 2:\n            document.getElementById('step2').removeAttribute('class');\n            var humanClasses = humanGrid.getAttribute('class');\n            humanClasses = humanClasses.replace(' highlight', '');\n            humanGrid.setAttribute('class', humanClasses);\n            this.currentStep++;\n            break;\n\n          case 3:\n            computerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\n            document.getElementById('step3').setAttribute('class', 'current-step');\n            this.currentStep++;\n            break;\n\n          case 4:\n            var computerClasses = computerGrid.getAttribute('class');\n            document.getElementById('step3').removeAttribute('class');\n            computerClasses = computerClasses.replace(' highlight', '');\n            computerGrid.setAttribute('class', computerClasses);\n            document.getElementById('step4').setAttribute('class', 'current-step');\n            this.currentStep++;\n            break;\n\n          case 5:\n            document.getElementById('step4').removeAttribute('class');\n            this.currentStep = 6;\n            this.showTutorial = false;\n            localStorage.setItem('showTutorial', false);\n            break;\n\n          default:\n            break;\n        }\n      }; // AI Object\n      // Optimal battleship-playing AI\n      // Constructor\n\n\n      function AI(gameObject) {\n        this.gameObject = gameObject;\n        this.virtualGrid = new Grid(Game.size);\n        this.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n        this.probGrid = []; // Probability Grid\n\n        this.initProbs();\n        this.updateProbs();\n      }\n\n      AI.PROB_WEIGHT = 5000; // arbitrarily big number\n      // how much weight to give to the opening book's high probability cells\n\n      AI.OPEN_HIGH_MIN = 20;\n      AI.OPEN_HIGH_MAX = 30; // how much weight to give to the opening book's medium probability cells\n\n      AI.OPEN_MED_MIN = 15;\n      AI.OPEN_MED_MAX = 25; // how much weight to give to the opening book's low probability cells\n\n      AI.OPEN_LOW_MIN = 10;\n      AI.OPEN_LOW_MAX = 20; // Amount of randomness when selecting between cells of equal probability\n\n      AI.RANDOMNESS = 0.1; // AI's opening book.\n      // This is the pattern of the first cells for the AI to target\n\n      AI.OPENINGS = [{\n        'x': 7,\n        'y': 3,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 6,\n        'y': 2,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 3,\n        'y': 7,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 2,\n        'y': 6,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 6,\n        'y': 6,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 3,\n        'y': 3,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 5,\n        'y': 5,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 4,\n        'y': 4,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, // {'x': 9, 'y': 5, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n      // {'x': 0, 'y': 4, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n      // {'x': 5, 'y': 9, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n      // {'x': 4, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n      {\n        'x': 0,\n        'y': 8,\n        'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n      }, {\n        'x': 1,\n        'y': 9,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 8,\n        'y': 0,\n        'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n      }, {\n        'x': 9,\n        'y': 1,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 9,\n        'y': 9,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 0,\n        'y': 0,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }]; // Scouts the grid based on max probability, and shoots at the cell\n      // that has the highest probability of containing a ship\n\n      AI.prototype.shoot = function () {\n        var maxProbability = 0;\n        var maxProbCoords;\n        var maxProbs = []; // Add the AI's opening book to the probability grid\n\n        for (var i = 0; i < AI.OPENINGS.length; i++) {\n          var cell = AI.OPENINGS[i];\n\n          if (this.probGrid[cell.x][cell.y] !== 0) {\n            this.probGrid[cell.x][cell.y] += cell.weight;\n          }\n        }\n\n        for (var x = 0; x < Game.size; x++) {\n          for (var y = 0; y < Game.size; y++) {\n            if (this.probGrid[x][y] > maxProbability) {\n              maxProbability = this.probGrid[x][y];\n              maxProbs = [{\n                'x': x,\n                'y': y\n              }]; // Replace the array\n            } else if (this.probGrid[x][y] === maxProbability) {\n              maxProbs.push({\n                'x': x,\n                'y': y\n              });\n            }\n          }\n        }\n\n        maxProbCoords = Math.random() < AI.RANDOMNESS ? maxProbs[Math.floor(Math.random() * maxProbs.length)] : maxProbs[0];\n        var result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER); // If the game ends, the next lines need to be skipped.\n\n        if (Game.gameOver) {\n          Game.gameOver = false;\n          return;\n        }\n\n        this.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result; // If you hit a ship, check to make sure if you've sunk it.\n\n        if (result === CONST.TYPE_HIT) {\n          var humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\n          if (humanShip.isSunk()) {\n            // Remove any ships from the roster that have been sunk\n            var shipTypes = [];\n\n            for (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n              shipTypes.push(this.virtualFleet.fleetRoster[k].type);\n            }\n\n            var index = shipTypes.indexOf(humanShip.type);\n            this.virtualFleet.fleetRoster.splice(index, 1); // Update the virtual grid with the sunk ship's cells\n\n            var shipCells = humanShip.getAllShipCells();\n\n            for (var _i = 0; _i < shipCells.length; _i++) {\n              this.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n            }\n          }\n        } // Update probability grid after each shot\n\n\n        this.updateProbs();\n      }; // Update the probability grid\n\n\n      AI.prototype.updateProbs = function () {\n        var roster = this.virtualFleet.fleetRoster;\n        var coords;\n        this.resetProbs(); // Probabilities are not normalized to fit in the interval [0, 1]\n        // because we're only interested in the maximum value.\n        // This works by trying to fit each ship in each cell in every orientation\n        // For every cell, the more legal ways a ship can pass through it, the more\n        // likely the cell is to contain a ship.\n        // Cells that surround known 'hits' are given an arbitrarily large probability\n        // so that the AI tries to completely sink the ship before moving on.\n        // TODO: Think about a more efficient implementation\n\n        for (var k = 0; k < roster.length; k++) {\n          for (var x = 0; x < Game.size; x++) {\n            for (var y = 0; y < Game.size; y++) {\n              if (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n                roster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n                coords = roster[k].getAllShipCells();\n\n                if (this.passesThroughHitCell(coords)) {\n                  for (var i = 0; i < coords.length; i++) {\n                    this.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n                  }\n                } else {\n                  for (var _i = 0; _i < coords.length; _i++) {\n                    this.probGrid[coords[_i].x][coords[_i].y]++;\n                  }\n                }\n              }\n\n              if (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n                roster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n                coords = roster[k].getAllShipCells();\n\n                if (this.passesThroughHitCell(coords)) {\n                  for (var j = 0; j < coords.length; j++) {\n                    this.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n                  }\n                } else {\n                  for (var _j = 0; _j < coords.length; _j++) {\n                    this.probGrid[coords[_j].x][coords[_j].y]++;\n                  }\n                }\n              } // Set hit cells to probability zero so the AI doesn't\n              // target cells that are already hit\n\n\n              if (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n                this.probGrid[x][y] = 0;\n              }\n            }\n          }\n        }\n      }; // Initializes the probability grid for targeting\n\n\n      AI.prototype.initProbs = function () {\n        for (var x = 0; x < Game.size; x++) {\n          var row = [];\n          this.probGrid[x] = row;\n\n          for (var y = 0; y < Game.size; y++) {\n            row.push(0);\n          }\n        }\n      }; // Resets the probability grid to all 0.\n\n\n      AI.prototype.resetProbs = function () {\n        for (var x = 0; x < Game.size; x++) {\n          for (var y = 0; y < Game.size; y++) {\n            this.probGrid[x][y] = 0;\n          }\n        }\n      };\n\n      AI.prototype.metagame = function () {// Inputs:\n        // Proximity of hit cells to edge\n        // Proximity of hit cells to each other\n        // Edit the probability grid by multiplying each cell with a new probability weight (e.g. 0.4, or 3). Set this as a CONST and make 1-CONST the inverse for decreasing, or 2*CONST for increasing\n      }; // Finds a human ship by coordinates\n      // Returns Ship\n\n\n      AI.prototype.findHumanShip = function (x, y) {\n        return this.gameObject.humanFleet.findShipByCoords(x, y);\n      }; // Checks whether or not a given ship's cells passes through\n      // any cell that is hit.\n      // Returns boolean\n\n\n      AI.prototype.passesThroughHitCell = function (shipCells) {\n        for (var i = 0; i < shipCells.length; i++) {\n          if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n            return true;\n          }\n        }\n\n        return false;\n      }; // Gives the number of hit cells the ships passes through. The more\n      // cells this is, the more probable the ship exists in those coordinates\n      // Returns int\n\n\n      AI.prototype.numHitCellsCovered = function (shipCells) {\n        var cells = 0;\n\n        for (var i = 0; i < shipCells.length; i++) {\n          if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n            cells++;\n          }\n        }\n\n        return cells;\n      }; // Global constant only initialized once\n\n\n      var gameTutorial = new Tutorial(); // Start the game\n\n      var mainGame = new Game(10);\n\n      function transitionEndEventName() {\n        var i,\n            undefined,\n            el = document.createElement('div'),\n            transitions = {\n          'transition': 'transitionend',\n          'OTransition': 'otransitionend',\n          // oTransitionEnd in very old Opera\n          'MozTransition': 'transitionend',\n          'WebkitTransition': 'webkitTransitionEnd'\n        };\n\n        for (i in transitions) {\n          if (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n            return transitions[i];\n          }\n        }\n      } // Returns a random number between min (inclusive) and max (exclusive)\n\n\n      function getRandom(min, max) {\n        return Math.random() * (max - min) + min;\n      }\n    };\n\n    this.state = {\n      battles: []\n    };\n  }\n\n  componentDidMount() {\n    Service.getAllBattles().then(res => {\n      this.setState({\n        battles: res.data.content\n      });\n    });\n    console.log(); //this.mainGame()\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Battles List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1151,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"restart-sidebar\",\n            className: \"hidden\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Try Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1155,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"restart-game\",\n              children: \"Restart Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1156,\n              columnNumber: 4\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1154,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"roster-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Place Your Ships\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1158,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"fleet-roster\",\n              id: \"fleet-roster\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.1\",\n                children: \"1 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1160,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.2\",\n                children: \"1 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1161,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.3\",\n                children: \"1 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1162,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.4\",\n                children: \"1 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1163,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.1\",\n                children: \"2 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1164,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.2\",\n                children: \"2 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1165,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.3\",\n                children: \"2 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1166,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"3.1\",\n                children: \"3 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1167,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"3.2\",\n                children: \"3 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1168,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"4.1\",\n                children: \"4 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1169,\n                columnNumber: 5\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1159,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"rotate-button\",\n              \"data-direction\": \"0\",\n              children: \"Rotate Ship\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1171,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"start-game\",\n              className: \"hidden\",\n              children: \"Start Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1172,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"place-randomly\",\n              className: \"hidden\",\n              children: \"Place Randomly and Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1173,\n              columnNumber: 4\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1157,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Your Fleet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1175,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid human-player\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"no-js\",\n                children: \"Please enable JavaScript to play this game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1176,\n                columnNumber: 39\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1176,\n              columnNumber: 4\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1174,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Enemy Fleet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1178,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid computer-player\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"no-js\",\n                children: \"Please enable JavaScript to play this game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1179,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1179,\n              columnNumber: 4\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1177,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1153,\n          columnNumber: 1\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1152,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1184,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1185,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1186,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1150,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(BattlesComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/anushik/Desktop/dip/seebattle/src/components/GameComponent.jsx"],"names":["React","Component","Service","Link","withRouter","BattlesComponent","constructor","props","mainGame","CONST","AVAILABLE_SHIPS","HUMAN_PLAYER","COMPUTER_PLAYER","VIRTUAL_PLAYER","CSS_TYPE_EMPTY","CSS_TYPE_SHIP","CSS_TYPE_MISS","CSS_TYPE_HIT","CSS_TYPE_SUNK","TYPE_EMPTY","TYPE_SHIP","TYPE_MISS","TYPE_HIT","TYPE_SUNK","TYPE_NOT_ALLOWED","Game","usedShips","UNUSED","USED","size","shotsTaken","createGrid","init","gameOver","prototype","checkIfWon","computerFleet","allShipsSunk","alert","showRestartSidebar","humanFleet","shoot","x","y","targetPlayer","targetGrid","targetFleet","humanGrid","computerGrid","console","log","isDamagedShip","isMiss","isUndamagedShip","updateCell","findShipByCoords","incrementDamage","shootListener","e","self","target","parseInt","getAttribute","result","readyToPlay","gameTutorial","showTutorial","nextStep","robot","rosterListener","roster","document","querySelectorAll","i","length","classes","replace","setAttribute","currentStep","placeShipType","getElementById","placeShipDirection","placingOnGrid","placementListener","successful","placeShip","endPlacing","areAllShipsPlaced","el","addEventListener","transitionEndEventName","removeAttribute","placementMouseover","fleetRoster","shipType","type","isLegal","j","placeShipCoords","querySelector","indexOf","placementMouseout","toggleRotation","direction","Ship","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","startGame","fn","removeEventListener","restartGame","arguments","callee","resetFogOfWar","placeRandomly","placeShipsRandomly","playerRoster","map","resetRosterSidebar","els","sidebar","computerCells","childNodes","restartButton","gridDiv","grid","removeChild","createElement","appendChild","Grid","Fleet","AI","humanCells","k","rotateButton","startButton","randomButton","cells","row","push","player","join","playerGrid","numShips","populate","shipCoords","shipTypes","create","getAllShipCells","illegalPlacement","randomX","Math","floor","random","randomY","randomDirection","currentShip","yPosition","xPosition","shipLength","findShipByType","sunk","damage","maxDamage","withinBounds","isSunk","sinkShip","virtual","allCells","resultObject","checkPosition","triger","Tutorial","localStorage","getItem","humanClasses","computerClasses","setItem","gameObject","virtualGrid","virtualFleet","probGrid","initProbs","updateProbs","PROB_WEIGHT","OPEN_HIGH_MIN","OPEN_HIGH_MAX","OPEN_MED_MIN","OPEN_MED_MAX","OPEN_LOW_MIN","OPEN_LOW_MAX","RANDOMNESS","OPENINGS","getRandom","maxProbability","maxProbCoords","maxProbs","cell","weight","humanShip","findHumanShip","index","splice","shipCells","_i","coords","resetProbs","passesThroughHitCell","numHitCellsCovered","_j","metagame","undefined","transitions","hasOwnProperty","style","min","max","state","battles","componentDidMount","getAllBattles","then","res","setState","data","content","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\n// import Stylesheet from './Stylesheet';\nimport './styles.css';\n\n\nclass BattlesComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            battles: []\n        }\n    }\n    componentDidMount(){\n        Service.getAllBattles().then((res) => {\n            this.setState({battles: res.data.content});\n        });\n\t\tconsole.log()\n\t\t//this.mainGame()\n    }\n\n\tmainGame=()=>{\n\t\t// Global Constants\n\t\tvar CONST = {};\n\t\tCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1'];\n\t\t// You are player 0 and the computer is player 1\n\t\t// The virtual player is used for generating temporary ships\n\t\t// for calculating the probability heatmap\n\t\tCONST.HUMAN_PLAYER = 0;\n\t\tCONST.COMPUTER_PLAYER = 1;\n\t\tCONST.VIRTUAL_PLAYER = 2;\n\t\t// Possible values for the parameter `type` (string)\n\t\tCONST.CSS_TYPE_EMPTY = 'empty';\n\t\tCONST.CSS_TYPE_SHIP = 'ship';\n\t\tCONST.CSS_TYPE_MISS = 'miss';\n\t\tCONST.CSS_TYPE_HIT = 'hit';\n\t\tCONST.CSS_TYPE_SUNK = 'sunk';\n\t\t// Grid code:\n\t\tCONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\t\tCONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\t\tCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\t\tCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\t\tCONST.TYPE_SUNK = 4; // 4 = sunk ship\n\t\tCONST.TYPE_NOT_ALLOWED = 5;\n\t\n\t\tGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n\t\tCONST.USED = 1;\n\t\tCONST.UNUSED = 0;\n\t\t\n\t\t\n\t\t// Constructor\n\t\tfunction Game(size) {\n\t\t\tGame.size = size;\n\t\t\tthis.shotsTaken = 0;\n\t\t\tthis.createGrid();\n\t\t\tthis.init();\n\t\t}\n\t\tGame.size = 10; // Default grid size is 10x10\n\t\tGame.gameOver = false;\n\t\t// Checks if the game is won, and if it is, re-initializes the game\n\t\tGame.prototype.checkIfWon = function() {\n\t\t\tif (this.computerFleet.allShipsSunk()) {\n\t\t\t\talert('Congratulations, you win!');\n\t\t\t\tGame.gameOver = true;\n\t\t\t\t// Game.stats.wonGame();\n\t\t\t\t// Game.stats.syncStats();\n\t\t\t\t// Game.stats.updateStatsSidebar();\n\t\t\t\tthis.showRestartSidebar();\n\t\t\t} else if (this.humanFleet.allShipsSunk()) {\n\t\t\t\talert('Yarr! The computer sank all your ships. Try again.');\n\t\t\t\tGame.gameOver = true;\n\t\t\t\t// Game.stats.lostGame();\n\t\t\t\t// Game.stats.syncStats();\n\t\t\t\t// Game.stats.updateStatsSidebar();\n\t\t\t\tthis.showRestartSidebar();\n\t\t\t}\n\t\t};\n\t\t// Shoots at the target player on the grid.\n\t\t// Returns {int} Constants.TYPE: What the shot uncovered\n\t\tGame.prototype.shoot = function(x, y, targetPlayer) {\n\t\t\tlet targetGrid;\n\t\t\tlet targetFleet;\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\t\ttargetGrid = this.humanGrid;\n\t\t\t\ttargetFleet = this.humanFleet;\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\t\ttargetGrid = this.computerGrid;\n\t\t\t\ttargetFleet = this.computerFleet;\n\t\t\t} else {\n\t\t\t\t// Should never be called\n\t\t\t\tconsole.log(\"There was an error trying to find the correct player to target\");\n\t\t\t}\n\t\t\n\t\t\tif (targetGrid.isDamagedShip(x, y)) {\n\t\t\t\treturn null;\n\t\t\t} else if (targetGrid.isMiss(x, y)) {\n\t\t\t\treturn null;\n\t\t\t} else if (targetGrid.isUndamagedShip(x, y)) {\n\t\t\t\t// update the board/grid\n\t\t\t\ttargetGrid.updateCell(x, y, 'hit', targetPlayer);\n\t\t\t\t// IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n\t\t\t\t// because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\t\t\t\ttargetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\t\t\t\tthis.checkIfWon();\n\t\t\t\treturn CONST.TYPE_HIT;\n\t\t\t} else {\n\t\t\t\ttargetGrid.updateCell(x, y, 'miss', targetPlayer);\n\t\t\t\tthis.checkIfWon();\n\t\t\t\treturn CONST.TYPE_MISS;\n\t\t\t}\n\t\t};\n\t\t// Creates click event listeners on each one of the 100 grid cells\n\t\tGame.prototype.shootListener = function(e) {\n\t\t\tvar self = e.target.self;\n\t\t\t// Extract coordinates from event listener\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\tvar result = null;\n\t\t\tif (self.readyToPlay) {\n\t\t\t\tresult = self.shoot(x, y, CONST.COMPUTER_PLAYER);\n\t\t\n\t\t\t\t// Remove the tutorial arrow\n\t\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\t\tgameTutorial.nextStep();\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tif (result !== null && !Game.gameOver) {\n\t\t\t\t//Game.stats.incrementShots();\n\t\t\t\t// if (result === CONST.TYPE_HIT) {\n\t\t\t\t// \tGame.stats.hitShot();\n\t\t\t\t// }\n\t\t\t\t// The AI shoots iff the player clicks on a cell that he/she hasn't\n\t\t\t\t// already clicked on yet\n\t\t\t\tself.robot.shoot();\n\t\t\t} else {\n\t\t\t\tGame.gameOver = false;\n\t\t\t}\n\t\t};\n\t\t// Creates click event listeners on each of the ship names in the roster\n\t\tGame.prototype.rosterListener = function(e) {\n\t\t\tvar self = e.target.self;\n\t\t\t// Remove all classes of 'placing' from the fleet roster first\n\t\t\tvar roster = document.querySelectorAll('.fleet-roster li');\n\t\t\tfor (var i = 0; i < roster.length; i++) {\n\t\t\t\tvar classes = roster[i].getAttribute('class') || '';\n\t\t\t\tclasses = classes.replace('placing', '');\n\t\t\t\troster[i].setAttribute('class', classes);\n\t\t\t}\n\t\t\n\t\t\t// Move the highlight to the next step\n\t\t\tif (gameTutorial.currentStep === 1) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t}\n\t\t\t\n\t\t\t// Set the class of the target ship to 'placing'\n\t\t\tGame.placeShipType = e.target.getAttribute('id');\n\t\t\tdocument.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n\t\t\tGame.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n\t\t\tself.placingOnGrid = true;\n\t\t};\n\t\t// Creates click event listeners on the human player's grid to handle\n\t\t// ship placement after the user has selected a ship name\n\t\tGame.prototype.placementListener = function(e) {\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\t// Extract coordinates from event listener\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\t\t\n\t\t\t\t// Don't screw up the direction if the user tries to place again.\n\t\t\t\tvar successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\t\t\t\tif (successful) {\n\t\t\t\t\t// Done placing this ship\n\t\t\t\t\tself.endPlacing(Game.placeShipType);\n\t\t\n\t\t\t\t\t// Remove the helper arrow\n\t\t\t\t\tif (gameTutorial.currentStep === 2) {\n\t\t\t\t\t\tgameTutorial.nextStep();\n\t\t\t\t\t}\n\t\t\n\t\t\t\t\tself.placingOnGrid = false;\n\t\t\t\t\tif (self.areAllShipsPlaced()) {\n\t\t\t\t\t\tvar el = document.getElementById('rotate-button');\n\t\t\t\t\t\tel.addEventListener(transitionEndEventName(),(function(){\n\t\t\t\t\t\t\tel.setAttribute('class', 'hidden');\n\t\t\t\t\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').setAttribute('class', 'highlight');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').removeAttribute('class');\t\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}),false);\n\t\t\t\t\t\tel.setAttribute('class', 'invisible');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Creates mouseover event listeners that handles mouseover on the\n\t\t// human player's grid to draw a phantom ship implying that the user\n\t\t// is allowed to place a ship there\n\t\tGame.prototype.placementMouseover = function(e) {\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\t\tvar classes;\n\t\t\t\tvar fleetRoster = self.humanFleet.fleetRoster;\n\t\t\n\t\t\t\tfor (var i = 0; i < fleetRoster.length; i++) {\n\t\t\t\t\tvar shipType = fleetRoster[i].type;\n\t\t\n\t\t\t\t\tif (Game.placeShipType === shipType &&\n\t\t\t\t\t\tfleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n\t\t\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\t\t\t\tclasses = el.getAttribute('class');\n\t\t\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\t\t\t\tif (classes.indexOf(' grid-ship') < 0) {\n\t\t\t\t\t\t\t\tclasses += ' grid-ship';\n\t\t\t\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Creates mouseout event listeners that un-draws the phantom ship\n\t\t// on the human player's grid as the user hovers over a different cell\n\t\tGame.prototype.placementMouseout = function(e) {\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\t\tvar classes = el.getAttribute('class');\n\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\t\tif (classes.indexOf(' grid-ship') > -1) {\n\t\t\t\t\t\tclasses = classes.replace(' grid-ship', '');\n\t\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Click handler for the Rotate Ship button\n\t\tGame.prototype.toggleRotation = function(e) {\n\t\t\t// Toggle rotation direction\n\t\t\tvar direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\te.target.setAttribute('data-direction', '1');\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n\t\t\t} else if (direction === Ship.DIRECTION_HORIZONTAL) {\n\t\t\t\te.target.setAttribute('data-direction', '0');\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_VERTICAL;\n\t\t\t}\n\t\t};\n\t\t// Click handler for the Start Game button\n\t\tGame.prototype.startGame = function(e) {\n\t\t\tvar self = e.target.self;\n\t\t\tvar el = document.getElementById('roster-sidebar');\n\t\t\tvar fn = function() {el.setAttribute('class', 'hidden');};\n\t\t\tel.addEventListener(transitionEndEventName(),fn,false);\n\t\t\tel.setAttribute('class', 'invisible');\n\t\t\tself.readyToPlay = true;\n\t\t\n\t\t\t// Advanced the tutorial step\n\t\t\tif (gameTutorial.currentStep === 3) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t}\n\t\t\tel.removeEventListener(transitionEndEventName(),fn,false);\n\t\t};\n\t\t// Click handler for Restart Game button\n\t\tGame.prototype.restartGame = function(e) {\n\t\t\te.target.removeEventListener(e.type, arguments.callee);\n\t\t\tvar self = e.target.self;\n\t\t\tdocument.getElementById('restart-sidebar').setAttribute('class', 'hidden');\n\t\t\tself.resetFogOfWar();\n\t\t\tself.init();\n\t\t};\n\t\t// Debugging function used to place all ships and just start\n\t\tGame.prototype.placeRandomly = function(e){\n\t\t\te.target.removeEventListener(e.type, arguments.callee);\n\t\t\te.target.self.humanFleet.placeShipsRandomly();\n\t\t\te.target.self.readyToPlay = true;\n\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n\t\t\tthis.setAttribute('class', 'hidden');\n\t\t};\n\t\t// Ends placing the current ship\n\t\tGame.prototype.endPlacing = function(shipType) {\n\t\t\tdocument.getElementById(shipType).setAttribute('class', 'placed');\n\t\t\t\n\t\t\t// Mark the ship as 'used'\n\t\t\tGame.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED;\n\t\t\n\t\t\t// Wipe out the variable when you're done with it\n\t\t\tGame.placeShipDirection = null;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\t\t};\n\t\t// Checks whether or not all ships are done placing\n\t\t// Returns boolean\n\t\tGame.prototype.areAllShipsPlaced = function() {\n\t\t\tvar playerRoster = document.querySelectorAll('.fleet-roster li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tif (playerRoster[i].getAttribute('class') === 'placed') {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Reset temporary variables\n\t\t\tGame.placeShipDirection = 0;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\t\t\treturn true;\n\t\t};\n\t\t// Resets the fog of war\n\t\tGame.prototype.resetFogOfWar = function() {\n\t\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\t\tthis.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n\t\t\t\t\tthis.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Reset all values to indicate the ships are ready to be placed again\n\t\t\tGame.usedShips = Game.usedShips.map(function(){return CONST.UNUSED;});\n\t\t};\n\t\t// Resets CSS styling of the sidebar\n\t\tGame.prototype.resetRosterSidebar = function() {\n\t\t\tconsole.log(document.getElementById('fleet-roster'));\n\t\t\tvar els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < els.length; i++) {\n\t\t\t\tels[i].removeAttribute('class');\n\t\t\t}\n\t\t\n\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t} else {\n\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t\t}\n\t\t\tdocument.getElementById('rotate-button').removeAttribute('class');\n\t\t\tdocument.getElementById('start-game').setAttribute('class', 'hidden');\n\t\t\t// if (DEBUG_MODE) {\n\t\t\t// \tdocument.getElementById('place-randomly').removeAttribute('class');\n\t\t\t// }\n\t\t};\n\t\tGame.prototype.showRestartSidebar = function() {\n\t\t\tvar sidebar = document.getElementById('restart-sidebar');\n\t\t\tsidebar.setAttribute('class', 'highlight');\n\t\t\n\t\t\t// Deregister listeners\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\t\tcomputerCells[j].removeEventListener('click', this.shootListener, false);\n\t\t\t}\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tplayerRoster[i].removeEventListener('click', this.rosterListener, false);\n\t\t\t}\n\t\t\n\t\t\tvar restartButton = document.getElementById('restart-game');\n\t\t\trestartButton.addEventListener('click', this.restartGame, false);\n\t\t\trestartButton.self = this;\n\t\t};\n\t\t// Generates the HTML divs for the grid for both players\n\t\tGame.prototype.createGrid = function() {\n\t\t\tvar gridDiv = document.querySelectorAll('.grid');\n\t\t\tfor (var grid = 0; grid < gridDiv.length; grid++) {\n\t\t\t\tgridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\t\t\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\t\t\tvar el = document.createElement('div');\n\t\t\t\t\t\tel.setAttribute('data-x', i);\n\t\t\t\t\t\tel.setAttribute('data-y', j);\n\t\t\t\t\t\tel.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n\t\t\t\t\t\tgridDiv[grid].appendChild(el);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Initializes the Game. Also resets the game if previously initialized\n\t\tGame.prototype.init = function() {\n\t\t\tthis.humanGrid = new Grid(Game.size);\n\t\t\tthis.computerGrid = new Grid(Game.size);\n\t\t\tthis.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n\t\t\tthis.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n\t\t\n\t\t\tthis.robot = new AI(this);\n\t\t\t//Game.stats = new Stats();\n\t\t\t//Game.stats.updateStatsSidebar();\n\t\t\n\t\t\t// Reset game variables\n\t\t\tthis.shotsTaken = 0;\n\t\t\tthis.readyToPlay = false;\n\t\t\tthis.placingOnGrid = false;\n\t\t\tGame.placeShipDirection = 0;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\t\t\n\t\t\tthis.resetRosterSidebar();\n\t\t\n\t\t\t// Add a click listener for the Grid.shoot() method for all cells\n\t\t\t// Only add this listener to the computer's grid\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\t\tcomputerCells[j].self = this;\n\t\t\t\tcomputerCells[j].addEventListener('click', this.shootListener, false);\n\t\t\t}\n\t\t\n\t\t\t// Add a click listener to the roster\t\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tplayerRoster[i].self = this;\n\t\t\t\tplayerRoster[i].addEventListener('click', this.rosterListener, false);\n\t\t\t}\n\t\t\n\t\t\t// Add a click listener to the human player's grid while placing\n\t\t\tvar humanCells = document.querySelector('.human-player').childNodes;\n\t\t\tfor (var k = 0; k < humanCells.length; k++) {\n\t\t\t\thumanCells[k].self = this;\n\t\t\t\thumanCells[k].addEventListener('click', this.placementListener, false);\n\t\t\t\thumanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n\t\t\t\thumanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n\t\t\t}\n\t\t\n\t\t\tvar rotateButton = document.getElementById('rotate-button');\n\t\t\trotateButton.addEventListener('click', this.toggleRotation, false);\n\t\t\tvar startButton = document.getElementById('start-game');\n\t\t\tstartButton.self = this;\n\t\t\tstartButton.addEventListener('click', this.startGame, false);\n\t\t\t// var resetButton = document.getElementById('reset-stats');\n\t\t\t// resetButton.addEventListener('click', Game.stats.resetStats, false);\n\t\t\tvar randomButton = document.getElementById('place-randomly');\n\t\t\trandomButton.self = this;\n\t\t\trandomButton.addEventListener('click', this.placeRandomly, false);\n\t\t\tthis.computerFleet.placeShipsRandomly();\n\t\t};\n\t\t\n\t\t// Grid object\n\t\t// Constructor\n\t\tfunction Grid(size) {\n\t\t\tthis.size = size;\n\t\t\tthis.cells = [];\n\t\t\tthis.init();\n\t\t}\n\t\t\n\t\t// Initialize and populate the grid\n\t\tGrid.prototype.init = function() {\n\t\t\tfor (var x = 0; x < this.size; x++) {\n\t\t\t\tvar row = [];\n\t\t\t\tthis.cells[x] = row;\n\t\t\t\tfor (var y = 0; y < this.size; y++) {\n\t\t\t\t\trow.push(CONST.TYPE_EMPTY);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\t// Updates the cell's CSS class based on the type passed in\n\t\tGrid.prototype.updateCell = function(x, y, type, targetPlayer) {\n\t\t\tvar player;\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\t\tplayer = 'human-player';\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\t\tplayer = 'computer-player';\n\t\t\t} else {\n\t\t\t\t// Should never be called\n\t\t\t\tconsole.log(\"There was an error trying to find the correct player's grid\");\n\t\t\t}\n\t\t\n\t\t\tswitch (type) {\n\t\t\t\tcase CONST.CSS_TYPE_EMPTY:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_SHIP:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SHIP;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_MISS:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_MISS;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_HIT:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_HIT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_SUNK:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SUNK;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n\t\t\tdocument.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n\t\t};\n\t\t// Checks to see if a cell contains an undamaged ship\n\t\t// Returns boolean\n\t\tGrid.prototype.isUndamagedShip = function(x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_SHIP;\n\t\t};\n\t\t// Checks to see if the shot was missed. This is equivalent\n\t\t// to checking if a cell contains a cannonball\n\t\t// Returns boolean\n\t\tGrid.prototype.isMiss = function(x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_MISS;\n\t\t};\n\t\t// Checks to see if a cell contains a damaged ship,\n\t\t// either hit or sunk.\n\t\t// Returns boolean\n\t\tGrid.prototype.isDamagedShip = function(x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n\t\t};\n\t\t\n\t\t// Fleet object\n\t\t// This object is used to keep track of a player's portfolio of ships\n\t\t// Constructor\n\t\tfunction Fleet(playerGrid, player) {\n\t\t\tthis.numShips = CONST.AVAILABLE_SHIPS.length;\n\t\t\tthis.playerGrid = playerGrid;\n\t\t\tthis.player = player;\n\t\t\tthis.fleetRoster = [];\n\t\t\tthis.populate();\n\t\t}\n\t\t// Populates a fleet\n\t\tFleet.prototype.populate = function() {\n\t\t\tfor (var i = 0; i < this.numShips; i++) {\n\t\t\t\t// loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n\t\t\t\tvar j = i % CONST.AVAILABLE_SHIPS.length;\n\t\t\t\tthis.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n\t\t\t}\n\t\t};\n\t\t// Places the ship and returns whether or not the placement was successful\n\t\t// Returns boolean\n\t\tFleet.prototype.placeShip = function(x, y, direction, shipType) {\n\t\t\tvar shipCoords;\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar shipTypes = this.fleetRoster[i].type;\n\t\t\n\t\t\t\tif (shipType === shipTypes &&\n\t\t\t\t\tthis.fleetRoster[i].isLegal(x, y, direction)) {\n\t\t\t\t\tthis.fleetRoster[i].create(x, y, direction, false);\n\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\t// Places ships randomly on the board\n\t\t// TODO: Avoid placing ships too close to each other\n\t\tFleet.prototype.placeShipsRandomly = function() {\n\t\t\tvar shipCoords;\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar illegalPlacement = true;\n\t\t\t\n\t\t\t\t// Prevents the random placement of already placed ships\n\t\t\t\tif(this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\twhile (illegalPlacement) {\n\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\n\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\n\t\t\t\t\tvar randomDirection = Math.floor(2*Math.random());\n\t\t\t\t\t\n\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\t\t\t\tillegalPlacement = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t\t\tGame.usedShips[i] = CONST.USED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Finds a ship by location\n\t\t// Returns the ship object located at (x, y)\n\t\t// If no ship exists at (x, y), this returns null instead\n\t\tFleet.prototype.findShipByCoords = function(x, y) {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar currentShip = this.fleetRoster[i];\n\t\t\t\tif (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tif (y === currentShip.yPosition &&\n\t\t\t\t\t\tx >= currentShip.xPosition &&\n\t\t\t\t\t\tx < currentShip.xPosition + currentShip.shipLength) {\n\t\t\t\t\t\treturn currentShip;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (x === currentShip.xPosition &&\n\t\t\t\t\t\ty >= currentShip.yPosition &&\n\t\t\t\t\t\ty < currentShip.yPosition + currentShip.shipLength) {\n\t\t\t\t\t\treturn currentShip;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t// Finds a ship by its type\n\t\t// Param shipType is a string\n\t\t// Returns the ship object that is of type shipType\n\t\t// If no ship exists, this returns null.\n\t\tFleet.prototype.findShipByType = function(shipType) {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tif (this.fleetRoster[i].type === shipType) {\n\t\t\t\t\treturn this.fleetRoster[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t// Checks to see if all ships have been sunk\n\t\t// Returns boolean\n\t\tFleet.prototype.allShipsSunk = function() {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\t// If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n\t\t\t\tif (this.fleetRoster[i].sunk === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\t\t\n\t\t// Ship object\n\t\t// Constructor\n\t\tfunction Ship(type, playerGrid, player) {\n\t\t\tthis.damage = 0;\n\t\t\tthis.type = type;\n\t\t\tthis.playerGrid = playerGrid;\n\t\t\tthis.player = player;\n\t\t\n\t\t\tswitch (this.type) {\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[0]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[1]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[2]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[3]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[4]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[5]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[6]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[7]:\n\t\t\t\t\tthis.shipLength = 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[8]:\n\t\t\t\t\tthis.shipLength = 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[9]:\n\t\t\t\t\tthis.shipLength = 4;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.maxDamage = this.shipLength;\n\t\t\tthis.sunk = false;\n\t\t}\n\t\t// Checks to see if the placement of a ship is legal\n\t\t// Returns boolean\n\t\tShip.prototype.isLegal = function(x, y, direction) {\n\t\t\t// first, check if the ship is within the grid...\n\t\t\tif (this.withinBounds(x, y, direction)) {\n\t\t\t\t// ...then check to make sure it doesn't collide with another ship\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\t\tif (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_MISS ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_MISS ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED){\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t\t// Checks to see if the ship is within bounds of the grid\n\t\t// Returns boolean\n\t\tShip.prototype.withinBounds = function(x, y, direction) {\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\treturn x + this.shipLength <= Game.size;\n\t\t\t} else {\n\t\t\t\treturn y + this.shipLength <= Game.size;\n\t\t\t}\n\t\t};\n\t\t\n\t\t// Increments the damage counter of a ship\n\t\t// Returns Ship\n\t\tShip.prototype.incrementDamage = function() {\n\t\t\tthis.damage++;\n\t\t\tif (this.isSunk()) {\n\t\t\t\tthis.sinkShip(false); // Sinks the ship\n\t\t\t}\n\t\t};\n\t\t// Checks to see if the ship is sunk\n\t\t// Returns boolean\n\t\tShip.prototype.isSunk = function() {\n\t\t\treturn this.damage >= this.maxDamage;\n\t\t};\n\t\t// Sinks the ship\n\t\tShip.prototype.sinkShip = function(virtual) {\n\t\t\tthis.damage = this.maxDamage; // Force the damage to exceed max damage\n\t\t\tthis.sunk = true;\n\t\t\n\t\t\t// Make the CSS class sunk, but only if the ship is not virtual\n\t\t\tif (!virtual) {\n\t\t\t\tvar allCells = this.getAllShipCells();\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tthis.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * Gets all the ship cells\n\t\t *\n\t\t * Returns an array with all (x, y) coordinates of the ship:\n\t\t * e.g.\n\t\t * [\n\t\t *\t{'x':2, 'y':2},\n\t\t *\t{'x':3, 'y':2},\n\t\t *\t{'x':4, 'y':2}\n\t\t * ]\n\t\t */\n\t\tShip.prototype.getAllShipCells = function() {\n\t\t\tvar resultObject = [];\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tresultObject[i] = {'x': this.xPosition + i, 'y': this.yPosition};\n\t\t\t\t} else {\n\t\t\t\t\tresultObject[i] = {'x': this.xPosition, 'y': this.yPosition + i};\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resultObject;\n\t\t};\n\t\t// Initializes a ship with the given coordinates and direction (bearing).\n\t\t// If the ship is declared \"virtual\", then the ship gets initialized with\n\t\t// its coordinates but DOESN'T get placed on the grid.\n\t\tShip.prototype.create = function(x, y, direction, virtual) {\n\t\t\t// This function assumes that you've already checked that the placement is legal\n\t\t\tthis.xPosition = x;\n\t\t\tthis.yPosition = y;\n\t\t\tthis.direction = direction;\n\t\t\n\t\t\t// If the ship is virtual, don't add it to the grid.\n\t\t\tif (!virtual) {\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\t\n\t\t\t\t\t\tif(this.checkPosition(x + i, y + 1)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.checkPosition(x + i, y - 1)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(this.checkPosition(x + 1, y + i)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(this.checkPosition(x - 1, y + i)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tif(this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x - 1, y)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x - 1, y + 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x + this.shipLength, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x + this.shipLength, y)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED; \n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x + this.shipLength, y + 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\n\t\t\t\t} else {\n\t\t\t\t\tif(this.checkPosition(x + 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x, y-1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x + 1, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x - 1, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\t\t\n\t\t};\n\t\n\t\tShip.prototype.checkPosition = function(x, y) {\n\t\t\tlet triger = false;\n\t\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\n\t\t\t\ttriger = true;\n\t\t\t}\n\t\t\treturn triger\n\t\t};\n\t\t// direction === 0 when the ship is facing north/south\n\t\t// direction === 1 when the ship is facing east/west\n\t\tShip.DIRECTION_VERTICAL = 0;\n\t\tShip.DIRECTION_HORIZONTAL = 1;\n\t\t\n\t\t// Tutorial Object\n\t\t// Constructor\n\t\tfunction Tutorial() {\n\t\t\tthis.currentStep = 0;\n\t\t\t// Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\t\t\tthis.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n\t\t}\n\t\t// Advances the tutorial to the next step\n\t\tTutorial.prototype.nextStep = function() {\n\t\t\tvar humanGrid = document.querySelector('.human-player');\n\t\t\tvar computerGrid = document.querySelector('.computer-player');\n\t\t\tswitch (this.currentStep) {\n\t\t\t\tcase 0:\n\t\t\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'highlight');\n\t\t\t\t\tdocument.getElementById('step1').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t\t\t\tdocument.getElementById('step1').removeAttribute('class');\n\t\t\t\t\thumanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\n\t\t\t\t\tdocument.getElementById('step2').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\tdocument.getElementById('step2').removeAttribute('class');\n\t\t\t\t\tvar humanClasses = humanGrid.getAttribute('class');\n\t\t\t\t\thumanClasses = humanClasses.replace(' highlight', '');\n\t\t\t\t\thumanGrid.setAttribute('class', humanClasses);\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\n\t\t\t\t\tdocument.getElementById('step3').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tvar computerClasses = computerGrid.getAttribute('class');\n\t\t\t\t\tdocument.getElementById('step3').removeAttribute('class');\n\t\t\t\t\tcomputerClasses = computerClasses.replace(' highlight', '');\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerClasses);\n\t\t\t\t\tdocument.getElementById('step4').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\tdocument.getElementById('step4').removeAttribute('class');\n\t\t\t\t\tthis.currentStep = 6;\n\t\t\t\t\tthis.showTutorial = false;\n\t\t\t\t\tlocalStorage.setItem('showTutorial', false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\t\t\n\t\t// AI Object\n\t\t// Optimal battleship-playing AI\n\t\t// Constructor\n\t\tfunction AI(gameObject) {\n\t\t\tthis.gameObject = gameObject;\n\t\t\tthis.virtualGrid = new Grid(Game.size);\n\t\t\tthis.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n\t\t\n\t\t\tthis.probGrid = []; // Probability Grid\n\t\t\tthis.initProbs();\n\t\t\tthis.updateProbs();\n\t\t}\n\t\tAI.PROB_WEIGHT = 5000; // arbitrarily big number\n\t\t// how much weight to give to the opening book's high probability cells\n\t\tAI.OPEN_HIGH_MIN = 20;\n\t\tAI.OPEN_HIGH_MAX = 30;\n\t\t// how much weight to give to the opening book's medium probability cells\n\t\tAI.OPEN_MED_MIN = 15;\n\t\tAI.OPEN_MED_MAX = 25;\n\t\t// how much weight to give to the opening book's low probability cells\n\t\tAI.OPEN_LOW_MIN = 10;\n\t\tAI.OPEN_LOW_MAX = 20;\n\t\t// Amount of randomness when selecting between cells of equal probability\n\t\tAI.RANDOMNESS = 0.1;\n\t\t// AI's opening book.\n\t\t// This is the pattern of the first cells for the AI to target\n\t\tAI.OPENINGS = [\n\t\t\t{'x': 7, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t\t{'x': 6, 'y': 2, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t\t{'x': 3, 'y': 7, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t\t{'x': 2, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t\t{'x': 6, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t\t{'x': 3, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t\t{'x': 5, 'y': 5, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t\t{'x': 4, 'y': 4, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t\t// {'x': 9, 'y': 5, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t\t// {'x': 0, 'y': 4, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t\t// {'x': 5, 'y': 9, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t\t// {'x': 4, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t\t{'x': 0, 'y': 8, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t\t{'x': 1, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t\t{'x': 8, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t\t{'x': 9, 'y': 1, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t\t{'x': 9, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t\t{'x': 0, 'y': 0, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)}\n\t\t];\n\t\t// Scouts the grid based on max probability, and shoots at the cell\n\t\t// that has the highest probability of containing a ship\n\t\tAI.prototype.shoot = function() {\n\t\t\tvar maxProbability = 0;\n\t\t\tvar maxProbCoords;\n\t\t\tvar maxProbs = [];\n\t\t\t\n\t\t\t// Add the AI's opening book to the probability grid\n\t\t\tfor (var i = 0; i < AI.OPENINGS.length; i++) {\n\t\t\t\tvar cell = AI.OPENINGS[i];\n\t\t\t\tif (this.probGrid[cell.x][cell.y] !== 0) {\n\t\t\t\t\tthis.probGrid[cell.x][cell.y] += cell.weight;\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\tif (this.probGrid[x][y] > maxProbability) {\n\t\t\t\t\t\tmaxProbability = this.probGrid[x][y];\n\t\t\t\t\t\tmaxProbs = [{'x': x, 'y': y}]; // Replace the array\n\t\t\t\t\t} else if (this.probGrid[x][y] === maxProbability) {\n\t\t\t\t\t\tmaxProbs.push({'x': x, 'y': y});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\n\t\t\tmaxProbCoords = Math.random() < AI.RANDOMNESS ?\n\t\t\tmaxProbs[Math.floor(Math.random() * maxProbs.length)] :\n\t\t\tmaxProbs[0];\n\t\t\n\t\t\tvar result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER);\n\t\t\t\n\t\t\t// If the game ends, the next lines need to be skipped.\n\t\t\tif (Game.gameOver) {\n\t\t\t\tGame.gameOver = false;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\n\t\t\tthis.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result;\n\t\t\n\t\t\t// If you hit a ship, check to make sure if you've sunk it.\n\t\t\tif (result === CONST.TYPE_HIT) {\n\t\t\t\tvar humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\t\t\t\tif (humanShip.isSunk()) {\n\t\t\t\t\t// Remove any ships from the roster that have been sunk\n\t\t\t\t\tvar shipTypes = [];\n\t\t\t\t\tfor (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n\t\t\t\t\t\tshipTypes.push(this.virtualFleet.fleetRoster[k].type);\n\t\t\t\t\t}\n\t\t\t\t\tvar index = shipTypes.indexOf(humanShip.type);\n\t\t\t\t\tthis.virtualFleet.fleetRoster.splice(index, 1);\n\t\t\n\t\t\t\t\t// Update the virtual grid with the sunk ship's cells\n\t\t\t\t\tvar shipCells = humanShip.getAllShipCells();\n\t\t\t\t\tfor (var _i = 0; _i < shipCells.length; _i++) {\n\t\t\t\t\t\tthis.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Update probability grid after each shot\n\t\t\tthis.updateProbs();\n\t\t};\n\t\t// Update the probability grid\n\t\tAI.prototype.updateProbs = function() {\n\t\t\tvar roster = this.virtualFleet.fleetRoster;\n\t\t\tvar coords;\n\t\t\tthis.resetProbs();\n\t\t\n\t\t\t// Probabilities are not normalized to fit in the interval [0, 1]\n\t\t\t// because we're only interested in the maximum value.\n\t\t\n\t\t\t// This works by trying to fit each ship in each cell in every orientation\n\t\t\t// For every cell, the more legal ways a ship can pass through it, the more\n\t\t\t// likely the cell is to contain a ship.\n\t\t\t// Cells that surround known 'hits' are given an arbitrarily large probability\n\t\t\t// so that the AI tries to completely sink the ship before moving on.\n\t\t\n\t\t\t// TODO: Think about a more efficient implementation\n\t\t\tfor (var k = 0; k < roster.length; k++) {\n\t\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\t\tfor (var i = 0; i < coords.length; i++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (var _i = 0; _i < coords.length; _i++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_i].x][coords[_i].y]++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\t\tfor (var j = 0; j < coords.length; j++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (var _j = 0; _j < coords.length; _j++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_j].x][coords[_j].y]++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\n\t\t\t\t\t\t// Set hit cells to probability zero so the AI doesn't\n\t\t\t\t\t\t// target cells that are already hit\n\t\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n\t\t\t\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Initializes the probability grid for targeting\n\t\tAI.prototype.initProbs = function() {\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tvar row = [];\n\t\t\t\tthis.probGrid[x] = row;\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\trow.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Resets the probability grid to all 0.\n\t\tAI.prototype.resetProbs = function() {\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tAI.prototype.metagame = function() {\n\t\t\t// Inputs:\n\t\t\t// Proximity of hit cells to edge\n\t\t\t// Proximity of hit cells to each other\n\t\t\t// Edit the probability grid by multiplying each cell with a new probability weight (e.g. 0.4, or 3). Set this as a CONST and make 1-CONST the inverse for decreasing, or 2*CONST for increasing\n\t\t};\n\t\t// Finds a human ship by coordinates\n\t\t// Returns Ship\n\t\tAI.prototype.findHumanShip = function(x, y) {\n\t\t\treturn this.gameObject.humanFleet.findShipByCoords(x, y);\n\t\t};\n\t\t// Checks whether or not a given ship's cells passes through\n\t\t// any cell that is hit.\n\t\t// Returns boolean\n\t\tAI.prototype.passesThroughHitCell = function(shipCells) {\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\t// Gives the number of hit cells the ships passes through. The more\n\t\t// cells this is, the more probable the ship exists in those coordinates\n\t\t// Returns int\n\t\tAI.prototype.numHitCellsCovered = function(shipCells) {\n\t\t\tvar cells = 0;\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\t\tcells++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cells;\n\t\t};\n\t\t\n\t\t// Global constant only initialized once\n\t\tvar gameTutorial = new Tutorial();\n\t\t\n\t\t// Start the game\n\t\tvar mainGame = new Game(10);\n\t\tfunction transitionEndEventName() {\n\t\t\tvar i,\n\t\t\t\tundefined,\n\t\t\t\tel = document.createElement('div'),\n\t\t\t\ttransitions = {\n\t\t\t\t\t'transition':'transitionend',\n\t\t\t\t\t'OTransition':'otransitionend',  // oTransitionEnd in very old Opera\n\t\t\t\t\t'MozTransition':'transitionend',\n\t\t\t\t\t'WebkitTransition':'webkitTransitionEnd'\n\t\t\t\t};\n\t\n\t\t\tfor (i in transitions) {\n\t\t\t\tif (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n\t\t\t\t\treturn transitions[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\t// Returns a random number between min (inclusive) and max (exclusive)\n\t\tfunction getRandom(min, max) {\n\t\t\treturn Math.random() * (max - min) + min;\n\t\t}\n\t\t\n\t}\n\n    render() {\n        return (\n            <div className=\"container text-center\">\n                <h2>Battles List</h2>\n            <div className=\"game-container\">\n<div className=\"game-container\">\n\t\t<div id=\"restart-sidebar\" className=\"hidden\">\n\t\t\t<h2>Try Again</h2>\n\t\t\t<button id=\"restart-game\">Restart Game</button>\n\t\t</div><div id=\"roster-sidebar\">\n\t\t\t<h2>Place Your Ships</h2>\n\t\t\t<ul className=\"fleet-roster\" id=\"fleet-roster\">\n\t\t\t\t<li id=\"1.1\">1 երկարության</li>\n\t\t\t\t<li id=\"1.2\">1 երկարության</li>\n\t\t\t\t<li id=\"1.3\">1 երկարության</li>\n\t\t\t\t<li id=\"1.4\">1 երկարության</li>\n\t\t\t\t<li id=\"2.1\">2 երկարության</li>\n\t\t\t\t<li id=\"2.2\">2 երկարության</li>\n\t\t\t\t<li id=\"2.3\">2 երկարության</li>\n\t\t\t\t<li id=\"3.1\">3 երկարության</li>\n\t\t\t\t<li id=\"3.2\">3 երկարության</li>\n\t\t\t\t<li id=\"4.1\">4 երկարության</li>\n\t\t\t</ul>\n\t\t\t<button id=\"rotate-button\" data-direction=\"0\">Rotate Ship</button>\n\t\t\t<button id=\"start-game\" className=\"hidden\">Start Game</button>\n\t\t\t<button id=\"place-randomly\" className=\"hidden\">Place Randomly and Start</button>\n\t\t</div><div className=\"grid-container\">\n\t\t\t<h2>Your Fleet</h2>\n\t\t\t<div className=\"grid human-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\n\t\t</div><div className=\"grid-container\">\n\t\t\t<h2>Enemy Fleet</h2>\n\t\t\t<div className=\"grid computer-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\n\t\t</div>\n\t</div>\n\t\n</div>\n<span className=\"prefetch\" id=\"prefetch1\"></span>\n<span className=\"prefetch\" id=\"prefetch2\"></span>\n<span className=\"prefetch\" id=\"prefetch3\"></span>\n{/* <script src=\"js/battleboat.js\"></script> */}\n\n\n            </div>\n        );\n    }\n}\n\nexport default withRouter(BattlesComponent);"]},"metadata":{},"sourceType":"module"}