{"ast":null,"code":"var _jsxFileName = \"/home/anushik/Desktop/dip/seebattle/src/components/GameComponent.jsx\";\nimport React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\nimport Stylesheet from './Stylesheet';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar CONST = {};\nCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1']; // You are player 0 and the computer is player 1\n// The virtual player is used for generating temporary ships\n// for calculating the probability heatmap\n\nCONST.HUMAN_PLAYER = 0;\nCONST.COMPUTER_PLAYER = 1;\nCONST.VIRTUAL_PLAYER = 2; // Possible values for the parameter `type` (string)\n\nCONST.CSS_TYPE_EMPTY = 'empty';\nCONST.CSS_TYPE_SHIP = 'ship';\nCONST.CSS_TYPE_MISS = 'miss';\nCONST.CSS_TYPE_HIT = 'hit';\nCONST.CSS_TYPE_SUNK = 'sunk'; // Grid code:\n\nCONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\nCONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\nCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\nCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\nCONST.TYPE_SUNK = 4; // 4 = sunk ship\n\nCONST.TYPE_NOT_ALLOWED = 5;\nGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\nCONST.USED = 1;\nCONST.UNUSED = 0;\n\nfunction Game(size) {\n  Game.size = size;\n  this.shotsTaken = 0;\n  this.createGrid();\n  this.init();\n}\n\n_c = Game;\nGame.size = 10; // Default grid size is 10x10\n\nGame.gameOver = false; // Checks if the game is won, and if it is, re-initializes the game\n\nGame.prototype.checkIfWon = function () {\n  if (this.computerFleet.allShipsSunk()) {\n    alert('Congratulations, you win!');\n    Game.gameOver = true; // Game.stats.wonGame();\n    // Game.stats.syncStats();\n    // Game.stats.updateStatsSidebar();\n\n    this.showRestartSidebar();\n  } else if (this.humanFleet.allShipsSunk()) {\n    alert('Yarr! The computer sank all your ships. Try again.');\n    Game.gameOver = true; // Game.stats.lostGame();\n    // Game.stats.syncStats();\n    // Game.stats.updateStatsSidebar();\n\n    this.showRestartSidebar();\n  }\n}; // Shoots at the target player on the grid.\n// Returns {int} Constants.TYPE: What the shot uncovered\n\n\nGame.prototype.shoot = function (x, y, targetPlayer) {\n  let targetGrid;\n  let targetFleet;\n\n  if (targetPlayer === CONST.HUMAN_PLAYER) {\n    targetGrid = this.humanGrid;\n    targetFleet = this.humanFleet;\n  } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n    targetGrid = this.computerGrid;\n    targetFleet = this.computerFleet;\n  } else {\n    // Should never be called\n    console.log(\"There was an error trying to find the correct player to target\");\n  }\n\n  if (targetGrid.isDamagedShip(x, y)) {\n    return null;\n  } else if (targetGrid.isMiss(x, y)) {\n    return null;\n  } else if (targetGrid.isUndamagedShip(x, y)) {\n    // update the board/grid\n    targetGrid.updateCell(x, y, 'hit', targetPlayer); // IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n    // because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\n    targetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\n    this.checkIfWon();\n    return CONST.TYPE_HIT;\n  } else {\n    targetGrid.updateCell(x, y, 'miss', targetPlayer);\n    this.checkIfWon();\n    return CONST.TYPE_MISS;\n  }\n}; // Creates click event listeners on each one of the 100 grid cells\n\n\nGame.prototype.shootListener = function (e) {\n  var self = e.target.self; // Extract coordinates from event listener\n\n  var x = parseInt(e.target.getAttribute('data-x'), 10);\n  var y = parseInt(e.target.getAttribute('data-y'), 10);\n  var result = null;\n\n  if (self.readyToPlay) {\n    result = self.shoot(x, y, CONST.COMPUTER_PLAYER); // Remove the tutorial arrow\n\n    if (gameTutorial.showTutorial) {\n      gameTutorial.nextStep();\n    }\n  }\n\n  if (result !== null && !Game.gameOver) {\n    //Game.stats.incrementShots();\n    // if (result === CONST.TYPE_HIT) {\n    // \tGame.stats.hitShot();\n    // }\n    // The AI shoots iff the player clicks on a cell that he/she hasn't\n    // already clicked on yet\n    self.robot.shoot();\n  } else {\n    Game.gameOver = false;\n  }\n}; // Creates click event listeners on each of the ship names in the roster\n\n\nGame.prototype.rosterListener = function (e) {\n  var self = e.target.self; // Remove all classes of 'placing' from the fleet roster first\n\n  var roster = document.querySelectorAll('.fleet-roster li');\n\n  for (var i = 0; i < roster.length; i++) {\n    var classes = roster[i].getAttribute('class') || '';\n    classes = classes.replace('placing', '');\n    roster[i].setAttribute('class', classes);\n  } // Move the highlight to the next step\n\n\n  if (gameTutorial.currentStep === 1) {\n    gameTutorial.nextStep();\n  } // Set the class of the target ship to 'placing'\n\n\n  Game.placeShipType = e.target.getAttribute('id');\n  document.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n  Game.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n  self.placingOnGrid = true;\n}; // Creates click event listeners on the human player's grid to handle\n// ship placement after the user has selected a ship name\n\n\nGame.prototype.placementListener = function (e) {\n  var self = e.target.self;\n\n  if (self.placingOnGrid) {\n    // Extract coordinates from event listener\n    var x = parseInt(e.target.getAttribute('data-x'), 10);\n    var y = parseInt(e.target.getAttribute('data-y'), 10); // Don't screw up the direction if the user tries to place again.\n\n    var successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\n    if (successful) {\n      // Done placing this ship\n      self.endPlacing(Game.placeShipType); // Remove the helper arrow\n\n      if (gameTutorial.currentStep === 2) {\n        gameTutorial.nextStep();\n      }\n\n      self.placingOnGrid = false;\n\n      if (self.areAllShipsPlaced()) {\n        var el = document.getElementById('rotate-button');\n        el.addEventListener(transitionEndEventName(), function () {\n          el.setAttribute('class', 'hidden');\n\n          if (gameTutorial.showTutorial) {\n            document.getElementById('start-game').setAttribute('class', 'highlight');\n          } else {\n            document.getElementById('start-game').removeAttribute('class');\n          }\n        }, false);\n        el.setAttribute('class', 'invisible');\n      }\n    }\n  }\n}; // Creates mouseover event listeners that handles mouseover on the\n// human player's grid to draw a phantom ship implying that the user\n// is allowed to place a ship there\n\n\nGame.prototype.placementMouseover = function (e) {\n  var self = e.target.self;\n\n  if (self.placingOnGrid) {\n    var x = parseInt(e.target.getAttribute('data-x'), 10);\n    var y = parseInt(e.target.getAttribute('data-y'), 10);\n    var classes;\n    var fleetRoster = self.humanFleet.fleetRoster;\n\n    for (var i = 0; i < fleetRoster.length; i++) {\n      var shipType = fleetRoster[i].type;\n\n      if (Game.placeShipType === shipType && fleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n        // Virtual ship\n        fleetRoster[i].create(x, y, Game.placeShipDirection, true);\n        Game.placeShipCoords = fleetRoster[i].getAllShipCells();\n\n        for (var j = 0; j < Game.placeShipCoords.length; j++) {\n          var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n          classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n          if (classes.indexOf(' grid-ship') < 0) {\n            classes += ' grid-ship';\n            el.setAttribute('class', classes);\n          }\n        }\n      }\n    }\n  }\n}; // Creates mouseout event listeners that un-draws the phantom ship\n// on the human player's grid as the user hovers over a different cell\n\n\nGame.prototype.placementMouseout = function (e) {\n  var self = e.target.self;\n\n  if (self.placingOnGrid) {\n    for (var j = 0; j < Game.placeShipCoords.length; j++) {\n      var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n      var classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n      if (classes.indexOf(' grid-ship') > -1) {\n        classes = classes.replace(' grid-ship', '');\n        el.setAttribute('class', classes);\n      }\n    }\n  }\n}; // Click handler for the Rotate Ship button\n\n\nGame.prototype.toggleRotation = function (e) {\n  // Toggle rotation direction\n  var direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\n  if (direction === Ship.DIRECTION_VERTICAL) {\n    e.target.setAttribute('data-direction', '1');\n    Game.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n  } else if (direction === Ship.DIRECTION_HORIZONTAL) {\n    e.target.setAttribute('data-direction', '0');\n    Game.placeShipDirection = Ship.DIRECTION_VERTICAL;\n  }\n}; // Click handler for the Start Game button\n\n\nGame.prototype.startGame = function (e) {\n  var self = e.target.self;\n  var el = document.getElementById('roster-sidebar');\n\n  var fn = function () {\n    el.setAttribute('class', 'hidden');\n  };\n\n  el.addEventListener(transitionEndEventName(), fn, false);\n  el.setAttribute('class', 'invisible');\n  self.readyToPlay = true; // Advanced the tutorial step\n\n  if (gameTutorial.currentStep === 3) {\n    gameTutorial.nextStep();\n  }\n\n  el.removeEventListener(transitionEndEventName(), fn, false);\n}; // Click handler for Restart Game button\n\n\nGame.prototype.restartGame = function (e) {\n  e.target.removeEventListener(e.type, arguments.callee);\n  var self = e.target.self;\n  document.getElementById('restart-sidebar').setAttribute('class', 'hidden');\n  self.resetFogOfWar();\n  self.init();\n}; // Debugging function used to place all ships and just start\n\n\nGame.prototype.placeRandomly = function (e) {\n  e.target.removeEventListener(e.type, arguments.callee);\n  e.target.self.humanFleet.placeShipsRandomly();\n  e.target.self.readyToPlay = true;\n  document.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n  this.setAttribute('class', 'hidden');\n}; // Ends placing the current ship\n\n\nGame.prototype.endPlacing = function (shipType) {\n  document.getElementById(shipType).setAttribute('class', 'placed'); // Mark the ship as 'used'\n\n  Game.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED; // Wipe out the variable when you're done with it\n\n  Game.placeShipDirection = null;\n  Game.placeShipType = '';\n  Game.placeShipCoords = [];\n}; // Checks whether or not all ships are done placing\n// Returns boolean\n\n\nGame.prototype.areAllShipsPlaced = function () {\n  var playerRoster = document.querySelectorAll('.fleet-roster li');\n\n  for (var i = 0; i < playerRoster.length; i++) {\n    if (playerRoster[i].getAttribute('class') === 'placed') {\n      continue;\n    } else {\n      return false;\n    }\n  } // Reset temporary variables\n\n\n  Game.placeShipDirection = 0;\n  Game.placeShipType = '';\n  Game.placeShipCoords = [];\n  return true;\n}; // Resets the fog of war\n\n\nGame.prototype.resetFogOfWar = function () {\n  for (var i = 0; i < Game.size; i++) {\n    for (var j = 0; j < Game.size; j++) {\n      this.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n      this.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n    }\n  } // Reset all values to indicate the ships are ready to be placed again\n\n\n  Game.usedShips = Game.usedShips.map(function () {\n    return CONST.UNUSED;\n  });\n}; // Resets CSS styling of the sidebar\n\n\nGame.prototype.resetRosterSidebar = function () {\n  console.log(document.getElementById('fleet-roster'));\n  var els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n  for (var i = 0; i < els.length; i++) {\n    els[i].removeAttribute('class');\n  }\n\n  if (gameTutorial.showTutorial) {\n    gameTutorial.nextStep();\n  } else {\n    document.getElementById('roster-sidebar').removeAttribute('class');\n  }\n\n  document.getElementById('rotate-button').removeAttribute('class');\n  document.getElementById('start-game').setAttribute('class', 'hidden'); // if (DEBUG_MODE) {\n  // \tdocument.getElementById('place-randomly').removeAttribute('class');\n  // }\n};\n\nGame.prototype.showRestartSidebar = function () {\n  var sidebar = document.getElementById('restart-sidebar');\n  sidebar.setAttribute('class', 'highlight'); // Deregister listeners\n\n  var computerCells = document.querySelector('.computer-player').childNodes;\n\n  for (var j = 0; j < computerCells.length; j++) {\n    computerCells[j].removeEventListener('click', this.shootListener, false);\n  }\n\n  var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n  for (var i = 0; i < playerRoster.length; i++) {\n    playerRoster[i].removeEventListener('click', this.rosterListener, false);\n  }\n\n  var restartButton = document.getElementById('restart-game');\n  restartButton.addEventListener('click', this.restartGame, false);\n  restartButton.self = this;\n}; // Generates the HTML divs for the grid for both players\n\n\nGame.prototype.createGrid = function () {\n  var gridDiv = document.querySelectorAll('.grid');\n\n  for (var grid = 0; grid < gridDiv.length; grid++) {\n    gridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\n    for (var i = 0; i < Game.size; i++) {\n      for (var j = 0; j < Game.size; j++) {\n        var el = document.createElement('div');\n        el.setAttribute('data-x', i);\n        el.setAttribute('data-y', j);\n        el.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n        gridDiv[grid].appendChild(el);\n      }\n    }\n  }\n}; // Initializes the Game. Also resets the game if previously initialized\n\n\nGame.prototype.init = function () {\n  this.humanGrid = new Grid(Game.size);\n  this.computerGrid = new Grid(Game.size);\n  this.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n  this.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n  this.robot = new AI(this); //Game.stats = new Stats();\n  //Game.stats.updateStatsSidebar();\n  // Reset game variables\n\n  this.shotsTaken = 0;\n  this.readyToPlay = false;\n  this.placingOnGrid = false;\n  Game.placeShipDirection = 0;\n  Game.placeShipType = '';\n  Game.placeShipCoords = [];\n  this.resetRosterSidebar(); // Add a click listener for the Grid.shoot() method for all cells\n  // Only add this listener to the computer's grid\n\n  var computerCells = document.querySelector('.computer-player').childNodes;\n\n  for (var j = 0; j < computerCells.length; j++) {\n    computerCells[j].self = this;\n    computerCells[j].addEventListener('click', this.shootListener, false);\n  } // Add a click listener to the roster\t\n\n\n  var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n  for (var i = 0; i < playerRoster.length; i++) {\n    playerRoster[i].self = this;\n    playerRoster[i].addEventListener('click', this.rosterListener, false);\n  } // Add a click listener to the human player's grid while placing\n\n\n  var humanCells = document.querySelector('.human-player').childNodes;\n\n  for (var k = 0; k < humanCells.length; k++) {\n    humanCells[k].self = this;\n    humanCells[k].addEventListener('click', this.placementListener, false);\n    humanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n    humanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n  }\n\n  var rotateButton = document.getElementById('rotate-button');\n  rotateButton.addEventListener('click', this.toggleRotation, false);\n  var startButton = document.getElementById('start-game');\n  startButton.self = this;\n  startButton.addEventListener('click', this.startGame, false); // var resetButton = document.getElementById('reset-stats');\n  // resetButton.addEventListener('click', Game.stats.resetStats, false);\n\n  var randomButton = document.getElementById('place-randomly');\n  randomButton.self = this;\n  randomButton.addEventListener('click', this.placeRandomly, false);\n  this.computerFleet.placeShipsRandomly();\n}; // Grid object\n// Constructor\n\n\nfunction Grid(size) {\n  this.size = size;\n  this.cells = [];\n  this.init();\n} // Initialize and populate the grid\n\n\n_c2 = Grid;\n\nGrid.prototype.init = function () {\n  for (var x = 0; x < this.size; x++) {\n    var row = [];\n    this.cells[x] = row;\n\n    for (var y = 0; y < this.size; y++) {\n      row.push(CONST.TYPE_EMPTY);\n    }\n  }\n}; // Updates the cell's CSS class based on the type passed in\n\n\nGrid.prototype.updateCell = function (x, y, type, targetPlayer) {\n  var player;\n\n  if (targetPlayer === CONST.HUMAN_PLAYER) {\n    player = 'human-player';\n  } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n    player = 'computer-player';\n  } else {\n    // Should never be called\n    console.log(\"There was an error trying to find the correct player's grid\");\n  }\n\n  switch (type) {\n    case CONST.CSS_TYPE_EMPTY:\n      this.cells[x][y] = CONST.TYPE_EMPTY;\n      break;\n\n    case CONST.CSS_TYPE_SHIP:\n      this.cells[x][y] = CONST.TYPE_SHIP;\n      break;\n\n    case CONST.CSS_TYPE_MISS:\n      this.cells[x][y] = CONST.TYPE_MISS;\n      break;\n\n    case CONST.CSS_TYPE_HIT:\n      this.cells[x][y] = CONST.TYPE_HIT;\n      break;\n\n    case CONST.CSS_TYPE_SUNK:\n      this.cells[x][y] = CONST.TYPE_SUNK;\n      break;\n\n    default:\n      this.cells[x][y] = CONST.TYPE_EMPTY;\n      break;\n  }\n\n  var classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n  document.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n}; // Checks to see if a cell contains an undamaged ship\n// Returns boolean\n\n\nGrid.prototype.isUndamagedShip = function (x, y) {\n  return this.cells[x][y] === CONST.TYPE_SHIP;\n}; // Checks to see if the shot was missed. This is equivalent\n// to checking if a cell contains a cannonball\n// Returns boolean\n\n\nGrid.prototype.isMiss = function (x, y) {\n  return this.cells[x][y] === CONST.TYPE_MISS;\n}; // Checks to see if a cell contains a damaged ship,\n// either hit or sunk.\n// Returns boolean\n\n\nGrid.prototype.isDamagedShip = function (x, y) {\n  return this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n}; // Fleet object\n// This object is used to keep track of a player's portfolio of ships\n// Constructor\n\n\nfunction Fleet(playerGrid, player) {\n  this.numShips = CONST.AVAILABLE_SHIPS.length;\n  this.playerGrid = playerGrid;\n  this.player = player;\n  this.fleetRoster = [];\n  this.populate();\n} // Populates a fleet\n\n\n_c3 = Fleet;\n\nFleet.prototype.populate = function () {\n  for (var i = 0; i < this.numShips; i++) {\n    // loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n    var j = i % CONST.AVAILABLE_SHIPS.length;\n    this.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n  }\n}; // Places the ship and returns whether or not the placement was successful\n// Returns boolean\n\n\nFleet.prototype.placeShip = function (x, y, direction, shipType) {\n  var shipCoords;\n\n  for (var i = 0; i < this.fleetRoster.length; i++) {\n    var shipTypes = this.fleetRoster[i].type;\n\n    if (shipType === shipTypes && this.fleetRoster[i].isLegal(x, y, direction)) {\n      this.fleetRoster[i].create(x, y, direction, false);\n      shipCoords = this.fleetRoster[i].getAllShipCells();\n\n      for (var j = 0; j < shipCoords.length; j++) {\n        this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n      }\n\n      return true;\n    }\n  }\n\n  return false;\n}; // Places ships randomly on the board\n// TODO: Avoid placing ships too close to each other\n\n\nFleet.prototype.placeShipsRandomly = function () {\n  var shipCoords;\n\n  for (var i = 0; i < this.fleetRoster.length; i++) {\n    var illegalPlacement = true; // Prevents the random placement of already placed ships\n\n    if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n      continue;\n    }\n\n    while (illegalPlacement) {\n      var randomX = Math.floor(Game.size * Math.random());\n      var randomY = Math.floor(Game.size * Math.random());\n      var randomDirection = Math.floor(2 * Math.random());\n\n      if (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n        this.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n        shipCoords = this.fleetRoster[i].getAllShipCells();\n        illegalPlacement = false;\n      } else {\n        continue;\n      }\n    }\n\n    if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n      for (var j = 0; j < shipCoords.length; j++) {\n        this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n        Game.usedShips[i] = CONST.USED;\n      }\n    }\n  }\n}; // Finds a ship by location\n// Returns the ship object located at (x, y)\n// If no ship exists at (x, y), this returns null instead\n\n\nFleet.prototype.findShipByCoords = function (x, y) {\n  for (var i = 0; i < this.fleetRoster.length; i++) {\n    var currentShip = this.fleetRoster[i];\n\n    if (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n      if (y === currentShip.yPosition && x >= currentShip.xPosition && x < currentShip.xPosition + currentShip.shipLength) {\n        return currentShip;\n      } else {\n        continue;\n      }\n    } else {\n      if (x === currentShip.xPosition && y >= currentShip.yPosition && y < currentShip.yPosition + currentShip.shipLength) {\n        return currentShip;\n      } else {\n        continue;\n      }\n    }\n  }\n\n  return null;\n}; // Finds a ship by its type\n// Param shipType is a string\n// Returns the ship object that is of type shipType\n// If no ship exists, this returns null.\n\n\nFleet.prototype.findShipByType = function (shipType) {\n  for (var i = 0; i < this.fleetRoster.length; i++) {\n    if (this.fleetRoster[i].type === shipType) {\n      return this.fleetRoster[i];\n    }\n  }\n\n  return null;\n}; // Checks to see if all ships have been sunk\n// Returns boolean\n\n\nFleet.prototype.allShipsSunk = function () {\n  for (var i = 0; i < this.fleetRoster.length; i++) {\n    // If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n    if (this.fleetRoster[i].sunk === false) {\n      return false;\n    }\n  }\n\n  return true;\n}; // Ship object\n// Constructor\n\n\nfunction Ship(type, playerGrid, player) {\n  this.damage = 0;\n  this.type = type;\n  this.playerGrid = playerGrid;\n  this.player = player;\n\n  switch (this.type) {\n    case CONST.AVAILABLE_SHIPS[0]:\n      this.shipLength = 1;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[1]:\n      this.shipLength = 1;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[2]:\n      this.shipLength = 1;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[3]:\n      this.shipLength = 1;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[4]:\n      this.shipLength = 2;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[5]:\n      this.shipLength = 2;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[6]:\n      this.shipLength = 2;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[7]:\n      this.shipLength = 3;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[8]:\n      this.shipLength = 3;\n      break;\n\n    case CONST.AVAILABLE_SHIPS[9]:\n      this.shipLength = 4;\n      break;\n  }\n\n  this.maxDamage = this.shipLength;\n  this.sunk = false;\n} // Checks to see if the placement of a ship is legal\n// Returns boolean\n\n\n_c4 = Ship;\n\nShip.prototype.isLegal = function (x, y, direction) {\n  // first, check if the ship is within the grid...\n  if (this.withinBounds(x, y, direction)) {\n    // ...then check to make sure it doesn't collide with another ship\n    for (var i = 0; i < this.shipLength; i++) {\n      if (direction === Ship.DIRECTION_VERTICAL) {\n        if (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP || this.playerGrid.cells[x + i][y] === CONST.TYPE_MISS || this.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK || this.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n          return false;\n        }\n      } else {\n        if (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP || this.playerGrid.cells[x][y + i] === CONST.TYPE_MISS || this.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK || this.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n}; // Checks to see if the ship is within bounds of the grid\n// Returns boolean\n\n\nShip.prototype.withinBounds = function (x, y, direction) {\n  if (direction === Ship.DIRECTION_VERTICAL) {\n    return x + this.shipLength <= Game.size;\n  } else {\n    return y + this.shipLength <= Game.size;\n  }\n}; // Increments the damage counter of a ship\n// Returns Ship\n\n\nShip.prototype.incrementDamage = function () {\n  this.damage++;\n\n  if (this.isSunk()) {\n    this.sinkShip(false); // Sinks the ship\n  }\n}; // Checks to see if the ship is sunk\n// Returns boolean\n\n\nShip.prototype.isSunk = function () {\n  return this.damage >= this.maxDamage;\n}; // Sinks the ship\n\n\nShip.prototype.sinkShip = function (virtual) {\n  this.damage = this.maxDamage; // Force the damage to exceed max damage\n\n  this.sunk = true; // Make the CSS class sunk, but only if the ship is not virtual\n\n  if (!virtual) {\n    var allCells = this.getAllShipCells();\n\n    for (var i = 0; i < this.shipLength; i++) {\n      this.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n    }\n  }\n};\n/**\n * Gets all the ship cells\n *\n * Returns an array with all (x, y) coordinates of the ship:\n * e.g.\n * [\n *\t{'x':2, 'y':2},\n *\t{'x':3, 'y':2},\n *\t{'x':4, 'y':2}\n * ]\n */\n\n\nShip.prototype.getAllShipCells = function () {\n  var resultObject = [];\n\n  for (var i = 0; i < this.shipLength; i++) {\n    if (this.direction === Ship.DIRECTION_VERTICAL) {\n      resultObject[i] = {\n        'x': this.xPosition + i,\n        'y': this.yPosition\n      };\n    } else {\n      resultObject[i] = {\n        'x': this.xPosition,\n        'y': this.yPosition + i\n      };\n    }\n  }\n\n  return resultObject;\n}; // Initializes a ship with the given coordinates and direction (bearing).\n// If the ship is declared \"virtual\", then the ship gets initialized with\n// its coordinates but DOESN'T get placed on the grid.\n\n\nShip.prototype.create = function (x, y, direction, virtual) {\n  // This function assumes that you've already checked that the placement is legal\n  this.xPosition = x;\n  this.yPosition = y;\n  this.direction = direction; // If the ship is virtual, don't add it to the grid.\n\n  if (!virtual) {\n    for (var i = 0; i < this.shipLength; i++) {\n      if (this.direction === Ship.DIRECTION_VERTICAL) {\n        this.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n        if (this.checkPosition(x + i, y + 1)) {\n          this.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x + i, y - 1)) {\n          this.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n      } else {\n        this.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\n        if (this.checkPosition(x + 1, y + i)) {\n          this.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x - 1, y + i)) {\n          this.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n        }\n      }\n    }\n\n    if (this.direction === Ship.DIRECTION_VERTICAL) {\n      if (this.checkPosition(x - 1, y - 1)) {\n        this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x - 1, y)) {\n        this.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x - 1, y + 1)) {\n        this.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x + this.shipLength, y - 1)) {\n        this.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x + this.shipLength, y)) {\n        this.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x + this.shipLength, y + 1)) {\n        this.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n      }\n    } else {\n      if (this.checkPosition(x + 1, y - 1)) {\n        this.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x - 1, y - 1)) {\n        this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x, y - 1)) {\n        this.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x + 1, y + this.shipLength)) {\n        this.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x - 1, y + this.shipLength)) {\n        this.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n      }\n\n      if (this.checkPosition(x, y + this.shipLength)) {\n        this.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n      }\n    }\n  }\n};\n\nShip.prototype.checkPosition = function (x, y) {\n  let triger = false;\n\n  if (x < 10 && y < 10 && x >= 0 && y >= 0) {\n    triger = true;\n  }\n\n  return triger;\n}; // direction === 0 when the ship is facing north/south\n// direction === 1 when the ship is facing east/west\n\n\nShip.DIRECTION_VERTICAL = 0;\nShip.DIRECTION_HORIZONTAL = 1; // Tutorial Object\n// Constructor\n\nfunction Tutorial() {\n  this.currentStep = 0; // Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\n  this.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n} // Advances the tutorial to the next step\n\n\n_c5 = Tutorial;\n\nTutorial.prototype.nextStep = function () {\n  var humanGrid = document.querySelector('.human-player');\n  var computerGrid = document.querySelector('.computer-player');\n\n  switch (this.currentStep) {\n    case 0:\n      document.getElementById('roster-sidebar').setAttribute('class', 'highlight');\n      document.getElementById('step1').setAttribute('class', 'current-step');\n      this.currentStep++;\n      break;\n\n    case 1:\n      document.getElementById('roster-sidebar').removeAttribute('class');\n      document.getElementById('step1').removeAttribute('class');\n      humanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\n      document.getElementById('step2').setAttribute('class', 'current-step');\n      this.currentStep++;\n      break;\n\n    case 2:\n      document.getElementById('step2').removeAttribute('class');\n      var humanClasses = humanGrid.getAttribute('class');\n      humanClasses = humanClasses.replace(' highlight', '');\n      humanGrid.setAttribute('class', humanClasses);\n      this.currentStep++;\n      break;\n\n    case 3:\n      computerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\n      document.getElementById('step3').setAttribute('class', 'current-step');\n      this.currentStep++;\n      break;\n\n    case 4:\n      var computerClasses = computerGrid.getAttribute('class');\n      document.getElementById('step3').removeAttribute('class');\n      computerClasses = computerClasses.replace(' highlight', '');\n      computerGrid.setAttribute('class', computerClasses);\n      document.getElementById('step4').setAttribute('class', 'current-step');\n      this.currentStep++;\n      break;\n\n    case 5:\n      document.getElementById('step4').removeAttribute('class');\n      this.currentStep = 6;\n      this.showTutorial = false;\n      localStorage.setItem('showTutorial', false);\n      break;\n\n    default:\n      break;\n  }\n}; // AI Object\n// Optimal battleship-playing AI\n// Constructor\n\n\nfunction AI(gameObject) {\n  this.gameObject = gameObject;\n  this.virtualGrid = new Grid(Game.size);\n  this.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n  this.probGrid = []; // Probability Grid\n\n  this.initProbs();\n  this.updateProbs();\n}\n\n_c6 = AI;\nAI.PROB_WEIGHT = 5000; // arbitrarily big number\n// how much weight to give to the opening book's high probability cells\n\nAI.OPEN_HIGH_MIN = 20;\nAI.OPEN_HIGH_MAX = 30; // how much weight to give to the opening book's medium probability cells\n\nAI.OPEN_MED_MIN = 15;\nAI.OPEN_MED_MAX = 25; // how much weight to give to the opening book's low probability cells\n\nAI.OPEN_LOW_MIN = 10;\nAI.OPEN_LOW_MAX = 20; // Amount of randomness when selecting between cells of equal probability\n\nAI.RANDOMNESS = 0.1; // AI's opening book.\n// This is the pattern of the first cells for the AI to target\n\nAI.OPENINGS = [{\n  'x': 7,\n  'y': 3,\n  'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n}, {\n  'x': 6,\n  'y': 2,\n  'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n}, {\n  'x': 3,\n  'y': 7,\n  'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n}, {\n  'x': 2,\n  'y': 6,\n  'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n}, {\n  'x': 6,\n  'y': 6,\n  'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n}, {\n  'x': 3,\n  'y': 3,\n  'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n}, {\n  'x': 5,\n  'y': 5,\n  'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n}, {\n  'x': 4,\n  'y': 4,\n  'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n}, // {'x': 9, 'y': 5, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n// {'x': 0, 'y': 4, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n// {'x': 5, 'y': 9, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n// {'x': 4, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n{\n  'x': 0,\n  'y': 8,\n  'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n}, {\n  'x': 1,\n  'y': 9,\n  'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n}, {\n  'x': 8,\n  'y': 0,\n  'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n}, {\n  'x': 9,\n  'y': 1,\n  'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n}, {\n  'x': 9,\n  'y': 9,\n  'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n}, {\n  'x': 0,\n  'y': 0,\n  'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n}]; // Scouts the grid based on max probability, and shoots at the cell\n// that has the highest probability of containing a ship\n\nAI.prototype.shoot = function () {\n  var maxProbability = 0;\n  var maxProbCoords;\n  var maxProbs = []; // Add the AI's opening book to the probability grid\n\n  for (var i = 0; i < AI.OPENINGS.length; i++) {\n    var cell = AI.OPENINGS[i];\n\n    if (this.probGrid[cell.x][cell.y] !== 0) {\n      this.probGrid[cell.x][cell.y] += cell.weight;\n    }\n  }\n\n  for (var x = 0; x < Game.size; x++) {\n    for (var y = 0; y < Game.size; y++) {\n      if (this.probGrid[x][y] > maxProbability) {\n        maxProbability = this.probGrid[x][y];\n        maxProbs = [{\n          'x': x,\n          'y': y\n        }]; // Replace the array\n      } else if (this.probGrid[x][y] === maxProbability) {\n        maxProbs.push({\n          'x': x,\n          'y': y\n        });\n      }\n    }\n  }\n\n  maxProbCoords = Math.random() < AI.RANDOMNESS ? maxProbs[Math.floor(Math.random() * maxProbs.length)] : maxProbs[0];\n  var result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER); // If the game ends, the next lines need to be skipped.\n\n  if (Game.gameOver) {\n    Game.gameOver = false;\n    return;\n  }\n\n  this.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result; // If you hit a ship, check to make sure if you've sunk it.\n\n  if (result === CONST.TYPE_HIT) {\n    var humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\n    if (humanShip.isSunk()) {\n      // Remove any ships from the roster that have been sunk\n      var shipTypes = [];\n\n      for (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n        shipTypes.push(this.virtualFleet.fleetRoster[k].type);\n      }\n\n      var index = shipTypes.indexOf(humanShip.type);\n      this.virtualFleet.fleetRoster.splice(index, 1); // Update the virtual grid with the sunk ship's cells\n\n      var shipCells = humanShip.getAllShipCells();\n\n      for (var _i = 0; _i < shipCells.length; _i++) {\n        this.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n      }\n    }\n  } // Update probability grid after each shot\n\n\n  this.updateProbs();\n}; // Update the probability grid\n\n\nAI.prototype.updateProbs = function () {\n  var roster = this.virtualFleet.fleetRoster;\n  var coords;\n  this.resetProbs(); // Probabilities are not normalized to fit in the interval [0, 1]\n  // because we're only interested in the maximum value.\n  // This works by trying to fit each ship in each cell in every orientation\n  // For every cell, the more legal ways a ship can pass through it, the more\n  // likely the cell is to contain a ship.\n  // Cells that surround known 'hits' are given an arbitrarily large probability\n  // so that the AI tries to completely sink the ship before moving on.\n  // TODO: Think about a more efficient implementation\n\n  for (var k = 0; k < roster.length; k++) {\n    for (var x = 0; x < Game.size; x++) {\n      for (var y = 0; y < Game.size; y++) {\n        if (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n          roster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n          coords = roster[k].getAllShipCells();\n\n          if (this.passesThroughHitCell(coords)) {\n            for (var i = 0; i < coords.length; i++) {\n              this.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n            }\n          } else {\n            for (var _i = 0; _i < coords.length; _i++) {\n              this.probGrid[coords[_i].x][coords[_i].y]++;\n            }\n          }\n        }\n\n        if (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n          roster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n          coords = roster[k].getAllShipCells();\n\n          if (this.passesThroughHitCell(coords)) {\n            for (var j = 0; j < coords.length; j++) {\n              this.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n            }\n          } else {\n            for (var _j = 0; _j < coords.length; _j++) {\n              this.probGrid[coords[_j].x][coords[_j].y]++;\n            }\n          }\n        } // Set hit cells to probability zero so the AI doesn't\n        // target cells that are already hit\n\n\n        if (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n          this.probGrid[x][y] = 0;\n        }\n      }\n    }\n  }\n}; // Initializes the probability grid for targeting\n\n\nAI.prototype.initProbs = function () {\n  for (var x = 0; x < Game.size; x++) {\n    var row = [];\n    this.probGrid[x] = row;\n\n    for (var y = 0; y < Game.size; y++) {\n      row.push(0);\n    }\n  }\n}; // Resets the probability grid to all 0.\n\n\nAI.prototype.resetProbs = function () {\n  for (var x = 0; x < Game.size; x++) {\n    for (var y = 0; y < Game.size; y++) {\n      this.probGrid[x][y] = 0;\n    }\n  }\n};\n\nAI.prototype.metagame = function () {// Inputs:\n  // Proximity of hit cells to edge\n  // Proximity of hit cells to each other\n  // Edit the probability grid by multiplying each cell with a new probability weight (e.g. 0.4, or 3). Set this as a CONST and make 1-CONST the inverse for decreasing, or 2*CONST for increasing\n}; // Finds a human ship by coordinates\n// Returns Ship\n\n\nAI.prototype.findHumanShip = function (x, y) {\n  return this.gameObject.humanFleet.findShipByCoords(x, y);\n}; // Checks whether or not a given ship's cells passes through\n// any cell that is hit.\n// Returns boolean\n\n\nAI.prototype.passesThroughHitCell = function (shipCells) {\n  for (var i = 0; i < shipCells.length; i++) {\n    if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n      return true;\n    }\n  }\n\n  return false;\n}; // Gives the number of hit cells the ships passes through. The more\n// cells this is, the more probable the ship exists in those coordinates\n// Returns int\n\n\nAI.prototype.numHitCellsCovered = function (shipCells) {\n  var cells = 0;\n\n  for (var i = 0; i < shipCells.length; i++) {\n    if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n      cells++;\n    }\n  }\n\n  return cells;\n}; // Global constant only initialized once\n\n\nvar gameTutorial = new Tutorial(); // Start the game\n\nvar mainGame = new Game(10); // Browser compatability workaround for transition end event names.\n// From modernizr: http://stackoverflow.com/a/9090128\n\nfunction transitionEndEventName() {\n  var i,\n      undefined,\n      el = document.createElement('div'),\n      transitions = {\n    'transition': 'transitionend',\n    'OTransition': 'otransitionend',\n    // oTransitionEnd in very old Opera\n    'MozTransition': 'transitionend',\n    'WebkitTransition': 'webkitTransitionEnd'\n  };\n\n  for (i in transitions) {\n    if (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n      return transitions[i];\n    }\n  }\n} // Returns a random number between min (inclusive) and max (exclusive)\n\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}\n\nclass BattlesComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      battles: []\n    };\n  }\n\n  componentDidMount() {\n    Service.getAllBattles().then(res => {\n      this.setState({\n        battles: res.data.content\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Battles List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1147,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"restart-sidebar\",\n            className: \"hidden\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Try Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1151,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"restart-game\",\n              children: \"Restart Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1152,\n              columnNumber: 4\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1150,\n            columnNumber: 3\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"roster-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Place Your Ships\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1154,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"fleet-roster\",\n              id: \"fleet-roster\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.1\",\n                children: \"1 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1156,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.2\",\n                children: \"1 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1157,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.3\",\n                children: \"1 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1158,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.4\",\n                children: \"1 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1159,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.1\",\n                children: \"2 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1160,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.2\",\n                children: \"2 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1161,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.3\",\n                children: \"2 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1162,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"3.1\",\n                children: \"3 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1163,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"3.2\",\n                children: \"3 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1164,\n                columnNumber: 5\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"4.1\",\n                children: \"4 \\u0565\\u0580\\u056F\\u0561\\u0580\\u0578\\u0582\\u0569\\u0575\\u0561\\u0576\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1165,\n                columnNumber: 5\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1155,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"rotate-button\",\n              \"data-direction\": \"0\",\n              children: \"Rotate Ship\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1167,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"start-game\",\n              className: \"hidden\",\n              children: \"Start Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1168,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"place-randomly\",\n              className: \"hidden\",\n              children: \"Place Randomly and Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1169,\n              columnNumber: 4\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1153,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Your Fleet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1171,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid human-player\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"no-js\",\n                children: \"Please enable JavaScript to play this game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1172,\n                columnNumber: 39\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1172,\n              columnNumber: 4\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1170,\n            columnNumber: 9\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"grid-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Enemy Fleet\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1174,\n              columnNumber: 4\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid computer-player\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"no-js\",\n                children: \"Please enable JavaScript to play this game\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1175,\n                columnNumber: 42\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1175,\n              columnNumber: 4\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1173,\n            columnNumber: 9\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1149,\n          columnNumber: 1\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1148,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"script\", {\n        src: \"js/battleboat.js\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1180,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1181,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1182,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1183,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(Stylesheet, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1185,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1146,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default _c7 = withRouter(BattlesComponent);\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n\n$RefreshReg$(_c, \"Game\");\n$RefreshReg$(_c2, \"Grid\");\n$RefreshReg$(_c3, \"Fleet\");\n$RefreshReg$(_c4, \"Ship\");\n$RefreshReg$(_c5, \"Tutorial\");\n$RefreshReg$(_c6, \"AI\");\n$RefreshReg$(_c7, \"%default%\");","map":{"version":3,"sources":["/home/anushik/Desktop/dip/seebattle/src/components/GameComponent.jsx"],"names":["React","Component","Service","Link","withRouter","Stylesheet","CONST","AVAILABLE_SHIPS","HUMAN_PLAYER","COMPUTER_PLAYER","VIRTUAL_PLAYER","CSS_TYPE_EMPTY","CSS_TYPE_SHIP","CSS_TYPE_MISS","CSS_TYPE_HIT","CSS_TYPE_SUNK","TYPE_EMPTY","TYPE_SHIP","TYPE_MISS","TYPE_HIT","TYPE_SUNK","TYPE_NOT_ALLOWED","Game","usedShips","UNUSED","USED","size","shotsTaken","createGrid","init","gameOver","prototype","checkIfWon","computerFleet","allShipsSunk","alert","showRestartSidebar","humanFleet","shoot","x","y","targetPlayer","targetGrid","targetFleet","humanGrid","computerGrid","console","log","isDamagedShip","isMiss","isUndamagedShip","updateCell","findShipByCoords","incrementDamage","shootListener","e","self","target","parseInt","getAttribute","result","readyToPlay","gameTutorial","showTutorial","nextStep","robot","rosterListener","roster","document","querySelectorAll","i","length","classes","replace","setAttribute","currentStep","placeShipType","getElementById","placeShipDirection","placingOnGrid","placementListener","successful","placeShip","endPlacing","areAllShipsPlaced","el","addEventListener","transitionEndEventName","removeAttribute","placementMouseover","fleetRoster","shipType","type","isLegal","create","placeShipCoords","getAllShipCells","j","querySelector","indexOf","placementMouseout","toggleRotation","direction","Ship","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","startGame","fn","removeEventListener","restartGame","arguments","callee","resetFogOfWar","placeRandomly","placeShipsRandomly","playerRoster","map","resetRosterSidebar","els","sidebar","computerCells","childNodes","restartButton","gridDiv","grid","removeChild","createElement","appendChild","Grid","Fleet","AI","humanCells","k","rotateButton","startButton","randomButton","cells","row","push","player","join","playerGrid","numShips","populate","shipCoords","shipTypes","illegalPlacement","randomX","Math","floor","random","randomY","randomDirection","currentShip","yPosition","xPosition","shipLength","findShipByType","sunk","damage","maxDamage","withinBounds","isSunk","sinkShip","virtual","allCells","resultObject","checkPosition","triger","Tutorial","localStorage","getItem","humanClasses","computerClasses","setItem","gameObject","virtualGrid","virtualFleet","probGrid","initProbs","updateProbs","PROB_WEIGHT","OPEN_HIGH_MIN","OPEN_HIGH_MAX","OPEN_MED_MIN","OPEN_MED_MAX","OPEN_LOW_MIN","OPEN_LOW_MAX","RANDOMNESS","OPENINGS","getRandom","maxProbability","maxProbCoords","maxProbs","cell","weight","humanShip","findHumanShip","index","splice","shipCells","_i","coords","resetProbs","passesThroughHitCell","numHitCellsCovered","_j","metagame","mainGame","undefined","transitions","hasOwnProperty","style","min","max","BattlesComponent","constructor","props","state","battles","componentDidMount","getAllBattles","then","res","setState","data","content","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\nimport Stylesheet from './Stylesheet';\n\nvar CONST = {};\n\tCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1'];\n\t// You are player 0 and the computer is player 1\n\t// The virtual player is used for generating temporary ships\n\t// for calculating the probability heatmap\n\tCONST.HUMAN_PLAYER = 0;\n\tCONST.COMPUTER_PLAYER = 1;\n\tCONST.VIRTUAL_PLAYER = 2;\n\t// Possible values for the parameter `type` (string)\n\tCONST.CSS_TYPE_EMPTY = 'empty';\n\tCONST.CSS_TYPE_SHIP = 'ship';\n\tCONST.CSS_TYPE_MISS = 'miss';\n\tCONST.CSS_TYPE_HIT = 'hit';\n\tCONST.CSS_TYPE_SUNK = 'sunk';\n\t// Grid code:\n\tCONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\tCONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\tCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\tCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\tCONST.TYPE_SUNK = 4; // 4 = sunk ship\n\tCONST.TYPE_NOT_ALLOWED = 5;\n\n\tGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n\tCONST.USED = 1;\n\tCONST.UNUSED = 0;\n\n    function Game(size) {\n\t\tGame.size = size;\n\t\tthis.shotsTaken = 0;\n\t\tthis.createGrid();\n\t\tthis.init();\n\t}\n\tGame.size = 10; // Default grid size is 10x10\n\tGame.gameOver = false;\n\t// Checks if the game is won, and if it is, re-initializes the game\n\tGame.prototype.checkIfWon = function() {\n\t\tif (this.computerFleet.allShipsSunk()) {\n\t\t\talert('Congratulations, you win!');\n\t\t\tGame.gameOver = true;\n\t\t\t// Game.stats.wonGame();\n\t\t\t// Game.stats.syncStats();\n\t\t\t// Game.stats.updateStatsSidebar();\n\t\t\tthis.showRestartSidebar();\n\t\t} else if (this.humanFleet.allShipsSunk()) {\n\t\t\talert('Yarr! The computer sank all your ships. Try again.');\n\t\t\tGame.gameOver = true;\n\t\t\t// Game.stats.lostGame();\n\t\t\t// Game.stats.syncStats();\n\t\t\t// Game.stats.updateStatsSidebar();\n\t\t\tthis.showRestartSidebar();\n\t\t}\n\t};\n\t// Shoots at the target player on the grid.\n\t// Returns {int} Constants.TYPE: What the shot uncovered\n\tGame.prototype.shoot = function(x, y, targetPlayer) {\n\t\tlet targetGrid;\n\t\tlet targetFleet;\n\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\ttargetGrid = this.humanGrid;\n\t\t\ttargetFleet = this.humanFleet;\n\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\ttargetGrid = this.computerGrid;\n\t\t\ttargetFleet = this.computerFleet;\n\t\t} else {\n\t\t\t// Should never be called\n\t\t\tconsole.log(\"There was an error trying to find the correct player to target\");\n\t\t}\n\t\n\t\tif (targetGrid.isDamagedShip(x, y)) {\n\t\t\treturn null;\n\t\t} else if (targetGrid.isMiss(x, y)) {\n\t\t\treturn null;\n\t\t} else if (targetGrid.isUndamagedShip(x, y)) {\n\t\t\t// update the board/grid\n\t\t\ttargetGrid.updateCell(x, y, 'hit', targetPlayer);\n\t\t\t// IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n\t\t\t// because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\t\t\ttargetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\t\t\tthis.checkIfWon();\n\t\t\treturn CONST.TYPE_HIT;\n\t\t} else {\n\t\t\ttargetGrid.updateCell(x, y, 'miss', targetPlayer);\n\t\t\tthis.checkIfWon();\n\t\t\treturn CONST.TYPE_MISS;\n\t\t}\n\t};\n\t// Creates click event listeners on each one of the 100 grid cells\n\tGame.prototype.shootListener = function(e) {\n\t\tvar self = e.target.self;\n\t\t// Extract coordinates from event listener\n\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\tvar result = null;\n\t\tif (self.readyToPlay) {\n\t\t\tresult = self.shoot(x, y, CONST.COMPUTER_PLAYER);\n\t\n\t\t\t// Remove the tutorial arrow\n\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t}\n\t\t}\n\t\n\t\tif (result !== null && !Game.gameOver) {\n\t\t\t//Game.stats.incrementShots();\n\t\t\t// if (result === CONST.TYPE_HIT) {\n\t\t\t// \tGame.stats.hitShot();\n\t\t\t// }\n\t\t\t// The AI shoots iff the player clicks on a cell that he/she hasn't\n\t\t\t// already clicked on yet\n\t\t\tself.robot.shoot();\n\t\t} else {\n\t\t\tGame.gameOver = false;\n\t\t}\n\t};\n\t// Creates click event listeners on each of the ship names in the roster\n\tGame.prototype.rosterListener = function(e) {\n\t\tvar self = e.target.self;\n\t\t// Remove all classes of 'placing' from the fleet roster first\n\t\tvar roster = document.querySelectorAll('.fleet-roster li');\n\t\tfor (var i = 0; i < roster.length; i++) {\n\t\t\tvar classes = roster[i].getAttribute('class') || '';\n\t\t\tclasses = classes.replace('placing', '');\n\t\t\troster[i].setAttribute('class', classes);\n\t\t}\n\t\n\t\t// Move the highlight to the next step\n\t\tif (gameTutorial.currentStep === 1) {\n\t\t\tgameTutorial.nextStep();\n\t\t}\n\t\t\n\t\t// Set the class of the target ship to 'placing'\n\t\tGame.placeShipType = e.target.getAttribute('id');\n\t\tdocument.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n\t\tGame.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n\t\tself.placingOnGrid = true;\n\t};\n\t// Creates click event listeners on the human player's grid to handle\n\t// ship placement after the user has selected a ship name\n\tGame.prototype.placementListener = function(e) {\n\t\tvar self = e.target.self;\n\t\tif (self.placingOnGrid) {\n\t\t\t// Extract coordinates from event listener\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\t\n\t\t\t// Don't screw up the direction if the user tries to place again.\n\t\t\tvar successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\t\t\tif (successful) {\n\t\t\t\t// Done placing this ship\n\t\t\t\tself.endPlacing(Game.placeShipType);\n\t\n\t\t\t\t// Remove the helper arrow\n\t\t\t\tif (gameTutorial.currentStep === 2) {\n\t\t\t\t\tgameTutorial.nextStep();\n\t\t\t\t}\n\t\n\t\t\t\tself.placingOnGrid = false;\n\t\t\t\tif (self.areAllShipsPlaced()) {\n\t\t\t\t\tvar el = document.getElementById('rotate-button');\n\t\t\t\t\tel.addEventListener(transitionEndEventName(),(function(){\n\t\t\t\t\t\tel.setAttribute('class', 'hidden');\n\t\t\t\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\t\t\t\tdocument.getElementById('start-game').setAttribute('class', 'highlight');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdocument.getElementById('start-game').removeAttribute('class');\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}),false);\n\t\t\t\t\tel.setAttribute('class', 'invisible');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Creates mouseover event listeners that handles mouseover on the\n\t// human player's grid to draw a phantom ship implying that the user\n\t// is allowed to place a ship there\n\tGame.prototype.placementMouseover = function(e) {\n\t\tvar self = e.target.self;\n\t\tif (self.placingOnGrid) {\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\tvar classes;\n\t\t\tvar fleetRoster = self.humanFleet.fleetRoster;\n\t\n\t\t\tfor (var i = 0; i < fleetRoster.length; i++) {\n\t\t\t\tvar shipType = fleetRoster[i].type;\n\t\n\t\t\t\tif (Game.placeShipType === shipType &&\n\t\t\t\t\tfleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n\t\t\t\t\t// Virtual ship\n\t\t\t\t\tfleetRoster[i].create(x, y, Game.placeShipDirection, true);\n\t\t\t\t\tGame.placeShipCoords = fleetRoster[i].getAllShipCells();\n\t\n\t\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\t\t\tclasses = el.getAttribute('class');\n\t\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\t\t\tif (classes.indexOf(' grid-ship') < 0) {\n\t\t\t\t\t\t\tclasses += ' grid-ship';\n\t\t\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Creates mouseout event listeners that un-draws the phantom ship\n\t// on the human player's grid as the user hovers over a different cell\n\tGame.prototype.placementMouseout = function(e) {\n\t\tvar self = e.target.self;\n\t\tif (self.placingOnGrid) {\n\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\tvar classes = el.getAttribute('class');\n\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\tif (classes.indexOf(' grid-ship') > -1) {\n\t\t\t\t\tclasses = classes.replace(' grid-ship', '');\n\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Click handler for the Rotate Ship button\n\tGame.prototype.toggleRotation = function(e) {\n\t\t// Toggle rotation direction\n\t\tvar direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\te.target.setAttribute('data-direction', '1');\n\t\t\tGame.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n\t\t} else if (direction === Ship.DIRECTION_HORIZONTAL) {\n\t\t\te.target.setAttribute('data-direction', '0');\n\t\t\tGame.placeShipDirection = Ship.DIRECTION_VERTICAL;\n\t\t}\n\t};\n\t// Click handler for the Start Game button\n\tGame.prototype.startGame = function(e) {\n\t\tvar self = e.target.self;\n\t\tvar el = document.getElementById('roster-sidebar');\n\t\tvar fn = function() {el.setAttribute('class', 'hidden');};\n\t\tel.addEventListener(transitionEndEventName(),fn,false);\n\t\tel.setAttribute('class', 'invisible');\n\t\tself.readyToPlay = true;\n\t\n\t\t// Advanced the tutorial step\n\t\tif (gameTutorial.currentStep === 3) {\n\t\t\tgameTutorial.nextStep();\n\t\t}\n\t\tel.removeEventListener(transitionEndEventName(),fn,false);\n\t};\n\t// Click handler for Restart Game button\n\tGame.prototype.restartGame = function(e) {\n\t\te.target.removeEventListener(e.type, arguments.callee);\n\t\tvar self = e.target.self;\n\t\tdocument.getElementById('restart-sidebar').setAttribute('class', 'hidden');\n\t\tself.resetFogOfWar();\n\t\tself.init();\n\t};\n\t// Debugging function used to place all ships and just start\n\tGame.prototype.placeRandomly = function(e){\n\t\te.target.removeEventListener(e.type, arguments.callee);\n\t\te.target.self.humanFleet.placeShipsRandomly();\n\t\te.target.self.readyToPlay = true;\n\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n\t\tthis.setAttribute('class', 'hidden');\n\t};\n\t// Ends placing the current ship\n\tGame.prototype.endPlacing = function(shipType) {\n\t\tdocument.getElementById(shipType).setAttribute('class', 'placed');\n\t\t\n\t\t// Mark the ship as 'used'\n\t\tGame.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED;\n\t\n\t\t// Wipe out the variable when you're done with it\n\t\tGame.placeShipDirection = null;\n\t\tGame.placeShipType = '';\n\t\tGame.placeShipCoords = [];\n\t};\n\t// Checks whether or not all ships are done placing\n\t// Returns boolean\n\tGame.prototype.areAllShipsPlaced = function() {\n\t\tvar playerRoster = document.querySelectorAll('.fleet-roster li');\n\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\tif (playerRoster[i].getAttribute('class') === 'placed') {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Reset temporary variables\n\t\tGame.placeShipDirection = 0;\n\t\tGame.placeShipType = '';\n\t\tGame.placeShipCoords = [];\n\t\treturn true;\n\t};\n\t// Resets the fog of war\n\tGame.prototype.resetFogOfWar = function() {\n\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\tthis.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n\t\t\t\tthis.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n\t\t\t}\n\t\t}\n\t\t// Reset all values to indicate the ships are ready to be placed again\n\t\tGame.usedShips = Game.usedShips.map(function(){return CONST.UNUSED;});\n\t};\n\t// Resets CSS styling of the sidebar\n\tGame.prototype.resetRosterSidebar = function() {\n\t\tconsole.log(document.getElementById('fleet-roster'));\n\t\tvar els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\tfor (var i = 0; i < els.length; i++) {\n\t\t\tels[i].removeAttribute('class');\n\t\t}\n\t\n\t\tif (gameTutorial.showTutorial) {\n\t\t\tgameTutorial.nextStep();\n\t\t} else {\n\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t}\n\t\tdocument.getElementById('rotate-button').removeAttribute('class');\n\t\tdocument.getElementById('start-game').setAttribute('class', 'hidden');\n\t\t// if (DEBUG_MODE) {\n\t\t// \tdocument.getElementById('place-randomly').removeAttribute('class');\n\t\t// }\n\t};\n\tGame.prototype.showRestartSidebar = function() {\n\t\tvar sidebar = document.getElementById('restart-sidebar');\n\t\tsidebar.setAttribute('class', 'highlight');\n\t\n\t\t// Deregister listeners\n\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\tcomputerCells[j].removeEventListener('click', this.shootListener, false);\n\t\t}\n\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\tplayerRoster[i].removeEventListener('click', this.rosterListener, false);\n\t\t}\n\t\n\t\tvar restartButton = document.getElementById('restart-game');\n\t\trestartButton.addEventListener('click', this.restartGame, false);\n\t\trestartButton.self = this;\n\t};\n\t// Generates the HTML divs for the grid for both players\n\tGame.prototype.createGrid = function() {\n\t\tvar gridDiv = document.querySelectorAll('.grid');\n\t\tfor (var grid = 0; grid < gridDiv.length; grid++) {\n\t\t\tgridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\t\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\t\tvar el = document.createElement('div');\n\t\t\t\t\tel.setAttribute('data-x', i);\n\t\t\t\t\tel.setAttribute('data-y', j);\n\t\t\t\t\tel.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n\t\t\t\t\tgridDiv[grid].appendChild(el);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Initializes the Game. Also resets the game if previously initialized\n\tGame.prototype.init = function() {\n\t\tthis.humanGrid = new Grid(Game.size);\n\t\tthis.computerGrid = new Grid(Game.size);\n\t\tthis.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n\t\tthis.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n\t\n\t\tthis.robot = new AI(this);\n\t\t//Game.stats = new Stats();\n\t\t//Game.stats.updateStatsSidebar();\n\t\n\t\t// Reset game variables\n\t\tthis.shotsTaken = 0;\n\t\tthis.readyToPlay = false;\n\t\tthis.placingOnGrid = false;\n\t\tGame.placeShipDirection = 0;\n\t\tGame.placeShipType = '';\n\t\tGame.placeShipCoords = [];\n        this.resetRosterSidebar();\n\t\n\t\t// Add a click listener for the Grid.shoot() method for all cells\n\t\t// Only add this listener to the computer's grid\n\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\tcomputerCells[j].self = this;\n\t\t\tcomputerCells[j].addEventListener('click', this.shootListener, false);\n\t\t}\n\t\n\t\t// Add a click listener to the roster\t\n\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\tplayerRoster[i].self = this;\n\t\t\tplayerRoster[i].addEventListener('click', this.rosterListener, false);\n\t\t}\n\t\n\t\t// Add a click listener to the human player's grid while placing\n\t\tvar humanCells = document.querySelector('.human-player').childNodes;\n\t\tfor (var k = 0; k < humanCells.length; k++) {\n\t\t\thumanCells[k].self = this;\n\t\t\thumanCells[k].addEventListener('click', this.placementListener, false);\n\t\t\thumanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n\t\t\thumanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n\t\t}\n\t\n\t\tvar rotateButton = document.getElementById('rotate-button');\n\t\trotateButton.addEventListener('click', this.toggleRotation, false);\n\t\tvar startButton = document.getElementById('start-game');\n\t\tstartButton.self = this;\n\t\tstartButton.addEventListener('click', this.startGame, false);\n\t\t// var resetButton = document.getElementById('reset-stats');\n\t\t// resetButton.addEventListener('click', Game.stats.resetStats, false);\n\t\tvar randomButton = document.getElementById('place-randomly');\n\t\trandomButton.self = this;\n\t\trandomButton.addEventListener('click', this.placeRandomly, false);\n\t\tthis.computerFleet.placeShipsRandomly();\n\t};\n\t\n\t// Grid object\n\t// Constructor\n\tfunction Grid(size) {\n\t\tthis.size = size;\n\t\tthis.cells = [];\n\t\tthis.init();\n\t}\n\t\n\t// Initialize and populate the grid\n\tGrid.prototype.init = function() {\n\t\tfor (var x = 0; x < this.size; x++) {\n\t\t\tvar row = [];\n\t\t\tthis.cells[x] = row;\n\t\t\tfor (var y = 0; y < this.size; y++) {\n\t\t\t\trow.push(CONST.TYPE_EMPTY);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Updates the cell's CSS class based on the type passed in\n\tGrid.prototype.updateCell = function(x, y, type, targetPlayer) {\n\t\tvar player;\n\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\tplayer = 'human-player';\n\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\tplayer = 'computer-player';\n\t\t} else {\n\t\t\t// Should never be called\n\t\t\tconsole.log(\"There was an error trying to find the correct player's grid\");\n\t\t}\n\t\n\t\tswitch (type) {\n\t\t\tcase CONST.CSS_TYPE_EMPTY:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\tbreak;\n\t\t\tcase CONST.CSS_TYPE_SHIP:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_SHIP;\n\t\t\t\tbreak;\n\t\t\tcase CONST.CSS_TYPE_MISS:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_MISS;\n\t\t\t\tbreak;\n\t\t\tcase CONST.CSS_TYPE_HIT:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_HIT;\n\t\t\t\tbreak;\n\t\t\tcase CONST.CSS_TYPE_SUNK:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_SUNK;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\tbreak;\n\t\t}\n\t\tvar classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n\t\tdocument.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n\t};\n\t// Checks to see if a cell contains an undamaged ship\n\t// Returns boolean\n\tGrid.prototype.isUndamagedShip = function(x, y) {\n\t\treturn this.cells[x][y] === CONST.TYPE_SHIP;\n\t};\n\t// Checks to see if the shot was missed. This is equivalent\n\t// to checking if a cell contains a cannonball\n\t// Returns boolean\n\tGrid.prototype.isMiss = function(x, y) {\n\t\treturn this.cells[x][y] === CONST.TYPE_MISS;\n\t};\n\t// Checks to see if a cell contains a damaged ship,\n\t// either hit or sunk.\n\t// Returns boolean\n\tGrid.prototype.isDamagedShip = function(x, y) {\n\t\treturn this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n\t};\n\t\n\t// Fleet object\n\t// This object is used to keep track of a player's portfolio of ships\n\t// Constructor\n\tfunction Fleet(playerGrid, player) {\n\t\tthis.numShips = CONST.AVAILABLE_SHIPS.length;\n\t\tthis.playerGrid = playerGrid;\n\t\tthis.player = player;\n\t\tthis.fleetRoster = [];\n\t\tthis.populate();\n\t}\n\t// Populates a fleet\n\tFleet.prototype.populate = function() {\n\t\tfor (var i = 0; i < this.numShips; i++) {\n\t\t\t// loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n\t\t\tvar j = i % CONST.AVAILABLE_SHIPS.length;\n\t\t\tthis.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n\t\t}\n\t};\n\t// Places the ship and returns whether or not the placement was successful\n\t// Returns boolean\n\tFleet.prototype.placeShip = function(x, y, direction, shipType) {\n\t\tvar shipCoords;\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\tvar shipTypes = this.fleetRoster[i].type;\n\t\n\t\t\tif (shipType === shipTypes &&\n\t\t\t\tthis.fleetRoster[i].isLegal(x, y, direction)) {\n\t\t\t\tthis.fleetRoster[i].create(x, y, direction, false);\n\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\n\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\t// Places ships randomly on the board\n\t// TODO: Avoid placing ships too close to each other\n\tFleet.prototype.placeShipsRandomly = function() {\n\t\tvar shipCoords;\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\tvar illegalPlacement = true;\n\t\t\n\t\t\t// Prevents the random placement of already placed ships\n\t\t\tif(this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\twhile (illegalPlacement) {\n\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\n\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\n\t\t\t\tvar randomDirection = Math.floor(2*Math.random());\n\t\t\t\t\n\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\t\t\tillegalPlacement = false;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t\tGame.usedShips[i] = CONST.USED;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Finds a ship by location\n\t// Returns the ship object located at (x, y)\n\t// If no ship exists at (x, y), this returns null instead\n\tFleet.prototype.findShipByCoords = function(x, y) {\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\tvar currentShip = this.fleetRoster[i];\n\t\t\tif (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\tif (y === currentShip.yPosition &&\n\t\t\t\t\tx >= currentShip.xPosition &&\n\t\t\t\t\tx < currentShip.xPosition + currentShip.shipLength) {\n\t\t\t\t\treturn currentShip;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (x === currentShip.xPosition &&\n\t\t\t\t\ty >= currentShip.yPosition &&\n\t\t\t\t\ty < currentShip.yPosition + currentShip.shipLength) {\n\t\t\t\t\treturn currentShip;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t// Finds a ship by its type\n\t// Param shipType is a string\n\t// Returns the ship object that is of type shipType\n\t// If no ship exists, this returns null.\n\tFleet.prototype.findShipByType = function(shipType) {\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\tif (this.fleetRoster[i].type === shipType) {\n\t\t\t\treturn this.fleetRoster[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t// Checks to see if all ships have been sunk\n\t// Returns boolean\n\tFleet.prototype.allShipsSunk = function() {\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t// If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n\t\t\tif (this.fleetRoster[i].sunk === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\t// Ship object\n\t// Constructor\n\tfunction Ship(type, playerGrid, player) {\n\t\tthis.damage = 0;\n\t\tthis.type = type;\n\t\tthis.playerGrid = playerGrid;\n\t\tthis.player = player;\n\t\n\t\tswitch (this.type) {\n\t\t\tcase CONST.AVAILABLE_SHIPS[0]:\n\t\t\t\tthis.shipLength = 1;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[1]:\n\t\t\t\tthis.shipLength = 1;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[2]:\n\t\t\t\tthis.shipLength = 1;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[3]:\n\t\t\t\tthis.shipLength = 1;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[4]:\n\t\t\t\tthis.shipLength = 2;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[5]:\n\t\t\t\tthis.shipLength = 2;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[6]:\n\t\t\t\tthis.shipLength = 2;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[7]:\n\t\t\t\tthis.shipLength = 3;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[8]:\n\t\t\t\tthis.shipLength = 3;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[9]:\n\t\t\t\tthis.shipLength = 4;\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.maxDamage = this.shipLength;\n\t\tthis.sunk = false;\n\t}\n\t// Checks to see if the placement of a ship is legal\n\t// Returns boolean\n\tShip.prototype.isLegal = function(x, y, direction) {\n\t\t// first, check if the ship is within the grid...\n\t\tif (this.withinBounds(x, y, direction)) {\n\t\t\t// ...then check to make sure it doesn't collide with another ship\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tif (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_MISS ||\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_MISS ||\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\t// Checks to see if the ship is within bounds of the grid\n\t// Returns boolean\n\tShip.prototype.withinBounds = function(x, y, direction) {\n\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\treturn x + this.shipLength <= Game.size;\n\t\t} else {\n\t\t\treturn y + this.shipLength <= Game.size;\n\t\t}\n\t};\n\t\n\t// Increments the damage counter of a ship\n\t// Returns Ship\n\tShip.prototype.incrementDamage = function() {\n\t\tthis.damage++;\n\t\tif (this.isSunk()) {\n\t\t\tthis.sinkShip(false); // Sinks the ship\n\t\t}\n\t};\n\t// Checks to see if the ship is sunk\n\t// Returns boolean\n\tShip.prototype.isSunk = function() {\n\t\treturn this.damage >= this.maxDamage;\n\t};\n\t// Sinks the ship\n\tShip.prototype.sinkShip = function(virtual) {\n\t\tthis.damage = this.maxDamage; // Force the damage to exceed max damage\n\t\tthis.sunk = true;\n\t\n\t\t// Make the CSS class sunk, but only if the ship is not virtual\n\t\tif (!virtual) {\n\t\t\tvar allCells = this.getAllShipCells();\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tthis.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * Gets all the ship cells\n\t *\n\t * Returns an array with all (x, y) coordinates of the ship:\n\t * e.g.\n\t * [\n\t *\t{'x':2, 'y':2},\n\t *\t{'x':3, 'y':2},\n\t *\t{'x':4, 'y':2}\n\t * ]\n\t */\n\tShip.prototype.getAllShipCells = function() {\n\t\tvar resultObject = [];\n\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\tresultObject[i] = {'x': this.xPosition + i, 'y': this.yPosition};\n\t\t\t} else {\n\t\t\t\tresultObject[i] = {'x': this.xPosition, 'y': this.yPosition + i};\n\t\t\t}\n\t\t}\n\t\treturn resultObject;\n\t};\n\t// Initializes a ship with the given coordinates and direction (bearing).\n\t// If the ship is declared \"virtual\", then the ship gets initialized with\n\t// its coordinates but DOESN'T get placed on the grid.\n\tShip.prototype.create = function(x, y, direction, virtual) {\n\t\t// This function assumes that you've already checked that the placement is legal\n\t\tthis.xPosition = x;\n\t\tthis.yPosition = y;\n\t\tthis.direction = direction;\n\t\n\t\t// If the ship is virtual, don't add it to the grid.\n\t\tif (!virtual) {\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tthis.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n\t\t\t\t\tif(this.checkPosition(x + i, y + 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x + i, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\t\t\t\t\t\n\t\t\t\t\tif(this.checkPosition(x + 1, y + i)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x - 1, y + i)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\tif(this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x - 1, y)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x - 1, y + 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x + this.shipLength, y - 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x + this.shipLength, y)) {\n\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED; \n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x + this.shipLength, y + 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif(this.checkPosition(x + 1, y - 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x, y-1)) {\n\t\t\t\t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x + 1, y + this.shipLength)) {\n\t\t\t\t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x - 1, y + this.shipLength)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x, y + this.shipLength)) {\n\t\t\t\t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t};\n\n\tShip.prototype.checkPosition = function(x, y) {\n\t\tlet triger = false;\n\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\n\t\t\ttriger = true;\n\t\t}\n\t\treturn triger\n\t};\n\t// direction === 0 when the ship is facing north/south\n\t// direction === 1 when the ship is facing east/west\n\tShip.DIRECTION_VERTICAL = 0;\n\tShip.DIRECTION_HORIZONTAL = 1;\n\t\n\t// Tutorial Object\n\t// Constructor\n\tfunction Tutorial() {\n\t\tthis.currentStep = 0;\n\t\t// Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\t\tthis.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n\t}\n\t// Advances the tutorial to the next step\n\tTutorial.prototype.nextStep = function() {\n\t\tvar humanGrid = document.querySelector('.human-player');\n\t\tvar computerGrid = document.querySelector('.computer-player');\n\t\tswitch (this.currentStep) {\n\t\t\tcase 0:\n\t\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'highlight');\n\t\t\t\tdocument.getElementById('step1').setAttribute('class', 'current-step');\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t\t\tdocument.getElementById('step1').removeAttribute('class');\n\t\t\t\thumanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\n\t\t\t\tdocument.getElementById('step2').setAttribute('class', 'current-step');\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tdocument.getElementById('step2').removeAttribute('class');\n\t\t\t\tvar humanClasses = humanGrid.getAttribute('class');\n\t\t\t\thumanClasses = humanClasses.replace(' highlight', '');\n\t\t\t\thumanGrid.setAttribute('class', humanClasses);\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcomputerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\n\t\t\t\tdocument.getElementById('step3').setAttribute('class', 'current-step');\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tvar computerClasses = computerGrid.getAttribute('class');\n\t\t\t\tdocument.getElementById('step3').removeAttribute('class');\n\t\t\t\tcomputerClasses = computerClasses.replace(' highlight', '');\n\t\t\t\tcomputerGrid.setAttribute('class', computerClasses);\n\t\t\t\tdocument.getElementById('step4').setAttribute('class', 'current-step');\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tdocument.getElementById('step4').removeAttribute('class');\n\t\t\t\tthis.currentStep = 6;\n\t\t\t\tthis.showTutorial = false;\n\t\t\t\tlocalStorage.setItem('showTutorial', false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\t\n\t// AI Object\n\t// Optimal battleship-playing AI\n\t// Constructor\n\tfunction AI(gameObject) {\n\t\tthis.gameObject = gameObject;\n\t\tthis.virtualGrid = new Grid(Game.size);\n\t\tthis.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n\t\n\t\tthis.probGrid = []; // Probability Grid\n\t\tthis.initProbs();\n\t\tthis.updateProbs();\n\t}\n\tAI.PROB_WEIGHT = 5000; // arbitrarily big number\n\t// how much weight to give to the opening book's high probability cells\n\tAI.OPEN_HIGH_MIN = 20;\n\tAI.OPEN_HIGH_MAX = 30;\n\t// how much weight to give to the opening book's medium probability cells\n\tAI.OPEN_MED_MIN = 15;\n\tAI.OPEN_MED_MAX = 25;\n\t// how much weight to give to the opening book's low probability cells\n\tAI.OPEN_LOW_MIN = 10;\n\tAI.OPEN_LOW_MAX = 20;\n\t// Amount of randomness when selecting between cells of equal probability\n\tAI.RANDOMNESS = 0.1;\n\t// AI's opening book.\n\t// This is the pattern of the first cells for the AI to target\n\tAI.OPENINGS = [\n\t\t{'x': 7, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 6, 'y': 2, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 3, 'y': 7, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 2, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 6, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 3, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 5, 'y': 5, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 4, 'y': 4, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t// {'x': 9, 'y': 5, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t// {'x': 0, 'y': 4, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t// {'x': 5, 'y': 9, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t// {'x': 4, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t{'x': 0, 'y': 8, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t{'x': 1, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t{'x': 8, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t{'x': 9, 'y': 1, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t{'x': 9, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t{'x': 0, 'y': 0, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)}\n\t];\n\t// Scouts the grid based on max probability, and shoots at the cell\n\t// that has the highest probability of containing a ship\n\tAI.prototype.shoot = function() {\n\t\tvar maxProbability = 0;\n\t\tvar maxProbCoords;\n\t\tvar maxProbs = [];\n\t\t\n\t\t// Add the AI's opening book to the probability grid\n\t\tfor (var i = 0; i < AI.OPENINGS.length; i++) {\n\t\t\tvar cell = AI.OPENINGS[i];\n\t\t\tif (this.probGrid[cell.x][cell.y] !== 0) {\n\t\t\t\tthis.probGrid[cell.x][cell.y] += cell.weight;\n\t\t\t}\n\t\t}\n\t\n\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\tif (this.probGrid[x][y] > maxProbability) {\n\t\t\t\t\tmaxProbability = this.probGrid[x][y];\n\t\t\t\t\tmaxProbs = [{'x': x, 'y': y}]; // Replace the array\n\t\t\t\t} else if (this.probGrid[x][y] === maxProbability) {\n\t\t\t\t\tmaxProbs.push({'x': x, 'y': y});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tmaxProbCoords = Math.random() < AI.RANDOMNESS ?\n\t\tmaxProbs[Math.floor(Math.random() * maxProbs.length)] :\n\t\tmaxProbs[0];\n\t\n\t\tvar result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER);\n\t\t\n\t\t// If the game ends, the next lines need to be skipped.\n\t\tif (Game.gameOver) {\n\t\t\tGame.gameOver = false;\n\t\t\treturn;\n\t\t}\n\t\n\t\tthis.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result;\n\t\n\t\t// If you hit a ship, check to make sure if you've sunk it.\n\t\tif (result === CONST.TYPE_HIT) {\n\t\t\tvar humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\t\t\tif (humanShip.isSunk()) {\n\t\t\t\t// Remove any ships from the roster that have been sunk\n\t\t\t\tvar shipTypes = [];\n\t\t\t\tfor (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n\t\t\t\t\tshipTypes.push(this.virtualFleet.fleetRoster[k].type);\n\t\t\t\t}\n\t\t\t\tvar index = shipTypes.indexOf(humanShip.type);\n\t\t\t\tthis.virtualFleet.fleetRoster.splice(index, 1);\n\t\n\t\t\t\t// Update the virtual grid with the sunk ship's cells\n\t\t\t\tvar shipCells = humanShip.getAllShipCells();\n\t\t\t\tfor (var _i = 0; _i < shipCells.length; _i++) {\n\t\t\t\t\tthis.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Update probability grid after each shot\n\t\tthis.updateProbs();\n\t};\n\t// Update the probability grid\n\tAI.prototype.updateProbs = function() {\n\t\tvar roster = this.virtualFleet.fleetRoster;\n\t\tvar coords;\n\t\tthis.resetProbs();\n\t\n\t\t// Probabilities are not normalized to fit in the interval [0, 1]\n\t\t// because we're only interested in the maximum value.\n\t\n\t\t// This works by trying to fit each ship in each cell in every orientation\n\t\t// For every cell, the more legal ways a ship can pass through it, the more\n\t\t// likely the cell is to contain a ship.\n\t\t// Cells that surround known 'hits' are given an arbitrarily large probability\n\t\t// so that the AI tries to completely sink the ship before moving on.\n\t\n\t\t// TODO: Think about a more efficient implementation\n\t\tfor (var k = 0; k < roster.length; k++) {\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\tfor (var i = 0; i < coords.length; i++) {\n\t\t\t\t\t\t\t\tthis.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var _i = 0; _i < coords.length; _i++) {\n\t\t\t\t\t\t\t\tthis.probGrid[coords[_i].x][coords[_i].y]++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\tfor (var j = 0; j < coords.length; j++) {\n\t\t\t\t\t\t\t\tthis.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var _j = 0; _j < coords.length; _j++) {\n\t\t\t\t\t\t\t\tthis.probGrid[coords[_j].x][coords[_j].y]++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Set hit cells to probability zero so the AI doesn't\n\t\t\t\t\t// target cells that are already hit\n\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n\t\t\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Initializes the probability grid for targeting\n\tAI.prototype.initProbs = function() {\n\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\tvar row = [];\n\t\t\tthis.probGrid[x] = row;\n\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\trow.push(0);\n\t\t\t}\n\t\t}\n\t};\n\t// Resets the probability grid to all 0.\n\tAI.prototype.resetProbs = function() {\n\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t}\n\t\t}\n\t};\n\tAI.prototype.metagame = function() {\n\t\t// Inputs:\n\t\t// Proximity of hit cells to edge\n\t\t// Proximity of hit cells to each other\n\t\t// Edit the probability grid by multiplying each cell with a new probability weight (e.g. 0.4, or 3). Set this as a CONST and make 1-CONST the inverse for decreasing, or 2*CONST for increasing\n\t};\n\t// Finds a human ship by coordinates\n\t// Returns Ship\n\tAI.prototype.findHumanShip = function(x, y) {\n\t\treturn this.gameObject.humanFleet.findShipByCoords(x, y);\n\t};\n\t// Checks whether or not a given ship's cells passes through\n\t// any cell that is hit.\n\t// Returns boolean\n\tAI.prototype.passesThroughHitCell = function(shipCells) {\n\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\t// Gives the number of hit cells the ships passes through. The more\n\t// cells this is, the more probable the ship exists in those coordinates\n\t// Returns int\n\tAI.prototype.numHitCellsCovered = function(shipCells) {\n\t\tvar cells = 0;\n\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\tcells++;\n\t\t\t}\n\t\t}\n\t\treturn cells;\n\t};\n\t\n\t// Global constant only initialized once\n\tvar gameTutorial = new Tutorial();\n\t\n\t// Start the game\n\tvar mainGame = new Game(10);\n\n\t\n\t// Browser compatability workaround for transition end event names.\n\t// From modernizr: http://stackoverflow.com/a/9090128\n\tfunction transitionEndEventName() {\n\t\tvar i,\n\t\t\tundefined,\n\t\t\tel = document.createElement('div'),\n\t\t\ttransitions = {\n\t\t\t\t'transition':'transitionend',\n\t\t\t\t'OTransition':'otransitionend',  // oTransitionEnd in very old Opera\n\t\t\t\t'MozTransition':'transitionend',\n\t\t\t\t'WebkitTransition':'webkitTransitionEnd'\n\t\t\t};\n\n\t\tfor (i in transitions) {\n\t\t\tif (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n\t\t\t\treturn transitions[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Returns a random number between min (inclusive) and max (exclusive)\n\tfunction getRandom(min, max) {\n\t\treturn Math.random() * (max - min) + min;\n\t}\n\nclass BattlesComponent extends Component {\n    constructor(props){\n        super(props);\n        this.state={\n            battles: []\n        }\n    }\n    componentDidMount(){\n        Service.getAllBattles().then((res) => {\n            this.setState({battles: res.data.content});\n        });\n    }\n    render() {\n        return (\n            <div className=\"container text-center\">\n                <h2>Battles List</h2>\n            <div className=\"game-container\">\n<div className=\"game-container\">\n\t\t<div id=\"restart-sidebar\" className=\"hidden\">\n\t\t\t<h2>Try Again</h2>\n\t\t\t<button id=\"restart-game\">Restart Game</button>\n\t\t</div><div id=\"roster-sidebar\">\n\t\t\t<h2>Place Your Ships</h2>\n\t\t\t<ul className=\"fleet-roster\" id=\"fleet-roster\">\n\t\t\t\t<li id=\"1.1\">1 երկարության</li>\n\t\t\t\t<li id=\"1.2\">1 երկարության</li>\n\t\t\t\t<li id=\"1.3\">1 երկարության</li>\n\t\t\t\t<li id=\"1.4\">1 երկարության</li>\n\t\t\t\t<li id=\"2.1\">2 երկարության</li>\n\t\t\t\t<li id=\"2.2\">2 երկարության</li>\n\t\t\t\t<li id=\"2.3\">2 երկարության</li>\n\t\t\t\t<li id=\"3.1\">3 երկարության</li>\n\t\t\t\t<li id=\"3.2\">3 երկարության</li>\n\t\t\t\t<li id=\"4.1\">4 երկարության</li>\n\t\t\t</ul>\n\t\t\t<button id=\"rotate-button\" data-direction=\"0\">Rotate Ship</button>\n\t\t\t<button id=\"start-game\" className=\"hidden\">Start Game</button>\n\t\t\t<button id=\"place-randomly\" className=\"hidden\">Place Randomly and Start</button>\n\t\t</div><div className=\"grid-container\">\n\t\t\t<h2>Your Fleet</h2>\n\t\t\t<div className=\"grid human-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\n\t\t</div><div className=\"grid-container\">\n\t\t\t<h2>Enemy Fleet</h2>\n\t\t\t<div className=\"grid computer-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\n\t\t</div>\n\t</div>\n\t\n</div>\n<script src=\"js/battleboat.js\"></script>\n<span className=\"prefetch\" id=\"prefetch1\"></span>\n<span className=\"prefetch\" id=\"prefetch2\"></span>\n<span className=\"prefetch\" id=\"prefetch3\"></span>\n\n<Stylesheet />\n            </div>\n        );\n    }\n}\n\nexport default withRouter(BattlesComponent);"]},"metadata":{},"sourceType":"module"}