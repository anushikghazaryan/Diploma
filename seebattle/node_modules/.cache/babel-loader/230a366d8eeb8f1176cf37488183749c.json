{"ast":null,"code":"(function () {\n  // Global Constants\n  var CONST = {};\n  CONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1']; // You are player 0 and the computer is player 1\n  // The virtual player is used for generating temporary ships\n  // for calculating the probability heatmap\n\n  CONST.HUMAN_PLAYER = 0;\n  CONST.COMPUTER_PLAYER = 1;\n  CONST.VIRTUAL_PLAYER = 2; // Possible values for the parameter `type` (string)\n\n  CONST.CSS_TYPE_EMPTY = 'empty';\n  CONST.CSS_TYPE_SHIP = 'ship';\n  CONST.CSS_TYPE_MISS = 'miss';\n  CONST.CSS_TYPE_HIT = 'hit';\n  CONST.CSS_TYPE_SUNK = 'sunk'; // Grid code:\n\n  CONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\n  CONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\n  CONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\n  CONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\n  CONST.TYPE_SUNK = 4; // 4 = sunk ship\n\n  CONST.TYPE_NOT_ALLOWED = 5;\n  Game.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n  CONST.USED = 1;\n  CONST.UNUSED = 0; // // Game Statistics\n  // function Stats(){\n  // \tthis.shotsTaken = 0;\n  // \tthis.shotsHit = 0;\n  // \tthis.totalShots = parseInt(localStorage.getItem('totalShots'), 10) || 0;\n  // \tthis.totalHits = parseInt(localStorage.getItem('totalHits'), 10) || 0;\n  // \tthis.gamesPlayed = parseInt(localStorage.getItem('gamesPlayed'), 10) || 0;\n  // \tthis.gamesWon = parseInt(localStorage.getItem('gamesWon'), 10) || 0;\n  // \tthis.uuid = localStorage.getItem('uuid') || this.createUUID();\n  // }\n  // Stats.prototype.incrementShots = function() {\n  // \tthis.shotsTaken++;\n  // };\n  // Stats.prototype.hitShot = function() {\n  // \tthis.shotsHit++;\n  // };\n  // Stats.prototype.wonGame = function() {\n  // \tthis.gamesPlayed++;\n  // \tthis.gamesWon++;\n  // };\n  // Stats.prototype.lostGame = function() {\n  // \tthis.gamesPlayed++;\n  // };\n  // // Saves the game statistics to localstorage, also uploads where the user placed\n  // // their ships to Google Analytics so that in the future I'll be able to see\n  // // which cells humans are disproportionately biased to place ships on.\n  // Stats.prototype.syncStats = function() {\n  // \tif(!this.skipCurrentGame) {\n  // \t\tvar totalShots = parseInt(localStorage.getItem('totalShots'), 10) || 0;\n  // \t\ttotalShots += this.shotsTaken;\n  // \t\tvar totalHits = parseInt(localStorage.getItem('totalHits'), 10) || 0;\n  // \t\ttotalHits += this.shotsHit;\n  // \t\tlocalStorage.setItem('totalShots', totalShots);\n  // \t\tlocalStorage.setItem('totalHits', totalHits);\n  // \t\tlocalStorage.setItem('gamesPlayed', this.gamesPlayed);\n  // \t\tlocalStorage.setItem('gamesWon', this.gamesWon);\n  // \t\tlocalStorage.setItem('uuid', this.uuid);\n  // \t} else {\n  // \t\tthis.skipCurrentGame = false;\n  // \t}\n  //\n  // \tvar stringifiedGrid = '';\n  // \tfor (var x = 0; x < Game.size; x++) {\n  // \t\tfor (var y = 0; y < Game.size; y++) {\n  // \t\t\tstringifiedGrid += '(' + x + ',' + y + '):' + mainGame.humanGrid.cells[x][y] + ';\\n';\n  // \t\t}\n  // \t}\n  // };\n  // // Updates the sidebar display with the current statistics\n  // Stats.prototype.updateStatsSidebar = function() {\n  // \tvar elWinPercent = document.getElementById('stats-wins');\n  // \tvar elAccuracy = document.getElementById('stats-accuracy');\n  // \telWinPercent.innerHTML = this.gamesWon + \" of \" + this.gamesPlayed;\n  // \telAccuracy.innerHTML = Math.round((100 * this.totalHits / this.totalShots) || 0) + \"%\";\n  // };\n  // // Reset all game vanity statistics to zero. Doesn't reset your uuid.\n  // Stats.prototype.resetStats = function(e) {\n  // \t// Skip tracking stats until the end of the current game or else\n  // \t// the accuracy percentage will be wrong (since you are tracking\n  // \t// hits that didn't start from the beginning of the game)\n  // \tGame.stats.skipCurrentGame = true;\n  // \tlocalStorage.setItem('totalShots', 0);\n  // \tlocalStorage.setItem('totalHits', 0);\n  // \tlocalStorage.setItem('gamesPlayed', 0);\n  // \tlocalStorage.setItem('gamesWon', 0);\n  // \tlocalStorage.setItem('showTutorial', true);\n  // \tGame.stats.shotsTaken = 0;\n  // \tGame.stats.shotsHit = 0;\n  // \tGame.stats.totalShots = 0;\n  // \tGame.stats.totalHits = 0;\n  // \tGame.stats.gamesPlayed = 0;\n  // \tGame.stats.gamesWon = 0;\n  // \tGame.stats.updateStatsSidebar();\n  // };\n  // Stats.prototype.createUUID = function(len, radix) {\n  // \t/*!\n  // \tMath.uuid.js (v1.4)\n  // \thttp://www.broofa.com\n  // \tmailto:robert@broofa.com\n  // \tCopyright (c) 2010 Robert Kieffer\n  // \tDual licensed under the MIT and GPL licenses.\n  // \t*/\n  // \tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split(''),\n  // \tuuid = [], i;\n  // \tradix = radix || chars.length;\n  //\n  // \tif (len) {\n  // \t\t// Compact form\n  // \t\tfor (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n  // \t} else {\n  // \t\t// rfc4122, version 4 form\n  // \t\tvar r;\n  //\n  // \t\t// rfc4122 requires these characters\n  // \t\tuuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n  // \t\tuuid[14] = '4';\n  //\n  // \t\t// Fill in random data.  At i==19 set the high bits of clock sequence as\n  // \t\t// per rfc4122, sec. 4.1.5\n  // \t\tfor (i = 0; i < 36; i++) {\n  // \t\t\tif (!uuid[i]) {\n  // \t\t\t\tr = 0 | Math.random()*16;\n  // \t\t\t\tuuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  //\n  // \treturn uuid.join('');\n  // };\n  // Game manager object\n  // Constructor\n\n  function Game(size) {\n    Game.size = size;\n    this.shotsTaken = 0;\n    this.createGrid();\n    this.init();\n  }\n\n  Game.size = 10; // Default grid size is 10x10\n\n  Game.gameOver = false; // Checks if the game is won, and if it is, re-initializes the game\n\n  Game.prototype.checkIfWon = function () {\n    if (this.computerFleet.allShipsSunk()) {\n      alert('Congratulations, you win!');\n      Game.gameOver = true; // Game.stats.wonGame();\n      // Game.stats.syncStats();\n      // Game.stats.updateStatsSidebar();\n\n      this.showRestartSidebar();\n    } else if (this.humanFleet.allShipsSunk()) {\n      alert('Yarr! The computer sank all your ships. Try again.');\n      Game.gameOver = true; // Game.stats.lostGame();\n      // Game.stats.syncStats();\n      // Game.stats.updateStatsSidebar();\n\n      this.showRestartSidebar();\n    }\n  }; // Shoots at the target player on the grid.\n  // Returns {int} Constants.TYPE: What the shot uncovered\n\n\n  Game.prototype.shoot = function (x, y, targetPlayer) {\n    let targetGrid;\n    let targetFleet;\n\n    if (targetPlayer === CONST.HUMAN_PLAYER) {\n      targetGrid = this.humanGrid;\n      targetFleet = this.humanFleet;\n    } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n      targetGrid = this.computerGrid;\n      targetFleet = this.computerFleet;\n    } else {\n      // Should never be called\n      console.log(\"There was an error trying to find the correct player to target\");\n    }\n\n    if (targetGrid.isDamagedShip(x, y)) {\n      return null;\n    } else if (targetGrid.isMiss(x, y)) {\n      return null;\n    } else if (targetGrid.isUndamagedShip(x, y)) {\n      // update the board/grid\n      targetGrid.updateCell(x, y, 'hit', targetPlayer); // IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n      // because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\n      targetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\n      this.checkIfWon();\n      return CONST.TYPE_HIT;\n    } else {\n      targetGrid.updateCell(x, y, 'miss', targetPlayer);\n      this.checkIfWon();\n      return CONST.TYPE_MISS;\n    }\n  }; // Creates click event listeners on each one of the 100 grid cells\n\n\n  Game.prototype.shootListener = function (e) {\n    var self = e.target.self; // Extract coordinates from event listener\n\n    var x = parseInt(e.target.getAttribute('data-x'), 10);\n    var y = parseInt(e.target.getAttribute('data-y'), 10);\n    var result = null;\n\n    if (self.readyToPlay) {\n      result = self.shoot(x, y, CONST.COMPUTER_PLAYER); // Remove the tutorial arrow\n\n      if (gameTutorial.showTutorial) {\n        gameTutorial.nextStep();\n      }\n    }\n\n    if (result !== null && !Game.gameOver) {\n      //Game.stats.incrementShots();\n      // if (result === CONST.TYPE_HIT) {\n      // \tGame.stats.hitShot();\n      // }\n      // The AI shoots iff the player clicks on a cell that he/she hasn't\n      // already clicked on yet\n      self.robot.shoot();\n    } else {\n      Game.gameOver = false;\n    }\n  }; // Creates click event listeners on each of the ship names in the roster\n\n\n  Game.prototype.rosterListener = function (e) {\n    var self = e.target.self; // Remove all classes of 'placing' from the fleet roster first\n\n    var roster = document.querySelectorAll('.fleet-roster li');\n\n    for (var i = 0; i < roster.length; i++) {\n      var classes = roster[i].getAttribute('class') || '';\n      classes = classes.replace('placing', '');\n      roster[i].setAttribute('class', classes);\n    } // Move the highlight to the next step\n\n\n    if (gameTutorial.currentStep === 1) {\n      gameTutorial.nextStep();\n    } // Set the class of the target ship to 'placing'\n\n\n    Game.placeShipType = e.target.getAttribute('id');\n    document.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n    Game.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n    self.placingOnGrid = true;\n  }; // Creates click event listeners on the human player's grid to handle\n  // ship placement after the user has selected a ship name\n\n\n  Game.prototype.placementListener = function (e) {\n    var self = e.target.self;\n\n    if (self.placingOnGrid) {\n      // Extract coordinates from event listener\n      var x = parseInt(e.target.getAttribute('data-x'), 10);\n      var y = parseInt(e.target.getAttribute('data-y'), 10); // Don't screw up the direction if the user tries to place again.\n\n      var successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\n      if (successful) {\n        // Done placing this ship\n        self.endPlacing(Game.placeShipType); // Remove the helper arrow\n\n        if (gameTutorial.currentStep === 2) {\n          gameTutorial.nextStep();\n        }\n\n        self.placingOnGrid = false;\n\n        if (self.areAllShipsPlaced()) {\n          var el = document.getElementById('rotate-button');\n          el.addEventListener(transitionEndEventName(), function () {\n            el.setAttribute('class', 'hidden');\n\n            if (gameTutorial.showTutorial) {\n              document.getElementById('start-game').setAttribute('class', 'highlight');\n            } else {\n              document.getElementById('start-game').removeAttribute('class');\n            }\n          }, false);\n          el.setAttribute('class', 'invisible');\n        }\n      }\n    }\n  }; // Creates mouseover event listeners that handles mouseover on the\n  // human player's grid to draw a phantom ship implying that the user\n  // is allowed to place a ship there\n\n\n  Game.prototype.placementMouseover = function (e) {\n    var self = e.target.self;\n\n    if (self.placingOnGrid) {\n      var x = parseInt(e.target.getAttribute('data-x'), 10);\n      var y = parseInt(e.target.getAttribute('data-y'), 10);\n      var classes;\n      var fleetRoster = self.humanFleet.fleetRoster;\n\n      for (var i = 0; i < fleetRoster.length; i++) {\n        var shipType = fleetRoster[i].type;\n\n        if (Game.placeShipType === shipType && fleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n          // Virtual ship\n          fleetRoster[i].create(x, y, Game.placeShipDirection, true);\n          Game.placeShipCoords = fleetRoster[i].getAllShipCells();\n\n          for (var j = 0; j < Game.placeShipCoords.length; j++) {\n            var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n            classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n            if (classes.indexOf(' grid-ship') < 0) {\n              classes += ' grid-ship';\n              el.setAttribute('class', classes);\n            }\n          }\n        }\n      }\n    }\n  }; // Creates mouseout event listeners that un-draws the phantom ship\n  // on the human player's grid as the user hovers over a different cell\n\n\n  Game.prototype.placementMouseout = function (e) {\n    var self = e.target.self;\n\n    if (self.placingOnGrid) {\n      for (var j = 0; j < Game.placeShipCoords.length; j++) {\n        var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n        var classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n        if (classes.indexOf(' grid-ship') > -1) {\n          classes = classes.replace(' grid-ship', '');\n          el.setAttribute('class', classes);\n        }\n      }\n    }\n  }; // Click handler for the Rotate Ship button\n\n\n  Game.prototype.toggleRotation = function (e) {\n    // Toggle rotation direction\n    var direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\n    if (direction === Ship.DIRECTION_VERTICAL) {\n      e.target.setAttribute('data-direction', '1');\n      Game.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n    } else if (direction === Ship.DIRECTION_HORIZONTAL) {\n      e.target.setAttribute('data-direction', '0');\n      Game.placeShipDirection = Ship.DIRECTION_VERTICAL;\n    }\n  }; // Click handler for the Start Game button\n\n\n  Game.prototype.startGame = function (e) {\n    var self = e.target.self;\n    var el = document.getElementById('roster-sidebar');\n\n    var fn = function () {\n      el.setAttribute('class', 'hidden');\n    };\n\n    el.addEventListener(transitionEndEventName(), fn, false);\n    el.setAttribute('class', 'invisible');\n    self.readyToPlay = true; // Advanced the tutorial step\n\n    if (gameTutorial.currentStep === 3) {\n      gameTutorial.nextStep();\n    }\n\n    el.removeEventListener(transitionEndEventName(), fn, false);\n  }; // Click handler for Restart Game button\n\n\n  Game.prototype.restartGame = function (e) {\n    e.target.removeEventListener(e.type, arguments.callee);\n    var self = e.target.self;\n    document.getElementById('restart-sidebar').setAttribute('class', 'hidden');\n    self.resetFogOfWar();\n    self.init();\n  }; // Debugging function used to place all ships and just start\n\n\n  Game.prototype.placeRandomly = function (e) {\n    e.target.removeEventListener(e.type, arguments.callee);\n    e.target.self.humanFleet.placeShipsRandomly();\n    e.target.self.readyToPlay = true;\n    document.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n    this.setAttribute('class', 'hidden');\n  }; // Ends placing the current ship\n\n\n  Game.prototype.endPlacing = function (shipType) {\n    document.getElementById(shipType).setAttribute('class', 'placed'); // Mark the ship as 'used'\n\n    Game.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED; // Wipe out the variable when you're done with it\n\n    Game.placeShipDirection = null;\n    Game.placeShipType = '';\n    Game.placeShipCoords = [];\n  }; // Checks whether or not all ships are done placing\n  // Returns boolean\n\n\n  Game.prototype.areAllShipsPlaced = function () {\n    var playerRoster = document.querySelectorAll('.fleet-roster li');\n\n    for (var i = 0; i < playerRoster.length; i++) {\n      if (playerRoster[i].getAttribute('class') === 'placed') {\n        continue;\n      } else {\n        return false;\n      }\n    } // Reset temporary variables\n\n\n    Game.placeShipDirection = 0;\n    Game.placeShipType = '';\n    Game.placeShipCoords = [];\n    return true;\n  }; // Resets the fog of war\n\n\n  Game.prototype.resetFogOfWar = function () {\n    for (var i = 0; i < Game.size; i++) {\n      for (var j = 0; j < Game.size; j++) {\n        this.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n        this.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n      }\n    } // Reset all values to indicate the ships are ready to be placed again\n\n\n    Game.usedShips = Game.usedShips.map(function () {\n      return CONST.UNUSED;\n    });\n  }; // Resets CSS styling of the sidebar\n\n\n  Game.prototype.resetRosterSidebar = function () {// console.log(document.getElementById('fleetroster'));\n    // var els = document.querySelector('.fleet-roster').querySelectorAll('li');\n    // for (var i = 0; i < els.length; i++) {\n    // \tels[i].removeAttribute('class');\n    // }\n    // if (gameTutorial.showTutorial) {\n    // \tgameTutorial.nextStep();\n    // } else {\n    // \tdocument.getElementById('roster-sidebar').removeAttribute('class');\n    // }\n    // document.getElementById('rotate-button').removeAttribute('class');\n    // document.getElementById('start-game').setAttribute('class', 'hidden');\n    // if (DEBUG_MODE) {\n    // \tdocument.getElementById('place-randomly').removeAttribute('class');\n    // }\n  };\n\n  Game.prototype.showRestartSidebar = function () {\n    var sidebar = document.getElementById('restart-sidebar');\n    sidebar.setAttribute('class', 'highlight'); // Deregister listeners\n\n    var computerCells = document.querySelector('.computer-player').childNodes;\n\n    for (var j = 0; j < computerCells.length; j++) {\n      computerCells[j].removeEventListener('click', this.shootListener, false);\n    }\n\n    var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n    for (var i = 0; i < playerRoster.length; i++) {\n      playerRoster[i].removeEventListener('click', this.rosterListener, false);\n    }\n\n    var restartButton = document.getElementById('restart-game');\n    restartButton.addEventListener('click', this.restartGame, false);\n    restartButton.self = this;\n  }; // Generates the HTML divs for the grid for both players\n\n\n  Game.prototype.createGrid = function () {\n    var gridDiv = document.querySelectorAll('.grid');\n\n    for (var grid = 0; grid < gridDiv.length; grid++) {\n      gridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\n      for (var i = 0; i < Game.size; i++) {\n        for (var j = 0; j < Game.size; j++) {\n          var el = document.createElement('div');\n          el.setAttribute('data-x', i);\n          el.setAttribute('data-y', j);\n          el.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n          gridDiv[grid].appendChild(el);\n        }\n      }\n    }\n  }; // Initializes the Game. Also resets the game if previously initialized\n\n\n  Game.prototype.init = function () {\n    this.humanGrid = new Grid(Game.size);\n    this.computerGrid = new Grid(Game.size);\n    this.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n    this.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n    this.robot = new AI(this); //Game.stats = new Stats();\n    //Game.stats.updateStatsSidebar();\n    // Reset game variables\n\n    this.shotsTaken = 0;\n    this.readyToPlay = false;\n    this.placingOnGrid = false;\n    Game.placeShipDirection = 0;\n    Game.placeShipType = '';\n    Game.placeShipCoords = [];\n    this.resetRosterSidebar(); // Add a click listener for the Grid.shoot() method for all cells\n    // Only add this listener to the computer's grid\n\n    var computerCells = document.querySelector('.computer-player').childNodes;\n\n    for (var j = 0; j < computerCells.length; j++) {\n      computerCells[j].self = this;\n      computerCells[j].addEventListener('click', this.shootListener, false);\n    } // Add a click listener to the roster\t\n\n\n    var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n    for (var i = 0; i < playerRoster.length; i++) {\n      playerRoster[i].self = this;\n      playerRoster[i].addEventListener('click', this.rosterListener, false);\n    } // Add a click listener to the human player's grid while placing\n\n\n    var humanCells = document.querySelector('.human-player').childNodes;\n\n    for (var k = 0; k < humanCells.length; k++) {\n      humanCells[k].self = this;\n      humanCells[k].addEventListener('click', this.placementListener, false);\n      humanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n      humanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n    }\n\n    var rotateButton = document.getElementById('rotate-button');\n    rotateButton.addEventListener('click', this.toggleRotation, false);\n    var startButton = document.getElementById('start-game');\n    startButton.self = this;\n    startButton.addEventListener('click', this.startGame, false); // var resetButton = document.getElementById('reset-stats');\n    // resetButton.addEventListener('click', Game.stats.resetStats, false);\n\n    var randomButton = document.getElementById('place-randomly');\n    randomButton.self = this;\n    randomButton.addEventListener('click', this.placeRandomly, false);\n    this.computerFleet.placeShipsRandomly();\n  }; // Grid object\n  // Constructor\n\n\n  function Grid(size) {\n    this.size = size;\n    this.cells = [];\n    this.init();\n  } // Initialize and populate the grid\n\n\n  Grid.prototype.init = function () {\n    for (var x = 0; x < this.size; x++) {\n      var row = [];\n      this.cells[x] = row;\n\n      for (var y = 0; y < this.size; y++) {\n        row.push(CONST.TYPE_EMPTY);\n      }\n    }\n  }; // Updates the cell's CSS class based on the type passed in\n\n\n  Grid.prototype.updateCell = function (x, y, type, targetPlayer) {\n    var player;\n\n    if (targetPlayer === CONST.HUMAN_PLAYER) {\n      player = 'human-player';\n    } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n      player = 'computer-player';\n    } else {\n      // Should never be called\n      console.log(\"There was an error trying to find the correct player's grid\");\n    }\n\n    switch (type) {\n      case CONST.CSS_TYPE_EMPTY:\n        this.cells[x][y] = CONST.TYPE_EMPTY;\n        break;\n\n      case CONST.CSS_TYPE_SHIP:\n        this.cells[x][y] = CONST.TYPE_SHIP;\n        break;\n\n      case CONST.CSS_TYPE_MISS:\n        this.cells[x][y] = CONST.TYPE_MISS;\n        break;\n\n      case CONST.CSS_TYPE_HIT:\n        this.cells[x][y] = CONST.TYPE_HIT;\n        break;\n\n      case CONST.CSS_TYPE_SUNK:\n        this.cells[x][y] = CONST.TYPE_SUNK;\n        break;\n\n      default:\n        this.cells[x][y] = CONST.TYPE_EMPTY;\n        break;\n    }\n\n    var classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n    document.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n  }; // Checks to see if a cell contains an undamaged ship\n  // Returns boolean\n\n\n  Grid.prototype.isUndamagedShip = function (x, y) {\n    return this.cells[x][y] === CONST.TYPE_SHIP;\n  }; // Checks to see if the shot was missed. This is equivalent\n  // to checking if a cell contains a cannonball\n  // Returns boolean\n\n\n  Grid.prototype.isMiss = function (x, y) {\n    return this.cells[x][y] === CONST.TYPE_MISS;\n  }; // Checks to see if a cell contains a damaged ship,\n  // either hit or sunk.\n  // Returns boolean\n\n\n  Grid.prototype.isDamagedShip = function (x, y) {\n    return this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n  }; // Fleet object\n  // This object is used to keep track of a player's portfolio of ships\n  // Constructor\n\n\n  function Fleet(playerGrid, player) {\n    this.numShips = CONST.AVAILABLE_SHIPS.length;\n    this.playerGrid = playerGrid;\n    this.player = player;\n    this.fleetRoster = [];\n    this.populate();\n  } // Populates a fleet\n\n\n  Fleet.prototype.populate = function () {\n    for (var i = 0; i < this.numShips; i++) {\n      // loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n      var j = i % CONST.AVAILABLE_SHIPS.length;\n      this.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n    }\n  }; // Places the ship and returns whether or not the placement was successful\n  // Returns boolean\n\n\n  Fleet.prototype.placeShip = function (x, y, direction, shipType) {\n    var shipCoords;\n\n    for (var i = 0; i < this.fleetRoster.length; i++) {\n      var shipTypes = this.fleetRoster[i].type;\n\n      if (shipType === shipTypes && this.fleetRoster[i].isLegal(x, y, direction)) {\n        this.fleetRoster[i].create(x, y, direction, false);\n        shipCoords = this.fleetRoster[i].getAllShipCells();\n\n        for (var j = 0; j < shipCoords.length; j++) {\n          this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n        }\n\n        return true;\n      }\n    }\n\n    return false;\n  }; // Places ships randomly on the board\n  // TODO: Avoid placing ships too close to each other\n\n\n  Fleet.prototype.placeShipsRandomly = function () {\n    var shipCoords;\n\n    for (var i = 0; i < this.fleetRoster.length; i++) {\n      var illegalPlacement = true; // Prevents the random placement of already placed ships\n\n      if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n        continue;\n      }\n\n      while (illegalPlacement) {\n        var randomX = Math.floor(Game.size * Math.random());\n        var randomY = Math.floor(Game.size * Math.random());\n        var randomDirection = Math.floor(2 * Math.random());\n\n        if (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n          this.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n          shipCoords = this.fleetRoster[i].getAllShipCells();\n          illegalPlacement = false;\n        } else {\n          continue;\n        }\n      }\n\n      if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n        for (var j = 0; j < shipCoords.length; j++) {\n          this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n          Game.usedShips[i] = CONST.USED;\n        }\n      }\n    }\n  }; // Finds a ship by location\n  // Returns the ship object located at (x, y)\n  // If no ship exists at (x, y), this returns null instead\n\n\n  Fleet.prototype.findShipByCoords = function (x, y) {\n    for (var i = 0; i < this.fleetRoster.length; i++) {\n      var currentShip = this.fleetRoster[i];\n\n      if (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n        if (y === currentShip.yPosition && x >= currentShip.xPosition && x < currentShip.xPosition + currentShip.shipLength) {\n          return currentShip;\n        } else {\n          continue;\n        }\n      } else {\n        if (x === currentShip.xPosition && y >= currentShip.yPosition && y < currentShip.yPosition + currentShip.shipLength) {\n          return currentShip;\n        } else {\n          continue;\n        }\n      }\n    }\n\n    return null;\n  }; // Finds a ship by its type\n  // Param shipType is a string\n  // Returns the ship object that is of type shipType\n  // If no ship exists, this returns null.\n\n\n  Fleet.prototype.findShipByType = function (shipType) {\n    for (var i = 0; i < this.fleetRoster.length; i++) {\n      if (this.fleetRoster[i].type === shipType) {\n        return this.fleetRoster[i];\n      }\n    }\n\n    return null;\n  }; // Checks to see if all ships have been sunk\n  // Returns boolean\n\n\n  Fleet.prototype.allShipsSunk = function () {\n    for (var i = 0; i < this.fleetRoster.length; i++) {\n      // If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n      if (this.fleetRoster[i].sunk === false) {\n        return false;\n      }\n    }\n\n    return true;\n  }; // Ship object\n  // Constructor\n\n\n  function Ship(type, playerGrid, player) {\n    this.damage = 0;\n    this.type = type;\n    this.playerGrid = playerGrid;\n    this.player = player;\n\n    switch (this.type) {\n      case CONST.AVAILABLE_SHIPS[0]:\n        this.shipLength = 1;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[1]:\n        this.shipLength = 1;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[2]:\n        this.shipLength = 1;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[3]:\n        this.shipLength = 1;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[4]:\n        this.shipLength = 2;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[5]:\n        this.shipLength = 2;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[6]:\n        this.shipLength = 2;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[7]:\n        this.shipLength = 3;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[8]:\n        this.shipLength = 3;\n        break;\n\n      case CONST.AVAILABLE_SHIPS[9]:\n        this.shipLength = 4;\n        break;\n    }\n\n    this.maxDamage = this.shipLength;\n    this.sunk = false;\n  } // Checks to see if the placement of a ship is legal\n  // Returns boolean\n\n\n  Ship.prototype.isLegal = function (x, y, direction) {\n    // first, check if the ship is within the grid...\n    if (this.withinBounds(x, y, direction)) {\n      // ...then check to make sure it doesn't collide with another ship\n      for (var i = 0; i < this.shipLength; i++) {\n        if (direction === Ship.DIRECTION_VERTICAL) {\n          if (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP || this.playerGrid.cells[x + i][y] === CONST.TYPE_MISS || this.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK || this.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n            return false;\n          }\n        } else {\n          if (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP || this.playerGrid.cells[x][y + i] === CONST.TYPE_MISS || this.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK || this.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\n            return false;\n          }\n        }\n      }\n\n      return true;\n    } else {\n      return false;\n    }\n  }; // Checks to see if the ship is within bounds of the grid\n  // Returns boolean\n\n\n  Ship.prototype.withinBounds = function (x, y, direction) {\n    if (direction === Ship.DIRECTION_VERTICAL) {\n      return x + this.shipLength <= Game.size;\n    } else {\n      return y + this.shipLength <= Game.size;\n    }\n  }; // Increments the damage counter of a ship\n  // Returns Ship\n\n\n  Ship.prototype.incrementDamage = function () {\n    this.damage++;\n\n    if (this.isSunk()) {\n      this.sinkShip(false); // Sinks the ship\n    }\n  }; // Checks to see if the ship is sunk\n  // Returns boolean\n\n\n  Ship.prototype.isSunk = function () {\n    return this.damage >= this.maxDamage;\n  }; // Sinks the ship\n\n\n  Ship.prototype.sinkShip = function (virtual) {\n    this.damage = this.maxDamage; // Force the damage to exceed max damage\n\n    this.sunk = true; // Make the CSS class sunk, but only if the ship is not virtual\n\n    if (!virtual) {\n      var allCells = this.getAllShipCells();\n\n      for (var i = 0; i < this.shipLength; i++) {\n        this.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n      }\n    }\n  };\n  /**\n   * Gets all the ship cells\n   *\n   * Returns an array with all (x, y) coordinates of the ship:\n   * e.g.\n   * [\n   *\t{'x':2, 'y':2},\n   *\t{'x':3, 'y':2},\n   *\t{'x':4, 'y':2}\n   * ]\n   */\n\n\n  Ship.prototype.getAllShipCells = function () {\n    var resultObject = [];\n\n    for (var i = 0; i < this.shipLength; i++) {\n      if (this.direction === Ship.DIRECTION_VERTICAL) {\n        resultObject[i] = {\n          'x': this.xPosition + i,\n          'y': this.yPosition\n        };\n      } else {\n        resultObject[i] = {\n          'x': this.xPosition,\n          'y': this.yPosition + i\n        };\n      }\n    }\n\n    return resultObject;\n  }; // Initializes a ship with the given coordinates and direction (bearing).\n  // If the ship is declared \"virtual\", then the ship gets initialized with\n  // its coordinates but DOESN'T get placed on the grid.\n\n\n  Ship.prototype.create = function (x, y, direction, virtual) {\n    // This function assumes that you've already checked that the placement is legal\n    this.xPosition = x;\n    this.yPosition = y;\n    this.direction = direction; // If the ship is virtual, don't add it to the grid.\n\n    if (!virtual) {\n      for (var i = 0; i < this.shipLength; i++) {\n        if (this.direction === Ship.DIRECTION_VERTICAL) {\n          this.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n          if (this.checkPosition(x + i, y + 1)) {\n            this.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n          }\n\n          if (this.checkPosition(x + i, y - 1)) {\n            this.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n          }\n        } else {\n          this.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\n          if (this.checkPosition(x + 1, y + i)) {\n            this.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n          }\n\n          if (this.checkPosition(x - 1, y + i)) {\n            this.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n          }\n        }\n      }\n\n      if (this.direction === Ship.DIRECTION_VERTICAL) {\n        if (this.checkPosition(x - 1, y - 1)) {\n          this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x - 1, y)) {\n          this.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x - 1, y + 1)) {\n          this.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x + this.shipLength, y - 1)) {\n          this.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x + this.shipLength, y)) {\n          this.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x + this.shipLength, y + 1)) {\n          this.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n      } else {\n        if (this.checkPosition(x + 1, y - 1)) {\n          this.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x - 1, y - 1)) {\n          this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x, y - 1)) {\n          this.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x + 1, y + this.shipLength)) {\n          this.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x - 1, y + this.shipLength)) {\n          this.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n        }\n\n        if (this.checkPosition(x, y + this.shipLength)) {\n          this.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n        }\n      }\n    }\n  };\n\n  Ship.prototype.checkPosition = function (x, y) {\n    let triger = false;\n\n    if (x < 10 && y < 10 && x >= 0 && y >= 0) {\n      triger = true;\n    }\n\n    return triger;\n  }; // direction === 0 when the ship is facing north/south\n  // direction === 1 when the ship is facing east/west\n\n\n  Ship.DIRECTION_VERTICAL = 0;\n  Ship.DIRECTION_HORIZONTAL = 1; // Tutorial Object\n  // Constructor\n\n  function Tutorial() {\n    this.currentStep = 0; // Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\n    this.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n  } // Advances the tutorial to the next step\n\n\n  Tutorial.prototype.nextStep = function () {\n    var humanGrid = document.querySelector('.human-player');\n    var computerGrid = document.querySelector('.computer-player');\n\n    switch (this.currentStep) {\n      case 0:\n        document.getElementById('roster-sidebar').setAttribute('class', 'highlight');\n        document.getElementById('step1').setAttribute('class', 'current-step');\n        this.currentStep++;\n        break;\n\n      case 1:\n        document.getElementById('roster-sidebar').removeAttribute('class');\n        document.getElementById('step1').removeAttribute('class');\n        humanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\n        document.getElementById('step2').setAttribute('class', 'current-step');\n        this.currentStep++;\n        break;\n\n      case 2:\n        document.getElementById('step2').removeAttribute('class');\n        var humanClasses = humanGrid.getAttribute('class');\n        humanClasses = humanClasses.replace(' highlight', '');\n        humanGrid.setAttribute('class', humanClasses);\n        this.currentStep++;\n        break;\n\n      case 3:\n        computerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\n        document.getElementById('step3').setAttribute('class', 'current-step');\n        this.currentStep++;\n        break;\n\n      case 4:\n        var computerClasses = computerGrid.getAttribute('class');\n        document.getElementById('step3').removeAttribute('class');\n        computerClasses = computerClasses.replace(' highlight', '');\n        computerGrid.setAttribute('class', computerClasses);\n        document.getElementById('step4').setAttribute('class', 'current-step');\n        this.currentStep++;\n        break;\n\n      case 5:\n        document.getElementById('step4').removeAttribute('class');\n        this.currentStep = 6;\n        this.showTutorial = false;\n        localStorage.setItem('showTutorial', false);\n        break;\n\n      default:\n        break;\n    }\n  }; // AI Object\n  // Optimal battleship-playing AI\n  // Constructor\n\n\n  function AI(gameObject) {\n    this.gameObject = gameObject;\n    this.virtualGrid = new Grid(Game.size);\n    this.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n    this.probGrid = []; // Probability Grid\n\n    this.initProbs();\n    this.updateProbs();\n  }\n\n  AI.PROB_WEIGHT = 5000; // arbitrarily big number\n  // how much weight to give to the opening book's high probability cells\n\n  AI.OPEN_HIGH_MIN = 20;\n  AI.OPEN_HIGH_MAX = 30; // how much weight to give to the opening book's medium probability cells\n\n  AI.OPEN_MED_MIN = 15;\n  AI.OPEN_MED_MAX = 25; // how much weight to give to the opening book's low probability cells\n\n  AI.OPEN_LOW_MIN = 10;\n  AI.OPEN_LOW_MAX = 20; // Amount of randomness when selecting between cells of equal probability\n\n  AI.RANDOMNESS = 0.1; // AI's opening book.\n  // This is the pattern of the first cells for the AI to target\n\n  AI.OPENINGS = [{\n    'x': 7,\n    'y': 3,\n    'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n  }, {\n    'x': 6,\n    'y': 2,\n    'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n  }, {\n    'x': 3,\n    'y': 7,\n    'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n  }, {\n    'x': 2,\n    'y': 6,\n    'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n  }, {\n    'x': 6,\n    'y': 6,\n    'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n  }, {\n    'x': 3,\n    'y': 3,\n    'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n  }, {\n    'x': 5,\n    'y': 5,\n    'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n  }, {\n    'x': 4,\n    'y': 4,\n    'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n  }, // {'x': 9, 'y': 5, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n  // {'x': 0, 'y': 4, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n  // {'x': 5, 'y': 9, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n  // {'x': 4, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n  {\n    'x': 0,\n    'y': 8,\n    'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n  }, {\n    'x': 1,\n    'y': 9,\n    'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n  }, {\n    'x': 8,\n    'y': 0,\n    'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n  }, {\n    'x': 9,\n    'y': 1,\n    'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n  }, {\n    'x': 9,\n    'y': 9,\n    'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n  }, {\n    'x': 0,\n    'y': 0,\n    'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n  }]; // Scouts the grid based on max probability, and shoots at the cell\n  // that has the highest probability of containing a ship\n\n  AI.prototype.shoot = function () {\n    var maxProbability = 0;\n    var maxProbCoords;\n    var maxProbs = []; // Add the AI's opening book to the probability grid\n\n    for (var i = 0; i < AI.OPENINGS.length; i++) {\n      var cell = AI.OPENINGS[i];\n\n      if (this.probGrid[cell.x][cell.y] !== 0) {\n        this.probGrid[cell.x][cell.y] += cell.weight;\n      }\n    }\n\n    for (var x = 0; x < Game.size; x++) {\n      for (var y = 0; y < Game.size; y++) {\n        if (this.probGrid[x][y] > maxProbability) {\n          maxProbability = this.probGrid[x][y];\n          maxProbs = [{\n            'x': x,\n            'y': y\n          }]; // Replace the array\n        } else if (this.probGrid[x][y] === maxProbability) {\n          maxProbs.push({\n            'x': x,\n            'y': y\n          });\n        }\n      }\n    }\n\n    maxProbCoords = Math.random() < AI.RANDOMNESS ? maxProbs[Math.floor(Math.random() * maxProbs.length)] : maxProbs[0];\n    var result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER); // If the game ends, the next lines need to be skipped.\n\n    if (Game.gameOver) {\n      Game.gameOver = false;\n      return;\n    }\n\n    this.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result; // If you hit a ship, check to make sure if you've sunk it.\n\n    if (result === CONST.TYPE_HIT) {\n      var humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\n      if (humanShip.isSunk()) {\n        // Remove any ships from the roster that have been sunk\n        var shipTypes = [];\n\n        for (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n          shipTypes.push(this.virtualFleet.fleetRoster[k].type);\n        }\n\n        var index = shipTypes.indexOf(humanShip.type);\n        this.virtualFleet.fleetRoster.splice(index, 1); // Update the virtual grid with the sunk ship's cells\n\n        var shipCells = humanShip.getAllShipCells();\n\n        for (var _i = 0; _i < shipCells.length; _i++) {\n          this.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n        }\n      }\n    } // Update probability grid after each shot\n\n\n    this.updateProbs();\n  }; // Update the probability grid\n\n\n  AI.prototype.updateProbs = function () {\n    var roster = this.virtualFleet.fleetRoster;\n    var coords;\n    this.resetProbs(); // Probabilities are not normalized to fit in the interval [0, 1]\n    // because we're only interested in the maximum value.\n    // This works by trying to fit each ship in each cell in every orientation\n    // For every cell, the more legal ways a ship can pass through it, the more\n    // likely the cell is to contain a ship.\n    // Cells that surround known 'hits' are given an arbitrarily large probability\n    // so that the AI tries to completely sink the ship before moving on.\n    // TODO: Think about a more efficient implementation\n\n    for (var k = 0; k < roster.length; k++) {\n      for (var x = 0; x < Game.size; x++) {\n        for (var y = 0; y < Game.size; y++) {\n          if (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n            roster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n            coords = roster[k].getAllShipCells();\n\n            if (this.passesThroughHitCell(coords)) {\n              for (var i = 0; i < coords.length; i++) {\n                this.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n              }\n            } else {\n              for (var _i = 0; _i < coords.length; _i++) {\n                this.probGrid[coords[_i].x][coords[_i].y]++;\n              }\n            }\n          }\n\n          if (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n            roster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n            coords = roster[k].getAllShipCells();\n\n            if (this.passesThroughHitCell(coords)) {\n              for (var j = 0; j < coords.length; j++) {\n                this.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n              }\n            } else {\n              for (var _j = 0; _j < coords.length; _j++) {\n                this.probGrid[coords[_j].x][coords[_j].y]++;\n              }\n            }\n          } // Set hit cells to probability zero so the AI doesn't\n          // target cells that are already hit\n\n\n          if (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n            this.probGrid[x][y] = 0;\n          }\n        }\n      }\n    }\n  }; // Initializes the probability grid for targeting\n\n\n  AI.prototype.initProbs = function () {\n    for (var x = 0; x < Game.size; x++) {\n      var row = [];\n      this.probGrid[x] = row;\n\n      for (var y = 0; y < Game.size; y++) {\n        row.push(0);\n      }\n    }\n  }; // Resets the probability grid to all 0.\n\n\n  AI.prototype.resetProbs = function () {\n    for (var x = 0; x < Game.size; x++) {\n      for (var y = 0; y < Game.size; y++) {\n        this.probGrid[x][y] = 0;\n      }\n    }\n  };\n\n  AI.prototype.metagame = function () {// Inputs:\n    // Proximity of hit cells to edge\n    // Proximity of hit cells to each other\n    // Edit the probability grid by multiplying each cell with a new probability weight (e.g. 0.4, or 3). Set this as a CONST and make 1-CONST the inverse for decreasing, or 2*CONST for increasing\n  }; // Finds a human ship by coordinates\n  // Returns Ship\n\n\n  AI.prototype.findHumanShip = function (x, y) {\n    return this.gameObject.humanFleet.findShipByCoords(x, y);\n  }; // Checks whether or not a given ship's cells passes through\n  // any cell that is hit.\n  // Returns boolean\n\n\n  AI.prototype.passesThroughHitCell = function (shipCells) {\n    for (var i = 0; i < shipCells.length; i++) {\n      if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n        return true;\n      }\n    }\n\n    return false;\n  }; // Gives the number of hit cells the ships passes through. The more\n  // cells this is, the more probable the ship exists in those coordinates\n  // Returns int\n\n\n  AI.prototype.numHitCellsCovered = function (shipCells) {\n    var cells = 0;\n\n    for (var i = 0; i < shipCells.length; i++) {\n      if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n        cells++;\n      }\n    }\n\n    return cells;\n  }; // Global constant only initialized once\n\n\n  var gameTutorial = new Tutorial(); // Start the game\n\n  var mainGame = new Game(10);\n})(); // Browser compatability workaround for transition end event names.\n// From modernizr: http://stackoverflow.com/a/9090128\n\n\nfunction transitionEndEventName() {\n  var i,\n      undefined,\n      el = document.createElement('div'),\n      transitions = {\n    'transition': 'transitionend',\n    'OTransition': 'otransitionend',\n    // oTransitionEnd in very old Opera\n    'MozTransition': 'transitionend',\n    'WebkitTransition': 'webkitTransitionEnd'\n  };\n\n  for (i in transitions) {\n    if (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n      return transitions[i];\n    }\n  }\n} // Returns a random number between min (inclusive) and max (exclusive)\n\n\nfunction getRandom(min, max) {\n  return Math.random() * (max - min) + min;\n}","map":{"version":3,"sources":["/home/anushik/Desktop/dip/seebattle/src/components/js/battleboat.js"],"names":["CONST","AVAILABLE_SHIPS","HUMAN_PLAYER","COMPUTER_PLAYER","VIRTUAL_PLAYER","CSS_TYPE_EMPTY","CSS_TYPE_SHIP","CSS_TYPE_MISS","CSS_TYPE_HIT","CSS_TYPE_SUNK","TYPE_EMPTY","TYPE_SHIP","TYPE_MISS","TYPE_HIT","TYPE_SUNK","TYPE_NOT_ALLOWED","Game","usedShips","UNUSED","USED","size","shotsTaken","createGrid","init","gameOver","prototype","checkIfWon","computerFleet","allShipsSunk","alert","showRestartSidebar","humanFleet","shoot","x","y","targetPlayer","targetGrid","targetFleet","humanGrid","computerGrid","console","log","isDamagedShip","isMiss","isUndamagedShip","updateCell","findShipByCoords","incrementDamage","shootListener","e","self","target","parseInt","getAttribute","result","readyToPlay","gameTutorial","showTutorial","nextStep","robot","rosterListener","roster","document","querySelectorAll","i","length","classes","replace","setAttribute","currentStep","placeShipType","getElementById","placeShipDirection","placingOnGrid","placementListener","successful","placeShip","endPlacing","areAllShipsPlaced","el","addEventListener","transitionEndEventName","removeAttribute","placementMouseover","fleetRoster","shipType","type","isLegal","create","placeShipCoords","getAllShipCells","j","querySelector","indexOf","placementMouseout","toggleRotation","direction","Ship","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","startGame","fn","removeEventListener","restartGame","arguments","callee","resetFogOfWar","placeRandomly","placeShipsRandomly","playerRoster","map","resetRosterSidebar","sidebar","computerCells","childNodes","restartButton","gridDiv","grid","removeChild","createElement","appendChild","Grid","Fleet","AI","humanCells","k","rotateButton","startButton","randomButton","cells","row","push","player","join","playerGrid","numShips","populate","shipCoords","shipTypes","illegalPlacement","randomX","Math","floor","random","randomY","randomDirection","currentShip","yPosition","xPosition","shipLength","findShipByType","sunk","damage","maxDamage","withinBounds","isSunk","sinkShip","virtual","allCells","resultObject","checkPosition","triger","Tutorial","localStorage","getItem","humanClasses","computerClasses","setItem","gameObject","virtualGrid","virtualFleet","probGrid","initProbs","updateProbs","PROB_WEIGHT","OPEN_HIGH_MIN","OPEN_HIGH_MAX","OPEN_MED_MIN","OPEN_MED_MAX","OPEN_LOW_MIN","OPEN_LOW_MAX","RANDOMNESS","OPENINGS","getRandom","maxProbability","maxProbCoords","maxProbs","cell","weight","humanShip","findHumanShip","index","splice","shipCells","_i","coords","resetProbs","passesThroughHitCell","numHitCellsCovered","_j","metagame","mainGame","undefined","transitions","hasOwnProperty","style","min","max"],"mappings":"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","sourcesContent":["(function() {\n\t// Global Constants\n\tvar CONST = {};\n\tCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1'];\n\t// You are player 0 and the computer is player 1\n\t// The virtual player is used for generating temporary ships\n\t// for calculating the probability heatmap\n\tCONST.HUMAN_PLAYER = 0;\n\tCONST.COMPUTER_PLAYER = 1;\n\tCONST.VIRTUAL_PLAYER = 2;\n\t// Possible values for the parameter `type` (string)\n\tCONST.CSS_TYPE_EMPTY = 'empty';\n\tCONST.CSS_TYPE_SHIP = 'ship';\n\tCONST.CSS_TYPE_MISS = 'miss';\n\tCONST.CSS_TYPE_HIT = 'hit';\n\tCONST.CSS_TYPE_SUNK = 'sunk';\n\t// Grid code:\n\tCONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\tCONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\tCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\tCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\tCONST.TYPE_SUNK = 4; // 4 = sunk ship\n\tCONST.TYPE_NOT_ALLOWED = 5;\n\n\tGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n\tCONST.USED = 1;\n\tCONST.UNUSED = 0;\n\t\n\t// // Game Statistics\n\t// function Stats(){\n\t// \tthis.shotsTaken = 0;\n\t// \tthis.shotsHit = 0;\n\t// \tthis.totalShots = parseInt(localStorage.getItem('totalShots'), 10) || 0;\n\t// \tthis.totalHits = parseInt(localStorage.getItem('totalHits'), 10) || 0;\n\t// \tthis.gamesPlayed = parseInt(localStorage.getItem('gamesPlayed'), 10) || 0;\n\t// \tthis.gamesWon = parseInt(localStorage.getItem('gamesWon'), 10) || 0;\n\t// \tthis.uuid = localStorage.getItem('uuid') || this.createUUID();\n\t// }\n\t// Stats.prototype.incrementShots = function() {\n\t// \tthis.shotsTaken++;\n\t// };\n\t// Stats.prototype.hitShot = function() {\n\t// \tthis.shotsHit++;\n\t// };\n\t// Stats.prototype.wonGame = function() {\n\t// \tthis.gamesPlayed++;\n\t// \tthis.gamesWon++;\n\t// };\n\t// Stats.prototype.lostGame = function() {\n\t// \tthis.gamesPlayed++;\n\t// };\n\t// // Saves the game statistics to localstorage, also uploads where the user placed\n\t// // their ships to Google Analytics so that in the future I'll be able to see\n\t// // which cells humans are disproportionately biased to place ships on.\n\t// Stats.prototype.syncStats = function() {\n\t// \tif(!this.skipCurrentGame) {\n\t// \t\tvar totalShots = parseInt(localStorage.getItem('totalShots'), 10) || 0;\n\t// \t\ttotalShots += this.shotsTaken;\n\t// \t\tvar totalHits = parseInt(localStorage.getItem('totalHits'), 10) || 0;\n\t// \t\ttotalHits += this.shotsHit;\n\t// \t\tlocalStorage.setItem('totalShots', totalShots);\n\t// \t\tlocalStorage.setItem('totalHits', totalHits);\n\t// \t\tlocalStorage.setItem('gamesPlayed', this.gamesPlayed);\n\t// \t\tlocalStorage.setItem('gamesWon', this.gamesWon);\n\t// \t\tlocalStorage.setItem('uuid', this.uuid);\n\t// \t} else {\n\t// \t\tthis.skipCurrentGame = false;\n\t// \t}\n\t//\n\t// \tvar stringifiedGrid = '';\n\t// \tfor (var x = 0; x < Game.size; x++) {\n\t// \t\tfor (var y = 0; y < Game.size; y++) {\n\t// \t\t\tstringifiedGrid += '(' + x + ',' + y + '):' + mainGame.humanGrid.cells[x][y] + ';\\n';\n\t// \t\t}\n\t// \t}\n\t// };\n\t// // Updates the sidebar display with the current statistics\n\t// Stats.prototype.updateStatsSidebar = function() {\n\t// \tvar elWinPercent = document.getElementById('stats-wins');\n\t// \tvar elAccuracy = document.getElementById('stats-accuracy');\n\t// \telWinPercent.innerHTML = this.gamesWon + \" of \" + this.gamesPlayed;\n\t// \telAccuracy.innerHTML = Math.round((100 * this.totalHits / this.totalShots) || 0) + \"%\";\n\t// };\n\t// // Reset all game vanity statistics to zero. Doesn't reset your uuid.\n\t// Stats.prototype.resetStats = function(e) {\n\t// \t// Skip tracking stats until the end of the current game or else\n\t// \t// the accuracy percentage will be wrong (since you are tracking\n\t// \t// hits that didn't start from the beginning of the game)\n\t// \tGame.stats.skipCurrentGame = true;\n\t// \tlocalStorage.setItem('totalShots', 0);\n\t// \tlocalStorage.setItem('totalHits', 0);\n\t// \tlocalStorage.setItem('gamesPlayed', 0);\n\t// \tlocalStorage.setItem('gamesWon', 0);\n\t// \tlocalStorage.setItem('showTutorial', true);\n\t// \tGame.stats.shotsTaken = 0;\n\t// \tGame.stats.shotsHit = 0;\n\t// \tGame.stats.totalShots = 0;\n\t// \tGame.stats.totalHits = 0;\n\t// \tGame.stats.gamesPlayed = 0;\n\t// \tGame.stats.gamesWon = 0;\n\t// \tGame.stats.updateStatsSidebar();\n\t// };\n\t// Stats.prototype.createUUID = function(len, radix) {\n\t// \t/*!\n\t// \tMath.uuid.js (v1.4)\n\t// \thttp://www.broofa.com\n\t// \tmailto:robert@broofa.com\n\t// \tCopyright (c) 2010 Robert Kieffer\n\t// \tDual licensed under the MIT and GPL licenses.\n\t// \t*/\n\t// \tvar chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split(''),\n\t// \tuuid = [], i;\n\t// \tradix = radix || chars.length;\n\t//\n\t// \tif (len) {\n\t// \t\t// Compact form\n\t// \t\tfor (i = 0; i < len; i++) uuid[i] = chars[0 | Math.random()*radix];\n\t// \t} else {\n\t// \t\t// rfc4122, version 4 form\n\t// \t\tvar r;\n\t//\n\t// \t\t// rfc4122 requires these characters\n\t// \t\tuuid[8] = uuid[13] = uuid[18] = uuid[23] = '-';\n\t// \t\tuuid[14] = '4';\n\t//\n\t// \t\t// Fill in random data.  At i==19 set the high bits of clock sequence as\n\t// \t\t// per rfc4122, sec. 4.1.5\n\t// \t\tfor (i = 0; i < 36; i++) {\n\t// \t\t\tif (!uuid[i]) {\n\t// \t\t\t\tr = 0 | Math.random()*16;\n\t// \t\t\t\tuuid[i] = chars[(i === 19) ? (r & 0x3) | 0x8 : r];\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t//\n\t// \treturn uuid.join('');\n\t// };\n\t\n\t// Game manager object\n\t// Constructor\n\tfunction Game(size) {\n\t\tGame.size = size;\n\t\tthis.shotsTaken = 0;\n\t\tthis.createGrid();\n\t\tthis.init();\n\t}\n\tGame.size = 10; // Default grid size is 10x10\n\tGame.gameOver = false;\n\t// Checks if the game is won, and if it is, re-initializes the game\n\tGame.prototype.checkIfWon = function() {\n\t\tif (this.computerFleet.allShipsSunk()) {\n\t\t\talert('Congratulations, you win!');\n\t\t\tGame.gameOver = true;\n\t\t\t// Game.stats.wonGame();\n\t\t\t// Game.stats.syncStats();\n\t\t\t// Game.stats.updateStatsSidebar();\n\t\t\tthis.showRestartSidebar();\n\t\t} else if (this.humanFleet.allShipsSunk()) {\n\t\t\talert('Yarr! The computer sank all your ships. Try again.');\n\t\t\tGame.gameOver = true;\n\t\t\t// Game.stats.lostGame();\n\t\t\t// Game.stats.syncStats();\n\t\t\t// Game.stats.updateStatsSidebar();\n\t\t\tthis.showRestartSidebar();\n\t\t}\n\t};\n\t// Shoots at the target player on the grid.\n\t// Returns {int} Constants.TYPE: What the shot uncovered\n\tGame.prototype.shoot = function(x, y, targetPlayer) {\n\t\tlet targetGrid;\n\t\tlet targetFleet;\n\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\ttargetGrid = this.humanGrid;\n\t\t\ttargetFleet = this.humanFleet;\n\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\ttargetGrid = this.computerGrid;\n\t\t\ttargetFleet = this.computerFleet;\n\t\t} else {\n\t\t\t// Should never be called\n\t\t\tconsole.log(\"There was an error trying to find the correct player to target\");\n\t\t}\n\t\n\t\tif (targetGrid.isDamagedShip(x, y)) {\n\t\t\treturn null;\n\t\t} else if (targetGrid.isMiss(x, y)) {\n\t\t\treturn null;\n\t\t} else if (targetGrid.isUndamagedShip(x, y)) {\n\t\t\t// update the board/grid\n\t\t\ttargetGrid.updateCell(x, y, 'hit', targetPlayer);\n\t\t\t// IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n\t\t\t// because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\t\t\ttargetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\t\t\tthis.checkIfWon();\n\t\t\treturn CONST.TYPE_HIT;\n\t\t} else {\n\t\t\ttargetGrid.updateCell(x, y, 'miss', targetPlayer);\n\t\t\tthis.checkIfWon();\n\t\t\treturn CONST.TYPE_MISS;\n\t\t}\n\t};\n\t// Creates click event listeners on each one of the 100 grid cells\n\tGame.prototype.shootListener = function(e) {\n\t\tvar self = e.target.self;\n\t\t// Extract coordinates from event listener\n\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\tvar result = null;\n\t\tif (self.readyToPlay) {\n\t\t\tresult = self.shoot(x, y, CONST.COMPUTER_PLAYER);\n\t\n\t\t\t// Remove the tutorial arrow\n\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t}\n\t\t}\n\t\n\t\tif (result !== null && !Game.gameOver) {\n\t\t\t//Game.stats.incrementShots();\n\t\t\t// if (result === CONST.TYPE_HIT) {\n\t\t\t// \tGame.stats.hitShot();\n\t\t\t// }\n\t\t\t// The AI shoots iff the player clicks on a cell that he/she hasn't\n\t\t\t// already clicked on yet\n\t\t\tself.robot.shoot();\n\t\t} else {\n\t\t\tGame.gameOver = false;\n\t\t}\n\t};\n\t// Creates click event listeners on each of the ship names in the roster\n\tGame.prototype.rosterListener = function(e) {\n\t\tvar self = e.target.self;\n\t\t// Remove all classes of 'placing' from the fleet roster first\n\t\tvar roster = document.querySelectorAll('.fleet-roster li');\n\t\tfor (var i = 0; i < roster.length; i++) {\n\t\t\tvar classes = roster[i].getAttribute('class') || '';\n\t\t\tclasses = classes.replace('placing', '');\n\t\t\troster[i].setAttribute('class', classes);\n\t\t}\n\t\n\t\t// Move the highlight to the next step\n\t\tif (gameTutorial.currentStep === 1) {\n\t\t\tgameTutorial.nextStep();\n\t\t}\n\t\t\n\t\t// Set the class of the target ship to 'placing'\n\t\tGame.placeShipType = e.target.getAttribute('id');\n\t\tdocument.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n\t\tGame.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n\t\tself.placingOnGrid = true;\n\t};\n\t// Creates click event listeners on the human player's grid to handle\n\t// ship placement after the user has selected a ship name\n\tGame.prototype.placementListener = function(e) {\n\t\tvar self = e.target.self;\n\t\tif (self.placingOnGrid) {\n\t\t\t// Extract coordinates from event listener\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\t\n\t\t\t// Don't screw up the direction if the user tries to place again.\n\t\t\tvar successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\t\t\tif (successful) {\n\t\t\t\t// Done placing this ship\n\t\t\t\tself.endPlacing(Game.placeShipType);\n\t\n\t\t\t\t// Remove the helper arrow\n\t\t\t\tif (gameTutorial.currentStep === 2) {\n\t\t\t\t\tgameTutorial.nextStep();\n\t\t\t\t}\n\t\n\t\t\t\tself.placingOnGrid = false;\n\t\t\t\tif (self.areAllShipsPlaced()) {\n\t\t\t\t\tvar el = document.getElementById('rotate-button');\n\t\t\t\t\tel.addEventListener(transitionEndEventName(),(function(){\n\t\t\t\t\t\tel.setAttribute('class', 'hidden');\n\t\t\t\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\t\t\t\tdocument.getElementById('start-game').setAttribute('class', 'highlight');\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdocument.getElementById('start-game').removeAttribute('class');\t\n\t\t\t\t\t\t}\n\t\t\t\t\t}),false);\n\t\t\t\t\tel.setAttribute('class', 'invisible');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Creates mouseover event listeners that handles mouseover on the\n\t// human player's grid to draw a phantom ship implying that the user\n\t// is allowed to place a ship there\n\tGame.prototype.placementMouseover = function(e) {\n\t\tvar self = e.target.self;\n\t\tif (self.placingOnGrid) {\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\tvar classes;\n\t\t\tvar fleetRoster = self.humanFleet.fleetRoster;\n\t\n\t\t\tfor (var i = 0; i < fleetRoster.length; i++) {\n\t\t\t\tvar shipType = fleetRoster[i].type;\n\t\n\t\t\t\tif (Game.placeShipType === shipType &&\n\t\t\t\t\tfleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n\t\t\t\t\t// Virtual ship\n\t\t\t\t\tfleetRoster[i].create(x, y, Game.placeShipDirection, true);\n\t\t\t\t\tGame.placeShipCoords = fleetRoster[i].getAllShipCells();\n\t\n\t\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\t\t\tclasses = el.getAttribute('class');\n\t\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\t\t\tif (classes.indexOf(' grid-ship') < 0) {\n\t\t\t\t\t\t\tclasses += ' grid-ship';\n\t\t\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Creates mouseout event listeners that un-draws the phantom ship\n\t// on the human player's grid as the user hovers over a different cell\n\tGame.prototype.placementMouseout = function(e) {\n\t\tvar self = e.target.self;\n\t\tif (self.placingOnGrid) {\n\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\tvar classes = el.getAttribute('class');\n\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\tif (classes.indexOf(' grid-ship') > -1) {\n\t\t\t\t\tclasses = classes.replace(' grid-ship', '');\n\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Click handler for the Rotate Ship button\n\tGame.prototype.toggleRotation = function(e) {\n\t\t// Toggle rotation direction\n\t\tvar direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\te.target.setAttribute('data-direction', '1');\n\t\t\tGame.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n\t\t} else if (direction === Ship.DIRECTION_HORIZONTAL) {\n\t\t\te.target.setAttribute('data-direction', '0');\n\t\t\tGame.placeShipDirection = Ship.DIRECTION_VERTICAL;\n\t\t}\n\t};\n\t// Click handler for the Start Game button\n\tGame.prototype.startGame = function(e) {\n\t\tvar self = e.target.self;\n\t\tvar el = document.getElementById('roster-sidebar');\n\t\tvar fn = function() {el.setAttribute('class', 'hidden');};\n\t\tel.addEventListener(transitionEndEventName(),fn,false);\n\t\tel.setAttribute('class', 'invisible');\n\t\tself.readyToPlay = true;\n\t\n\t\t// Advanced the tutorial step\n\t\tif (gameTutorial.currentStep === 3) {\n\t\t\tgameTutorial.nextStep();\n\t\t}\n\t\tel.removeEventListener(transitionEndEventName(),fn,false);\n\t};\n\t// Click handler for Restart Game button\n\tGame.prototype.restartGame = function(e) {\n\t\te.target.removeEventListener(e.type, arguments.callee);\n\t\tvar self = e.target.self;\n\t\tdocument.getElementById('restart-sidebar').setAttribute('class', 'hidden');\n\t\tself.resetFogOfWar();\n\t\tself.init();\n\t};\n\t// Debugging function used to place all ships and just start\n\tGame.prototype.placeRandomly = function(e){\n\t\te.target.removeEventListener(e.type, arguments.callee);\n\t\te.target.self.humanFleet.placeShipsRandomly();\n\t\te.target.self.readyToPlay = true;\n\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n\t\tthis.setAttribute('class', 'hidden');\n\t};\n\t// Ends placing the current ship\n\tGame.prototype.endPlacing = function(shipType) {\n\t\tdocument.getElementById(shipType).setAttribute('class', 'placed');\n\t\t\n\t\t// Mark the ship as 'used'\n\t\tGame.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED;\n\t\n\t\t// Wipe out the variable when you're done with it\n\t\tGame.placeShipDirection = null;\n\t\tGame.placeShipType = '';\n\t\tGame.placeShipCoords = [];\n\t};\n\t// Checks whether or not all ships are done placing\n\t// Returns boolean\n\tGame.prototype.areAllShipsPlaced = function() {\n\t\tvar playerRoster = document.querySelectorAll('.fleet-roster li');\n\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\tif (playerRoster[i].getAttribute('class') === 'placed') {\n\t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\t// Reset temporary variables\n\t\tGame.placeShipDirection = 0;\n\t\tGame.placeShipType = '';\n\t\tGame.placeShipCoords = [];\n\t\treturn true;\n\t};\n\t// Resets the fog of war\n\tGame.prototype.resetFogOfWar = function() {\n\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\tthis.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n\t\t\t\tthis.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n\t\t\t}\n\t\t}\n\t\t// Reset all values to indicate the ships are ready to be placed again\n\t\tGame.usedShips = Game.usedShips.map(function(){return CONST.UNUSED;});\n\t};\n\t// Resets CSS styling of the sidebar\n\tGame.prototype.resetRosterSidebar = function() {\n\t\t// console.log(document.getElementById('fleetroster'));\n\t\t// var els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t// for (var i = 0; i < els.length; i++) {\n\t\t// \tels[i].removeAttribute('class');\n\t\t// }\n\t\n\t\t// if (gameTutorial.showTutorial) {\n\t\t// \tgameTutorial.nextStep();\n\t\t// } else {\n\t\t// \tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t// }\n\t\t// document.getElementById('rotate-button').removeAttribute('class');\n\t\t// document.getElementById('start-game').setAttribute('class', 'hidden');\n\t\t// if (DEBUG_MODE) {\n\t\t// \tdocument.getElementById('place-randomly').removeAttribute('class');\n\t\t// }\n\t};\n\tGame.prototype.showRestartSidebar = function() {\n\t\tvar sidebar = document.getElementById('restart-sidebar');\n\t\tsidebar.setAttribute('class', 'highlight');\n\t\n\t\t// Deregister listeners\n\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\tcomputerCells[j].removeEventListener('click', this.shootListener, false);\n\t\t}\n\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\tplayerRoster[i].removeEventListener('click', this.rosterListener, false);\n\t\t}\n\t\n\t\tvar restartButton = document.getElementById('restart-game');\n\t\trestartButton.addEventListener('click', this.restartGame, false);\n\t\trestartButton.self = this;\n\t};\n\t// Generates the HTML divs for the grid for both players\n\tGame.prototype.createGrid = function() {\n\t\tvar gridDiv = document.querySelectorAll('.grid');\n\t\tfor (var grid = 0; grid < gridDiv.length; grid++) {\n\t\t\tgridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\t\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\t\tvar el = document.createElement('div');\n\t\t\t\t\tel.setAttribute('data-x', i);\n\t\t\t\t\tel.setAttribute('data-y', j);\n\t\t\t\t\tel.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n\t\t\t\t\tgridDiv[grid].appendChild(el);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Initializes the Game. Also resets the game if previously initialized\n\tGame.prototype.init = function() {\n\t\tthis.humanGrid = new Grid(Game.size);\n\t\tthis.computerGrid = new Grid(Game.size);\n\t\tthis.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n\t\tthis.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n\t\n\t\tthis.robot = new AI(this);\n\t\t//Game.stats = new Stats();\n\t\t//Game.stats.updateStatsSidebar();\n\t\n\t\t// Reset game variables\n\t\tthis.shotsTaken = 0;\n\t\tthis.readyToPlay = false;\n\t\tthis.placingOnGrid = false;\n\t\tGame.placeShipDirection = 0;\n\t\tGame.placeShipType = '';\n\t\tGame.placeShipCoords = [];\n\t\n\t\tthis.resetRosterSidebar();\n\t\n\t\t// Add a click listener for the Grid.shoot() method for all cells\n\t\t// Only add this listener to the computer's grid\n\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\tcomputerCells[j].self = this;\n\t\t\tcomputerCells[j].addEventListener('click', this.shootListener, false);\n\t\t}\n\t\n\t\t// Add a click listener to the roster\t\n\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\tplayerRoster[i].self = this;\n\t\t\tplayerRoster[i].addEventListener('click', this.rosterListener, false);\n\t\t}\n\t\n\t\t// Add a click listener to the human player's grid while placing\n\t\tvar humanCells = document.querySelector('.human-player').childNodes;\n\t\tfor (var k = 0; k < humanCells.length; k++) {\n\t\t\thumanCells[k].self = this;\n\t\t\thumanCells[k].addEventListener('click', this.placementListener, false);\n\t\t\thumanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n\t\t\thumanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n\t\t}\n\t\n\t\tvar rotateButton = document.getElementById('rotate-button');\n\t\trotateButton.addEventListener('click', this.toggleRotation, false);\n\t\tvar startButton = document.getElementById('start-game');\n\t\tstartButton.self = this;\n\t\tstartButton.addEventListener('click', this.startGame, false);\n\t\t// var resetButton = document.getElementById('reset-stats');\n\t\t// resetButton.addEventListener('click', Game.stats.resetStats, false);\n\t\tvar randomButton = document.getElementById('place-randomly');\n\t\trandomButton.self = this;\n\t\trandomButton.addEventListener('click', this.placeRandomly, false);\n\t\tthis.computerFleet.placeShipsRandomly();\n\t};\n\t\n\t// Grid object\n\t// Constructor\n\tfunction Grid(size) {\n\t\tthis.size = size;\n\t\tthis.cells = [];\n\t\tthis.init();\n\t}\n\t\n\t// Initialize and populate the grid\n\tGrid.prototype.init = function() {\n\t\tfor (var x = 0; x < this.size; x++) {\n\t\t\tvar row = [];\n\t\t\tthis.cells[x] = row;\n\t\t\tfor (var y = 0; y < this.size; y++) {\n\t\t\t\trow.push(CONST.TYPE_EMPTY);\n\t\t\t}\n\t\t}\n\t};\n\t\n\t// Updates the cell's CSS class based on the type passed in\n\tGrid.prototype.updateCell = function(x, y, type, targetPlayer) {\n\t\tvar player;\n\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\tplayer = 'human-player';\n\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\tplayer = 'computer-player';\n\t\t} else {\n\t\t\t// Should never be called\n\t\t\tconsole.log(\"There was an error trying to find the correct player's grid\");\n\t\t}\n\t\n\t\tswitch (type) {\n\t\t\tcase CONST.CSS_TYPE_EMPTY:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\tbreak;\n\t\t\tcase CONST.CSS_TYPE_SHIP:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_SHIP;\n\t\t\t\tbreak;\n\t\t\tcase CONST.CSS_TYPE_MISS:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_MISS;\n\t\t\t\tbreak;\n\t\t\tcase CONST.CSS_TYPE_HIT:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_HIT;\n\t\t\t\tbreak;\n\t\t\tcase CONST.CSS_TYPE_SUNK:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_SUNK;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\tbreak;\n\t\t}\n\t\tvar classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n\t\tdocument.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n\t};\n\t// Checks to see if a cell contains an undamaged ship\n\t// Returns boolean\n\tGrid.prototype.isUndamagedShip = function(x, y) {\n\t\treturn this.cells[x][y] === CONST.TYPE_SHIP;\n\t};\n\t// Checks to see if the shot was missed. This is equivalent\n\t// to checking if a cell contains a cannonball\n\t// Returns boolean\n\tGrid.prototype.isMiss = function(x, y) {\n\t\treturn this.cells[x][y] === CONST.TYPE_MISS;\n\t};\n\t// Checks to see if a cell contains a damaged ship,\n\t// either hit or sunk.\n\t// Returns boolean\n\tGrid.prototype.isDamagedShip = function(x, y) {\n\t\treturn this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n\t};\n\t\n\t// Fleet object\n\t// This object is used to keep track of a player's portfolio of ships\n\t// Constructor\n\tfunction Fleet(playerGrid, player) {\n\t\tthis.numShips = CONST.AVAILABLE_SHIPS.length;\n\t\tthis.playerGrid = playerGrid;\n\t\tthis.player = player;\n\t\tthis.fleetRoster = [];\n\t\tthis.populate();\n\t}\n\t// Populates a fleet\n\tFleet.prototype.populate = function() {\n\t\tfor (var i = 0; i < this.numShips; i++) {\n\t\t\t// loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n\t\t\tvar j = i % CONST.AVAILABLE_SHIPS.length;\n\t\t\tthis.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n\t\t}\n\t};\n\t// Places the ship and returns whether or not the placement was successful\n\t// Returns boolean\n\tFleet.prototype.placeShip = function(x, y, direction, shipType) {\n\t\tvar shipCoords;\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\tvar shipTypes = this.fleetRoster[i].type;\n\t\n\t\t\tif (shipType === shipTypes &&\n\t\t\t\tthis.fleetRoster[i].isLegal(x, y, direction)) {\n\t\t\t\tthis.fleetRoster[i].create(x, y, direction, false);\n\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\n\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\t// Places ships randomly on the board\n\t// TODO: Avoid placing ships too close to each other\n\tFleet.prototype.placeShipsRandomly = function() {\n\t\tvar shipCoords;\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\tvar illegalPlacement = true;\n\t\t\n\t\t\t// Prevents the random placement of already placed ships\n\t\t\tif(this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\twhile (illegalPlacement) {\n\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\n\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\n\t\t\t\tvar randomDirection = Math.floor(2*Math.random());\n\t\t\t\t\n\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\t\t\tillegalPlacement = false;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t\tGame.usedShips[i] = CONST.USED;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Finds a ship by location\n\t// Returns the ship object located at (x, y)\n\t// If no ship exists at (x, y), this returns null instead\n\tFleet.prototype.findShipByCoords = function(x, y) {\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\tvar currentShip = this.fleetRoster[i];\n\t\t\tif (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\tif (y === currentShip.yPosition &&\n\t\t\t\t\tx >= currentShip.xPosition &&\n\t\t\t\t\tx < currentShip.xPosition + currentShip.shipLength) {\n\t\t\t\t\treturn currentShip;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (x === currentShip.xPosition &&\n\t\t\t\t\ty >= currentShip.yPosition &&\n\t\t\t\t\ty < currentShip.yPosition + currentShip.shipLength) {\n\t\t\t\t\treturn currentShip;\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t// Finds a ship by its type\n\t// Param shipType is a string\n\t// Returns the ship object that is of type shipType\n\t// If no ship exists, this returns null.\n\tFleet.prototype.findShipByType = function(shipType) {\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\tif (this.fleetRoster[i].type === shipType) {\n\t\t\t\treturn this.fleetRoster[i];\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t};\n\t// Checks to see if all ships have been sunk\n\t// Returns boolean\n\tFleet.prototype.allShipsSunk = function() {\n\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t// If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n\t\t\tif (this.fleetRoster[i].sunk === false) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t};\n\t\n\t// Ship object\n\t// Constructor\n\tfunction Ship(type, playerGrid, player) {\n\t\tthis.damage = 0;\n\t\tthis.type = type;\n\t\tthis.playerGrid = playerGrid;\n\t\tthis.player = player;\n\t\n\t\tswitch (this.type) {\n\t\t\tcase CONST.AVAILABLE_SHIPS[0]:\n\t\t\t\tthis.shipLength = 1;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[1]:\n\t\t\t\tthis.shipLength = 1;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[2]:\n\t\t\t\tthis.shipLength = 1;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[3]:\n\t\t\t\tthis.shipLength = 1;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[4]:\n\t\t\t\tthis.shipLength = 2;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[5]:\n\t\t\t\tthis.shipLength = 2;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[6]:\n\t\t\t\tthis.shipLength = 2;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[7]:\n\t\t\t\tthis.shipLength = 3;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[8]:\n\t\t\t\tthis.shipLength = 3;\n\t\t\t\tbreak;\n\t\t\tcase CONST.AVAILABLE_SHIPS[9]:\n\t\t\t\tthis.shipLength = 4;\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.maxDamage = this.shipLength;\n\t\tthis.sunk = false;\n\t}\n\t// Checks to see if the placement of a ship is legal\n\t// Returns boolean\n\tShip.prototype.isLegal = function(x, y, direction) {\n\t\t// first, check if the ship is within the grid...\n\t\tif (this.withinBounds(x, y, direction)) {\n\t\t\t// ...then check to make sure it doesn't collide with another ship\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tif (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_MISS ||\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_MISS ||\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED){\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t};\n\t// Checks to see if the ship is within bounds of the grid\n\t// Returns boolean\n\tShip.prototype.withinBounds = function(x, y, direction) {\n\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\treturn x + this.shipLength <= Game.size;\n\t\t} else {\n\t\t\treturn y + this.shipLength <= Game.size;\n\t\t}\n\t};\n\t\n\t// Increments the damage counter of a ship\n\t// Returns Ship\n\tShip.prototype.incrementDamage = function() {\n\t\tthis.damage++;\n\t\tif (this.isSunk()) {\n\t\t\tthis.sinkShip(false); // Sinks the ship\n\t\t}\n\t};\n\t// Checks to see if the ship is sunk\n\t// Returns boolean\n\tShip.prototype.isSunk = function() {\n\t\treturn this.damage >= this.maxDamage;\n\t};\n\t// Sinks the ship\n\tShip.prototype.sinkShip = function(virtual) {\n\t\tthis.damage = this.maxDamage; // Force the damage to exceed max damage\n\t\tthis.sunk = true;\n\t\n\t\t// Make the CSS class sunk, but only if the ship is not virtual\n\t\tif (!virtual) {\n\t\t\tvar allCells = this.getAllShipCells();\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tthis.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n\t\t\t}\n\t\t}\n\t};\n\t/**\n\t * Gets all the ship cells\n\t *\n\t * Returns an array with all (x, y) coordinates of the ship:\n\t * e.g.\n\t * [\n\t *\t{'x':2, 'y':2},\n\t *\t{'x':3, 'y':2},\n\t *\t{'x':4, 'y':2}\n\t * ]\n\t */\n\tShip.prototype.getAllShipCells = function() {\n\t\tvar resultObject = [];\n\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\tresultObject[i] = {'x': this.xPosition + i, 'y': this.yPosition};\n\t\t\t} else {\n\t\t\t\tresultObject[i] = {'x': this.xPosition, 'y': this.yPosition + i};\n\t\t\t}\n\t\t}\n\t\treturn resultObject;\n\t};\n\t// Initializes a ship with the given coordinates and direction (bearing).\n\t// If the ship is declared \"virtual\", then the ship gets initialized with\n\t// its coordinates but DOESN'T get placed on the grid.\n\tShip.prototype.create = function(x, y, direction, virtual) {\n\t\t// This function assumes that you've already checked that the placement is legal\n\t\tthis.xPosition = x;\n\t\tthis.yPosition = y;\n\t\tthis.direction = direction;\n\t\n\t\t// If the ship is virtual, don't add it to the grid.\n\t\tif (!virtual) {\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tthis.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n\t\t\t\t\tif(this.checkPosition(x + i, y + 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x + i, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tthis.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\t\t\t\t\t\n\t\t\t\t\tif(this.checkPosition(x + 1, y + i)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif(this.checkPosition(x - 1, y + i)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\tif(this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x - 1, y)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x - 1, y + 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x + this.shipLength, y - 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x + this.shipLength, y)) {\n\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED; \n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x + this.shipLength, y + 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\tif(this.checkPosition(x + 1, y - 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x, y-1)) {\n\t\t\t\t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x + 1, y + this.shipLength)) {\n\t\t\t\t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x - 1, y + this.shipLength)) {\n\t\t\t\t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t\tif(this.checkPosition(x, y + this.shipLength)) {\n\t\t\t\t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t}\n\t\t\t}\n\t\t}\t\t\n\t};\n\n\tShip.prototype.checkPosition = function(x, y) {\n\t\tlet triger = false;\n\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\n\t\t\ttriger = true;\n\t\t}\n\t\treturn triger\n\t};\n\t// direction === 0 when the ship is facing north/south\n\t// direction === 1 when the ship is facing east/west\n\tShip.DIRECTION_VERTICAL = 0;\n\tShip.DIRECTION_HORIZONTAL = 1;\n\t\n\t// Tutorial Object\n\t// Constructor\n\tfunction Tutorial() {\n\t\tthis.currentStep = 0;\n\t\t// Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\t\tthis.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n\t}\n\t// Advances the tutorial to the next step\n\tTutorial.prototype.nextStep = function() {\n\t\tvar humanGrid = document.querySelector('.human-player');\n\t\tvar computerGrid = document.querySelector('.computer-player');\n\t\tswitch (this.currentStep) {\n\t\t\tcase 0:\n\t\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'highlight');\n\t\t\t\tdocument.getElementById('step1').setAttribute('class', 'current-step');\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t\t\tdocument.getElementById('step1').removeAttribute('class');\n\t\t\t\thumanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\n\t\t\t\tdocument.getElementById('step2').setAttribute('class', 'current-step');\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tdocument.getElementById('step2').removeAttribute('class');\n\t\t\t\tvar humanClasses = humanGrid.getAttribute('class');\n\t\t\t\thumanClasses = humanClasses.replace(' highlight', '');\n\t\t\t\thumanGrid.setAttribute('class', humanClasses);\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tcomputerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\n\t\t\t\tdocument.getElementById('step3').setAttribute('class', 'current-step');\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\tvar computerClasses = computerGrid.getAttribute('class');\n\t\t\t\tdocument.getElementById('step3').removeAttribute('class');\n\t\t\t\tcomputerClasses = computerClasses.replace(' highlight', '');\n\t\t\t\tcomputerGrid.setAttribute('class', computerClasses);\n\t\t\t\tdocument.getElementById('step4').setAttribute('class', 'current-step');\n\t\t\t\tthis.currentStep++;\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\tdocument.getElementById('step4').removeAttribute('class');\n\t\t\t\tthis.currentStep = 6;\n\t\t\t\tthis.showTutorial = false;\n\t\t\t\tlocalStorage.setItem('showTutorial', false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\t\n\t// AI Object\n\t// Optimal battleship-playing AI\n\t// Constructor\n\tfunction AI(gameObject) {\n\t\tthis.gameObject = gameObject;\n\t\tthis.virtualGrid = new Grid(Game.size);\n\t\tthis.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n\t\n\t\tthis.probGrid = []; // Probability Grid\n\t\tthis.initProbs();\n\t\tthis.updateProbs();\n\t}\n\tAI.PROB_WEIGHT = 5000; // arbitrarily big number\n\t// how much weight to give to the opening book's high probability cells\n\tAI.OPEN_HIGH_MIN = 20;\n\tAI.OPEN_HIGH_MAX = 30;\n\t// how much weight to give to the opening book's medium probability cells\n\tAI.OPEN_MED_MIN = 15;\n\tAI.OPEN_MED_MAX = 25;\n\t// how much weight to give to the opening book's low probability cells\n\tAI.OPEN_LOW_MIN = 10;\n\tAI.OPEN_LOW_MAX = 20;\n\t// Amount of randomness when selecting between cells of equal probability\n\tAI.RANDOMNESS = 0.1;\n\t// AI's opening book.\n\t// This is the pattern of the first cells for the AI to target\n\tAI.OPENINGS = [\n\t\t{'x': 7, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 6, 'y': 2, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 3, 'y': 7, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 2, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 6, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 3, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 5, 'y': 5, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t{'x': 4, 'y': 4, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)},\n\t\t// {'x': 9, 'y': 5, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t// {'x': 0, 'y': 4, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t// {'x': 5, 'y': 9, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t// {'x': 4, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t{'x': 0, 'y': 8, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t{'x': 1, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t{'x': 8, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)},\n\t\t{'x': 9, 'y': 1, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t{'x': 9, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)},\n\t\t{'x': 0, 'y': 0, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)}\n\t];\n\t// Scouts the grid based on max probability, and shoots at the cell\n\t// that has the highest probability of containing a ship\n\tAI.prototype.shoot = function() {\n\t\tvar maxProbability = 0;\n\t\tvar maxProbCoords;\n\t\tvar maxProbs = [];\n\t\t\n\t\t// Add the AI's opening book to the probability grid\n\t\tfor (var i = 0; i < AI.OPENINGS.length; i++) {\n\t\t\tvar cell = AI.OPENINGS[i];\n\t\t\tif (this.probGrid[cell.x][cell.y] !== 0) {\n\t\t\t\tthis.probGrid[cell.x][cell.y] += cell.weight;\n\t\t\t}\n\t\t}\n\t\n\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\tif (this.probGrid[x][y] > maxProbability) {\n\t\t\t\t\tmaxProbability = this.probGrid[x][y];\n\t\t\t\t\tmaxProbs = [{'x': x, 'y': y}]; // Replace the array\n\t\t\t\t} else if (this.probGrid[x][y] === maxProbability) {\n\t\t\t\t\tmaxProbs.push({'x': x, 'y': y});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\tmaxProbCoords = Math.random() < AI.RANDOMNESS ?\n\t\tmaxProbs[Math.floor(Math.random() * maxProbs.length)] :\n\t\tmaxProbs[0];\n\t\n\t\tvar result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER);\n\t\t\n\t\t// If the game ends, the next lines need to be skipped.\n\t\tif (Game.gameOver) {\n\t\t\tGame.gameOver = false;\n\t\t\treturn;\n\t\t}\n\t\n\t\tthis.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result;\n\t\n\t\t// If you hit a ship, check to make sure if you've sunk it.\n\t\tif (result === CONST.TYPE_HIT) {\n\t\t\tvar humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\t\t\tif (humanShip.isSunk()) {\n\t\t\t\t// Remove any ships from the roster that have been sunk\n\t\t\t\tvar shipTypes = [];\n\t\t\t\tfor (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n\t\t\t\t\tshipTypes.push(this.virtualFleet.fleetRoster[k].type);\n\t\t\t\t}\n\t\t\t\tvar index = shipTypes.indexOf(humanShip.type);\n\t\t\t\tthis.virtualFleet.fleetRoster.splice(index, 1);\n\t\n\t\t\t\t// Update the virtual grid with the sunk ship's cells\n\t\t\t\tvar shipCells = humanShip.getAllShipCells();\n\t\t\t\tfor (var _i = 0; _i < shipCells.length; _i++) {\n\t\t\t\t\tthis.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Update probability grid after each shot\n\t\tthis.updateProbs();\n\t};\n\t// Update the probability grid\n\tAI.prototype.updateProbs = function() {\n\t\tvar roster = this.virtualFleet.fleetRoster;\n\t\tvar coords;\n\t\tthis.resetProbs();\n\t\n\t\t// Probabilities are not normalized to fit in the interval [0, 1]\n\t\t// because we're only interested in the maximum value.\n\t\n\t\t// This works by trying to fit each ship in each cell in every orientation\n\t\t// For every cell, the more legal ways a ship can pass through it, the more\n\t\t// likely the cell is to contain a ship.\n\t\t// Cells that surround known 'hits' are given an arbitrarily large probability\n\t\t// so that the AI tries to completely sink the ship before moving on.\n\t\n\t\t// TODO: Think about a more efficient implementation\n\t\tfor (var k = 0; k < roster.length; k++) {\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\tfor (var i = 0; i < coords.length; i++) {\n\t\t\t\t\t\t\t\tthis.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var _i = 0; _i < coords.length; _i++) {\n\t\t\t\t\t\t\t\tthis.probGrid[coords[_i].x][coords[_i].y]++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\tfor (var j = 0; j < coords.length; j++) {\n\t\t\t\t\t\t\t\tthis.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfor (var _j = 0; _j < coords.length; _j++) {\n\t\t\t\t\t\t\t\tthis.probGrid[coords[_j].x][coords[_j].y]++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\n\t\t\t\t\t// Set hit cells to probability zero so the AI doesn't\n\t\t\t\t\t// target cells that are already hit\n\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n\t\t\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\t// Initializes the probability grid for targeting\n\tAI.prototype.initProbs = function() {\n\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\tvar row = [];\n\t\t\tthis.probGrid[x] = row;\n\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\trow.push(0);\n\t\t\t}\n\t\t}\n\t};\n\t// Resets the probability grid to all 0.\n\tAI.prototype.resetProbs = function() {\n\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t}\n\t\t}\n\t};\n\tAI.prototype.metagame = function() {\n\t\t// Inputs:\n\t\t// Proximity of hit cells to edge\n\t\t// Proximity of hit cells to each other\n\t\t// Edit the probability grid by multiplying each cell with a new probability weight (e.g. 0.4, or 3). Set this as a CONST and make 1-CONST the inverse for decreasing, or 2*CONST for increasing\n\t};\n\t// Finds a human ship by coordinates\n\t// Returns Ship\n\tAI.prototype.findHumanShip = function(x, y) {\n\t\treturn this.gameObject.humanFleet.findShipByCoords(x, y);\n\t};\n\t// Checks whether or not a given ship's cells passes through\n\t// any cell that is hit.\n\t// Returns boolean\n\tAI.prototype.passesThroughHitCell = function(shipCells) {\n\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t};\n\t// Gives the number of hit cells the ships passes through. The more\n\t// cells this is, the more probable the ship exists in those coordinates\n\t// Returns int\n\tAI.prototype.numHitCellsCovered = function(shipCells) {\n\t\tvar cells = 0;\n\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\tcells++;\n\t\t\t}\n\t\t}\n\t\treturn cells;\n\t};\n\t\n\t// Global constant only initialized once\n\tvar gameTutorial = new Tutorial();\n\t\n\t// Start the game\n\tvar mainGame = new Game(10);\n\t\n\t})();\n\t\n\t// Browser compatability workaround for transition end event names.\n\t// From modernizr: http://stackoverflow.com/a/9090128\n\tfunction transitionEndEventName() {\n\t\tvar i,\n\t\t\tundefined,\n\t\t\tel = document.createElement('div'),\n\t\t\ttransitions = {\n\t\t\t\t'transition':'transitionend',\n\t\t\t\t'OTransition':'otransitionend',  // oTransitionEnd in very old Opera\n\t\t\t\t'MozTransition':'transitionend',\n\t\t\t\t'WebkitTransition':'webkitTransitionEnd'\n\t\t\t};\n\n\t\tfor (i in transitions) {\n\t\t\tif (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n\t\t\t\treturn transitions[i];\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Returns a random number between min (inclusive) and max (exclusive)\n\tfunction getRandom(min, max) {\n\t\treturn Math.random() * (max - min) + min;\n\t}"]},"metadata":{},"sourceType":"module"}