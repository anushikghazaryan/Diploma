{"ast":null,"code":"var _jsxFileName = \"/home/anushik/Desktop/dip/seebattle/src/components/GameComponent.jsx\";\nimport React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\nimport './styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BattlesComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.mainGame = () => {\n      var CONST = {};\n      CONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1']; // You are player 0 and the computer is player 1\n      // The virtual player is used for generating temporary ships\n      // for calculating the probability heatmap\n\n      CONST.HUMAN_PLAYER = 0;\n      CONST.COMPUTER_PLAYER = 1;\n      CONST.VIRTUAL_PLAYER = 2;\n      CONST.CSS_TYPE_EMPTY = 'empty';\n      CONST.CSS_TYPE_SHIP = 'ship';\n      CONST.CSS_TYPE_MISS = 'miss';\n      CONST.CSS_TYPE_HIT = 'hit';\n      CONST.CSS_TYPE_SUNK = 'sunk';\n      CONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\n      CONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\n      CONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\n      CONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\n      CONST.TYPE_SUNK = 4; // 4 = sunk ship\n\n      CONST.TYPE_NOT_ALLOWED = 5; // 5 = neighbour of ship\n\n      Game.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n      CONST.USED = 1;\n      CONST.UNUSED = 0;\n\n      function Game(size) {\n        Game.size = size;\n        this.shotsTaken = 0;\n        this.createGrid();\n        this.init();\n      }\n\n      Game.size = 10; // Default grid size is 10x10\n\n      Game.gameOver = false; // Checks if the game is won, and if it is, re-initializes the game\n\n      Game.prototype.checkIfWon = function () {\n        if (this.computerFleet.allShipsSunk()) {\n          alert('Congratulations, you win!');\n          Game.gameOver = true;\n          this.showRestartSidebar();\n        } else if (this.humanFleet.allShipsSunk()) {\n          alert('Yarr! The computer sank all your ships. Try again.');\n          Game.gameOver = true;\n          this.showRestartSidebar();\n        }\n      }; // Shoots at the target player on the grid.\n      // Returns {int} Constants.TYPE: What the shot uncovered\n\n\n      Game.prototype.shoot = function (x, y, targetPlayer) {\n        let targetGrid;\n        let targetFleet;\n\n        if (targetPlayer === CONST.HUMAN_PLAYER) {\n          targetGrid = this.humanGrid;\n          targetFleet = this.humanFleet;\n        } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n          targetGrid = this.computerGrid;\n          targetFleet = this.computerFleet;\n        }\n\n        if (targetGrid.isDamagedShip(x, y)) {\n          return null;\n        } else if (targetGrid.isMiss(x, y)) {\n          return null;\n        } else if (targetGrid.isUndamagedShip(x, y)) {\n          // update the board/grid\n          targetGrid.updateCell(x, y, 'hit', targetPlayer); // IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n          // because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\n          targetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\n          this.checkIfWon();\n          return CONST.TYPE_HIT;\n        } else {\n          targetGrid.updateCell(x, y, 'miss', targetPlayer);\n          this.checkIfWon();\n          return CONST.TYPE_MISS;\n        }\n      }; // Creates click event listeners on each one of the 100 grid cells\n\n\n      Game.prototype.shootListener = function (e) {\n        var self = e.target.self; // Extract coordinates from event listener\n\n        var x = parseInt(e.target.getAttribute('data-x'), 10);\n        var y = parseInt(e.target.getAttribute('data-y'), 10);\n        var result = null;\n\n        if (self.readyToPlay) {\n          result = self.shoot(x, y, CONST.COMPUTER_PLAYER); // Remove the tutorial arrow\n\n          if (gameTutorial.showTutorial) {\n            gameTutorial.nextStep();\n          }\n        }\n\n        if (result !== null && !Game.gameOver) {\n          // The AI shoots iff the player clicks on a cell that he/she hasn't\n          // already clicked on yet\n          self.robot.shoot();\n        } else {\n          Game.gameOver = false;\n        }\n      }; // Creates click event listeners on each of the ship names in the roster\n\n\n      Game.prototype.rosterListener = function (e) {\n        var self = e.target.self; // Remove all classes of 'placing' from the fleet roster first\n\n        var roster = document.querySelectorAll('.fleet-roster li');\n\n        for (var i = 0; i < roster.length; i++) {\n          var classes = roster[i].getAttribute('class') || '';\n          classes = classes.replace('placing', '');\n          roster[i].setAttribute('class', classes);\n        } // Move the highlight to the next step\n\n\n        if (gameTutorial.currentStep === 1) {\n          gameTutorial.nextStep();\n        } // Set the class of the target ship to 'placing'\n\n\n        Game.placeShipType = e.target.getAttribute('id');\n        document.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n        Game.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n        self.placingOnGrid = true;\n      }; // Creates click event listeners on the human player's grid to handle\n      // ship placement after the user has selected a ship name\n\n\n      Game.prototype.placementListener = function (e) {\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          // Extract coordinates from event listener\n          var x = parseInt(e.target.getAttribute('data-x'), 10);\n          var y = parseInt(e.target.getAttribute('data-y'), 10); // Don't screw up the direction if the user tries to place again.\n\n          var successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\n          if (successful) {\n            // Done placing this ship\n            self.endPlacing(Game.placeShipType); // Remove the helper arrow\n\n            if (gameTutorial.currentStep === 2) {\n              gameTutorial.nextStep();\n            }\n\n            self.placingOnGrid = false;\n\n            if (self.areAllShipsPlaced()) {\n              var el = document.getElementById('rotate-button');\n              el.addEventListener(transitionEndEventName(), function () {\n                el.setAttribute('class', 'hidden');\n\n                if (gameTutorial.showTutorial) {\n                  document.getElementById('start-game').setAttribute('class', 'highlight');\n                } else {\n                  document.getElementById('start-game').removeAttribute('class');\n                }\n              }, false);\n              el.setAttribute('class', 'invisible');\n            }\n          }\n        }\n      }; // Creates mouseover event listeners that handles mouseover on the\n      // human player's grid to draw a phantom ship implying that the user\n      // is allowed to place a ship there\n\n\n      Game.prototype.placementMouseover = function (e) {\n        // conlose.log(\"placementMouseover\");\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          var x = parseInt(e.target.getAttribute('data-x'), 10);\n          var y = parseInt(e.target.getAttribute('data-y'), 10);\n          var classes;\n          var fleetRoster = self.humanFleet.fleetRoster;\n\n          for (var i = 0; i < fleetRoster.length; i++) {\n            var shipType = fleetRoster[i].type;\n\n            if (Game.placeShipType === shipType && fleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n              for (var j = 0; j < Game.placeShipCoords.length; j++) {\n                var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n                classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n                if (classes.indexOf(' grid-ship') < 0) {\n                  classes += ' grid-ship';\n                  el.setAttribute('class', classes);\n                }\n              }\n            }\n          }\n        }\n      }; // Creates mouseout event listeners that un-draws the phantom ship\n      // on the human player's grid as the user hovers over a different cell\n\n\n      Game.prototype.placementMouseout = function (e) {\n        // console.log(\"on placementMouseout\");\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          for (var j = 0; j < Game.placeShipCoords.length; j++) {\n            var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n            var classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n            if (classes.indexOf(' grid-ship') > -1) {\n              classes = classes.replace(' grid-ship', '');\n              el.setAttribute('class', classes);\n            }\n          }\n        }\n      }; // Click handler for the Rotate Ship button\n\n\n      Game.prototype.toggleRotation = function (e) {\n        // Toggle rotation direction\n        var direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\n        if (direction === Ship.DIRECTION_VERTICAL) {\n          e.target.setAttribute('data-direction', '1');\n          Game.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n        } else if (direction === Ship.DIRECTION_HORIZONTAL) {\n          e.target.setAttribute('data-direction', '0');\n          Game.placeShipDirection = Ship.DIRECTION_VERTICAL;\n        }\n      }; // Click handler for the Start Game button\n\n\n      Game.prototype.startGame = function (e) {\n        var self = e.target.self;\n        var el = document.getElementById('roster-sidebar');\n\n        var fn = function () {\n          el.setAttribute('class', 'hidden');\n        };\n\n        el.addEventListener(transitionEndEventName(), fn, false);\n        el.setAttribute('class', 'invisible');\n        self.readyToPlay = true; // Advanced the tutorial step\n\n        if (gameTutorial.currentStep === 3) {\n          gameTutorial.nextStep();\n        }\n\n        el.removeEventListener(transitionEndEventName(), fn, false);\n      }; // Click handler for Restart Game button\n\n\n      Game.prototype.restartGame = function (e) {\n        window.location.reload();\n      }; // // Debugging function used to place all ships and just start\n      // Game.prototype.placeRandomly = function (e) {\n      // \te.target.removeEventListener(e.type, arguments.callee);\n      // \te.target.self.humanFleet.placeShipsRandomly();\n      // \te.target.self.readyToPlay = true;\n      // \tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n      // \tthis.setAttribute('class', 'hidden');\n      // };\n      // Ends placing the current ship\n\n\n      Game.prototype.endPlacing = function (shipType) {\n        document.getElementById(shipType).setAttribute('class', 'placed'); // Mark the ship as 'used'\n\n        Game.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED; // Wipe out the variable when you're done with it\n\n        Game.placeShipDirection = null;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n      }; // Checks whether or not all ships are done placing\n      // Returns boolean\n\n\n      Game.prototype.areAllShipsPlaced = function () {\n        var playerRoster = document.querySelectorAll('.fleet-roster li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          if (playerRoster[i].getAttribute('class') === 'placed') {\n            continue;\n          } else {\n            return false;\n          }\n        } // Reset temporary variables\n\n\n        Game.placeShipDirection = 0;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n        return true;\n      }; // Resets the fog of war\n\n\n      Game.prototype.resetFogOfWar = function () {\n        for (var i = 0; i < Game.size; i++) {\n          for (var j = 0; j < Game.size; j++) {\n            this.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n            this.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n          }\n        } // Reset all values to indicate the ships are ready to be placed again\n\n\n        Game.usedShips = Game.usedShips.map(function () {\n          return CONST.UNUSED;\n        });\n      }; // Resets CSS styling of the sidebar\n\n\n      Game.prototype.resetRosterSidebar = function () {\n        var els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < els.length; i++) {\n          els[i].removeAttribute('class');\n        }\n\n        if (gameTutorial.showTutorial) {\n          gameTutorial.nextStep();\n        } else {\n          document.getElementById('roster-sidebar').removeAttribute('class');\n        }\n\n        document.getElementById('rotate-button').removeAttribute('class');\n        document.getElementById('start-game').setAttribute('class', 'hidden');\n      };\n\n      Game.prototype.showRestartSidebar = function () {\n        var sidebar = document.getElementById('restart-sidebar');\n        sidebar.setAttribute('class', 'highlight'); // Deregister listeners\n\n        var computerCells = document.querySelector('.computer-player').childNodes;\n\n        for (var j = 0; j < computerCells.length; j++) {\n          computerCells[j].removeEventListener('click', this.shootListener, false);\n        }\n\n        var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          playerRoster[i].removeEventListener('click', this.rosterListener, false);\n        }\n\n        var restartButton = document.getElementById('restart-game');\n        restartButton.addEventListener('click', this.restartGame, false);\n        restartButton.self = this;\n      }; // Generates the HTML divs for the grid for both players\n\n\n      Game.prototype.createGrid = function () {\n        var gridDiv = document.querySelectorAll('.grid');\n\n        for (var grid = 0; grid < gridDiv.length; grid++) {\n          gridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\n          for (var i = 0; i < Game.size; i++) {\n            for (var j = 0; j < Game.size; j++) {\n              var el = document.createElement('div');\n              el.setAttribute('data-x', i);\n              el.setAttribute('data-y', j);\n              el.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n              gridDiv[grid].appendChild(el);\n            }\n          }\n        }\n      }; // Initializes the Game\n\n\n      Game.prototype.init = function () {\n        this.humanGrid = new Grid(Game.size);\n        this.computerGrid = new Grid(Game.size);\n        this.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n        this.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n        this.robot = new AI(this); // Reset game variables\n\n        this.shotsTaken = 0;\n        this.readyToPlay = false;\n        this.placingOnGrid = false;\n        Game.placeShipDirection = 0;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n        this.resetRosterSidebar(); // Add a click listener for the Grid.shoot() method for all cells\n        // Only add this listener to the computer's grid\n\n        var computerCells = document.querySelector('.computer-player').childNodes;\n\n        for (var j = 0; j < computerCells.length; j++) {\n          computerCells[j].self = this;\n          computerCells[j].addEventListener('click', this.shootListener, false);\n        } // Add a click listener to the roster\t\n\n\n        var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          playerRoster[i].self = this;\n          playerRoster[i].addEventListener('click', this.rosterListener, false);\n        } // Add a click listener to the human player's grid while placing\n\n\n        var humanCells = document.querySelector('.human-player').childNodes;\n\n        for (var k = 0; k < humanCells.length; k++) {\n          humanCells[k].self = this;\n          humanCells[k].addEventListener('click', this.placementListener, false);\n          humanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n          humanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n        }\n\n        var rotateButton = document.getElementById('rotate-button');\n        rotateButton.addEventListener('click', this.toggleRotation, false);\n        var startButton = document.getElementById('start-game');\n        startButton.self = this;\n        startButton.addEventListener('click', this.startGame, false); // var resetButton = document.getElementById('reset-stats');\n        // resetButton.addEventListener('click', Game.stats.resetStats, false);\n\n        var randomButton = document.getElementById('place-randomly');\n        randomButton.self = this;\n        randomButton.addEventListener('click', this.placeRandomly, false); // this.computerFleet.placeShipsRandomly();\n\n        this.computerFleet.placeShipsRandomlyComp();\n      }; // Grid object\n      // Constructor\n\n\n      function Grid(size) {\n        this.size = size;\n        this.cells = [];\n        this.init();\n      } // Initialize and populate the grid\n\n\n      Grid.prototype.init = function () {\n        for (var x = 0; x < this.size; x++) {\n          var row = [];\n          this.cells[x] = row;\n\n          for (var y = 0; y < this.size; y++) {\n            row.push(CONST.TYPE_EMPTY);\n          }\n        }\n      }; // Updates the cell's CSS class based on the type passed in\n\n\n      Grid.prototype.updateCell = function (x, y, type, targetPlayer) {\n        var player;\n\n        if (targetPlayer === CONST.HUMAN_PLAYER) {\n          player = 'human-player';\n        } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n          player = 'computer-player';\n        }\n\n        switch (type) {\n          case CONST.CSS_TYPE_EMPTY:\n            this.cells[x][y] = CONST.TYPE_EMPTY;\n            break;\n\n          case CONST.CSS_TYPE_SHIP:\n            this.cells[x][y] = CONST.TYPE_SHIP;\n            break;\n\n          case CONST.CSS_TYPE_MISS:\n            this.cells[x][y] = CONST.TYPE_MISS;\n            break;\n\n          case CONST.CSS_TYPE_HIT:\n            this.cells[x][y] = CONST.TYPE_HIT;\n            break;\n\n          case CONST.CSS_TYPE_SUNK:\n            this.cells[x][y] = CONST.TYPE_SUNK;\n            break;\n\n          default:\n            this.cells[x][y] = CONST.TYPE_EMPTY;\n            break;\n        }\n\n        var classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n        document.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n      }; // Checks to see if a cell contains an undamaged ship\n      // Returns boolean\n\n\n      Grid.prototype.isUndamagedShip = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_SHIP;\n      }; // Checks to see if the shot was missed. This is equivalent\n      // to checking if a cell contains a cannonball\n      // Returns boolean\n\n\n      Grid.prototype.isMiss = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_MISS;\n      }; // Checks to see if a cell contains a damaged ship,\n      // either hit or sunk.\n      // Returns boolean\n\n\n      Grid.prototype.isDamagedShip = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n      }; // Fleet object\n      // This object is used to keep track of a player's portfolio of ships\n      // Constructor\n\n\n      function Fleet(playerGrid, player) {\n        this.numShips = CONST.AVAILABLE_SHIPS.length;\n        this.playerGrid = playerGrid;\n        this.player = player;\n        this.fleetRoster = [];\n        this.populate();\n      } // Populates a fleet\n\n\n      Fleet.prototype.populate = function () {\n        for (var i = 0; i < this.numShips; i++) {\n          // loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n          var j = i % CONST.AVAILABLE_SHIPS.length;\n          this.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n        }\n      }; // Places the ship and returns whether or not the placement was successful\n      // Returns boolean\n\n\n      Fleet.prototype.placeShip = function (x, y, direction, shipType) {\n        var shipCoords;\n\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var shipTypes = this.fleetRoster[i].type;\n\n          if (shipType === shipTypes && this.fleetRoster[i].isLegal(x, y, direction)) {\n            this.fleetRoster[i].create(x, y, direction, false);\n            shipCoords = this.fleetRoster[i].getAllShipCells();\n\n            for (var j = 0; j < shipCoords.length; j++) {\n              this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n            }\n\n            return true;\n          }\n        }\n\n        return false;\n      }; // Places ships randomly on the board\n      // TODO: Avoid placing ships too close to each other\n\n\n      Fleet.prototype.placeShipsRandomly = function () {\n        var shipCoords;\n\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var illegalPlacement = true; // Prevents the random placement of already placed ships\n\n          if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n            continue;\n          }\n\n          while (illegalPlacement) {\n            var randomX = Math.floor(Game.size * Math.random());\n            var randomY = Math.floor(Game.size * Math.random());\n            var randomDirection = Math.floor(2 * Math.random());\n\n            if (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n              this.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n              shipCoords = this.fleetRoster[i].getAllShipCells();\n              illegalPlacement = false;\n            } else {\n              continue;\n            }\n          }\n\n          if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n            for (var j = 0; j < shipCoords.length; j++) {\n              this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n              Game.usedShips[i] = CONST.USED;\n            }\n          }\n        }\n      };\n\n      Fleet.prototype.placeShipsRandomlyComp = function () {\n        var shipCoords;\n        var unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', '3.2', '4.1'];\n\n        for (var i = this.fleetRoster.length - 1; i >= 0; i--) {\n          // for (var i = 0; i < this.fleetRoster.length ; i++) {\n          var illegalPlacement = true;\n\n          while (illegalPlacement) {\n            // console.log(\"miaca\");\n            var randomX = Math.floor(10 * Math.random());\n            var randomY;\n            var randomDirection = Math.floor(2 * Math.random());\n            console.log(this.fleetRoster[i].getAllShipCells().length);\n\n            if (randomDirection = 1) {\n              randomY = Math.floor((6 - this.fleetRoster[i].getAllShipCells().length) * Math.random());\n            } else {\n              randomY = Math.floor(5 * Math.random());\n            }\n\n            if (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n              this.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n              shipCoords = this.fleetRoster[i].getAllShipCells();\n              illegalPlacement = false;\n              console.log(\"drec\");\n            } else {\n              continue;\n            }\n          }\n        }\n\n        console.log(\"done\"); // // in the hole grid\n        // for (var i = 0; i < this.fleetRoster.length; i++) {\n        // \tvar illegalPlacement = true;\n        // \twhile (illegalPlacement) {\n        // \t\tvar randomX = Math.floor(Game.size * Math.random());\n        // \t\tvar randomY = Math.floor(Game.size * Math.random());\n        // \t\tvar randomDirection = Math.floor(2 * Math.random());\n        // \t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n        // \t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n        // \t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n        // \t\t\tillegalPlacement = false;\n        // \t\t} else {\n        // \t\t\tcontinue;\n        // \t\t}\n        // \t}\n        // }\n      }; // Finds a ship by location\n      // Returns the ship object located at (x, y)\n      // If no ship exists at (x, y), this returns null instead\n\n\n      Fleet.prototype.findShipByCoords = function (x, y) {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var currentShip = this.fleetRoster[i];\n\n          if (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n            if (y === currentShip.yPosition && x >= currentShip.xPosition && x < currentShip.xPosition + currentShip.shipLength) {\n              return currentShip;\n            } else {\n              continue;\n            }\n          } else {\n            if (x === currentShip.xPosition && y >= currentShip.yPosition && y < currentShip.yPosition + currentShip.shipLength) {\n              return currentShip;\n            } else {\n              continue;\n            }\n          }\n        }\n\n        return null;\n      }; // Finds a ship by its type\n      // Param shipType is a string\n      // Returns the ship object that is of type shipType\n      // If no ship exists, this returns null.\n\n\n      Fleet.prototype.findShipByType = function (shipType) {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          if (this.fleetRoster[i].type === shipType) {\n            return this.fleetRoster[i];\n          }\n        }\n\n        return null;\n      }; // Checks to see if all ships have been sunk\n      // Returns boolean\n\n\n      Fleet.prototype.allShipsSunk = function () {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          // If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n          if (this.fleetRoster[i].sunk === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }; // Ship object\n      // Constructor\n\n\n      function Ship(type, playerGrid, player) {\n        this.damage = 0;\n        this.type = type;\n        this.playerGrid = playerGrid;\n        this.player = player;\n\n        switch (this.type) {\n          case CONST.AVAILABLE_SHIPS[0]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[1]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[2]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[3]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[4]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[5]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[6]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[7]:\n            this.shipLength = 3;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[8]:\n            this.shipLength = 3;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[9]:\n            this.shipLength = 4;\n            break;\n        }\n\n        this.maxDamage = this.shipLength;\n        this.sunk = false;\n      } // Checks to see if the placement of a ship is legal\n      // Returns boolean\n\n\n      Ship.prototype.isLegal = function (x, y, direction) {\n        // first, check if the ship is within the grid...\n        if (this.withinBounds(x, y, direction)) {\n          // ...then check to make sure it doesn't collide with another ship\n          for (var i = 0; i < this.shipLength; i++) {\n            if (direction === Ship.DIRECTION_VERTICAL) {\n              if (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP || this.playerGrid.cells[x + i][y] === CONST.TYPE_MISS || this.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK || this.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n                return false;\n              }\n            } else {\n              if (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP || this.playerGrid.cells[x][y + i] === CONST.TYPE_MISS || this.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK || this.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\n                return false;\n              }\n            }\n          }\n\n          return true;\n        } else {\n          return false;\n        }\n      }; // Checks to see if the ship is within bounds of the grid\n      // Returns boolean\n\n\n      Ship.prototype.withinBounds = function (x, y, direction) {\n        if (direction === Ship.DIRECTION_VERTICAL) {\n          return x + this.shipLength <= Game.size;\n        } else {\n          return y + this.shipLength <= Game.size;\n        }\n      }; // Increments the damage counter of a ship\n      // Returns Ship\n\n\n      Ship.prototype.incrementDamage = function () {\n        this.damage++;\n\n        if (this.isSunk()) {\n          this.sinkShip(false); // Sinks the ship\n        }\n      }; // Checks to see if the ship is sunk\n      // Returns boolean\n\n\n      Ship.prototype.isSunk = function () {\n        return this.damage >= this.maxDamage;\n      }; // Sinks the ship\n\n\n      Ship.prototype.sinkShip = function (virtual) {\n        this.damage = this.maxDamage; // Force the damage to exceed max damage\n\n        this.sunk = true; // Make the CSS class sunk, but only if the ship is not virtual\n\n        if (!virtual) {\n          var allCells = this.getAllShipCells();\n\n          for (var i = 0; i < this.shipLength; i++) {\n            this.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n          }\n        }\n      };\n      /**\n       * Gets all the ship cells\n       *\n       * Returns an array with all (x, y) coordinates of the ship:\n       * e.g.\n       * [\n       *\t{'x':2, 'y':2},\n       *\t{'x':3, 'y':2},\n       *\t{'x':4, 'y':2}\n       * ]\n       */\n\n\n      Ship.prototype.getAllShipCells = function () {\n        var resultObject = [];\n\n        for (var i = 0; i < this.shipLength; i++) {\n          if (this.direction === Ship.DIRECTION_VERTICAL) {\n            resultObject[i] = {\n              'x': this.xPosition + i,\n              'y': this.yPosition\n            };\n          } else {\n            resultObject[i] = {\n              'x': this.xPosition,\n              'y': this.yPosition + i\n            };\n          }\n        }\n\n        return resultObject;\n      }; // Initializes a ship with the given coordinates and direction (bearing).\n      // If the ship is declared \"virtual\", then the ship gets initialized with\n      // its coordinates but DOESN'T get placed on the grid.\n\n\n      Ship.prototype.create = function (x, y, direction, virtual) {\n        // This function assumes that you've already checked that the placement is legal\n        this.xPosition = x;\n        this.yPosition = y;\n        this.direction = direction; // If the ship is virtual, don't add it to the grid.\n\n        if (!virtual) {\n          for (var i = 0; i < this.shipLength; i++) {\n            if (this.direction === Ship.DIRECTION_VERTICAL) {\n              this.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n              if (this.checkPosition(x + i, y + 1)) {\n                this.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n              }\n\n              if (this.checkPosition(x + i, y - 1)) {\n                this.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n              }\n            } else {\n              this.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\n              if (this.checkPosition(x + 1, y + i)) {\n                this.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n              }\n\n              if (this.checkPosition(x - 1, y + i)) {\n                this.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n              }\n            }\n          }\n\n          if (this.direction === Ship.DIRECTION_VERTICAL) {\n            if (this.checkPosition(x - 1, y - 1)) {\n              this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y)) {\n              this.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y + 1)) {\n              this.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y - 1)) {\n              this.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y)) {\n              this.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y + 1)) {\n              this.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n          } else {\n            if (this.checkPosition(x + 1, y - 1)) {\n              this.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y - 1)) {\n              this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x, y - 1)) {\n              this.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + 1, y + this.shipLength)) {\n              this.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y + this.shipLength)) {\n              this.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x, y + this.shipLength)) {\n              this.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n          }\n        }\n      };\n\n      Ship.prototype.checkPosition = function (x, y) {\n        let triger = false;\n\n        if (x < 10 && y < 10 && x >= 0 && y >= 0) {\n          triger = true;\n        }\n\n        return triger;\n      }; // direction === 0 when the ship is facing north/south\n      // direction === 1 when the ship is facing east/west\n\n\n      Ship.DIRECTION_VERTICAL = 0;\n      Ship.DIRECTION_HORIZONTAL = 1; // Tutorial Object\n      // Constructor\n\n      function Tutorial() {\n        this.currentStep = 0; // Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\n        this.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n      } // Advances the tutorial to the next step\n\n\n      Tutorial.prototype.nextStep = function () {\n        var humanGrid = document.querySelector('.human-player');\n        var computerGrid = document.querySelector('.computer-player');\n\n        switch (this.currentStep) {\n          case 0:\n            document.getElementById('roster-sidebar').setAttribute('class', 'highlight'); //document.getElementById('step1').setAttribute('class', 'current-step');\n\n            this.currentStep++;\n            break;\n\n          case 1:\n            document.getElementById('roster-sidebar').removeAttribute('class'); // document.getElementById('step1').removeAttribute('class');\n\n            humanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight'); // document.getElementById('step2').setAttribute('class', 'current-step');\n\n            this.currentStep++;\n            break;\n\n          case 2:\n            // document.getElementById('step2').removeAttribute('class');\n            var humanClasses = humanGrid.getAttribute('class');\n            humanClasses = humanClasses.replace(' highlight', '');\n            humanGrid.setAttribute('class', humanClasses);\n            this.currentStep++;\n            break;\n\n          case 3:\n            computerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight'); // document.getElementById('step3').setAttribute('class', 'current-step');\n\n            this.currentStep++;\n            break;\n\n          case 4:\n            var computerClasses = computerGrid.getAttribute('class'); // document.getElementById('step3').removeAttribute('class');\n\n            computerClasses = computerClasses.replace(' highlight', '');\n            computerGrid.setAttribute('class', computerClasses); // document.getElementById('step4').setAttribute('class', 'current-step');\n\n            this.currentStep++;\n            break;\n\n          case 5:\n            //document.getElementById('step4').removeAttribute('class');\n            this.currentStep = 6;\n            this.showTutorial = false;\n            localStorage.setItem('showTutorial', false);\n            break;\n\n          default:\n            break;\n        }\n      }; // AI Object\n      // Optimal battleship-playing AI\n      // Constructor\n\n\n      function AI(gameObject) {\n        this.gameObject = gameObject;\n        this.virtualGrid = new Grid(Game.size);\n        this.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n        this.probGrid = []; // Probability Grid\n\n        this.initProbs();\n        this.updateProbs();\n      }\n\n      AI.PROB_WEIGHT = 5000; // arbitrarily big number\n      // how much weight to give to the opening book's high probability cells\n\n      AI.OPEN_HIGH_MIN = 20;\n      AI.OPEN_HIGH_MAX = 30; // how much weight to give to the opening book's medium probability cells\n\n      AI.OPEN_MED_MIN = 15;\n      AI.OPEN_MED_MAX = 25; // how much weight to give to the opening book's low probability cells\n\n      AI.OPEN_LOW_MIN = 10;\n      AI.OPEN_LOW_MAX = 20; // Amount of randomness when selecting between cells of equal probability\n\n      AI.RANDOMNESS = 0.1; // AI's opening book.\n      // This is the pattern of the first cells for the AI to target\n\n      AI.OPENINGS = [{\n        'x': 7,\n        'y': 3,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 6,\n        'y': 2,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 3,\n        'y': 7,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 2,\n        'y': 6,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 6,\n        'y': 6,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 3,\n        'y': 3,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 5,\n        'y': 5,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 4,\n        'y': 4,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 0,\n        'y': 8,\n        'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n      }, {\n        'x': 1,\n        'y': 9,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 8,\n        'y': 0,\n        'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n      }, {\n        'x': 9,\n        'y': 1,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 9,\n        'y': 9,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 0,\n        'y': 0,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }]; // Scouts the grid based on max probability, and shoots at the cell\n      // that has the highest probability of containing a ship\n\n      AI.prototype.shoot = function () {\n        var maxProbability = 0;\n        var maxProbCoords;\n        var maxProbs = []; // Add the AI's opening book to the probability grid\n\n        for (var i = 0; i < AI.OPENINGS.length; i++) {\n          var cell = AI.OPENINGS[i];\n\n          if (this.probGrid[cell.x][cell.y] !== 0) {\n            this.probGrid[cell.x][cell.y] += cell.weight;\n          }\n        }\n\n        for (var x = 0; x < Game.size; x++) {\n          for (var y = 0; y < Game.size; y++) {\n            if (this.probGrid[x][y] > maxProbability) {\n              maxProbability = this.probGrid[x][y];\n              maxProbs = [{\n                'x': x,\n                'y': y\n              }]; // Replace the array\n            } else if (this.probGrid[x][y] === maxProbability) {\n              maxProbs.push({\n                'x': x,\n                'y': y\n              });\n            }\n          }\n        }\n\n        maxProbCoords = Math.random() < AI.RANDOMNESS ? maxProbs[Math.floor(Math.random() * maxProbs.length)] : maxProbs[0];\n        var result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER); // If the game ends, the next lines need to be skipped.\n\n        if (Game.gameOver) {\n          Game.gameOver = false;\n          return;\n        }\n\n        this.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result; // If you hit a ship, check to make sure if you've sunk it.\n\n        if (result === CONST.TYPE_HIT) {\n          var humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\n          if (humanShip.isSunk()) {\n            // Remove any ships from the roster that have been sunk\n            var shipTypes = [];\n\n            for (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n              shipTypes.push(this.virtualFleet.fleetRoster[k].type);\n            }\n\n            var index = shipTypes.indexOf(humanShip.type);\n            this.virtualFleet.fleetRoster.splice(index, 1); // Update the virtual grid with the sunk ship's cells\n\n            var shipCells = humanShip.getAllShipCells();\n\n            for (var _i = 0; _i < shipCells.length; _i++) {\n              this.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n            }\n          }\n        } // Update probability grid after each shot\n\n\n        this.updateProbs();\n      }; // Update the probability grid\n\n\n      AI.prototype.updateProbs = function () {\n        var roster = this.virtualFleet.fleetRoster;\n        var coords;\n        this.resetProbs(); // Probabilities are not normalized to fit in the interval [0, 1]\n        // because we're only interested in the maximum value.\n        // This works by trying to fit each ship in each cell in every orientation\n        // For every cell, the more legal ways a ship can pass through it, the more\n        // likely the cell is to contain a ship.\n        // Cells that surround known 'hits' are given an arbitrarily large probability\n        // so that the AI tries to completely sink the ship before moving on.\n\n        for (var k = 0; k < roster.length; k++) {\n          for (var x = 0; x < Game.size; x++) {\n            for (var y = 0; y < Game.size; y++) {\n              if (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n                roster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n                coords = roster[k].getAllShipCells();\n\n                if (this.passesThroughHitCell(coords)) {\n                  for (var i = 0; i < coords.length; i++) {\n                    this.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n                  }\n                } else {\n                  for (var _i = 0; _i < coords.length; _i++) {\n                    this.probGrid[coords[_i].x][coords[_i].y]++;\n                  }\n                }\n              }\n\n              if (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n                roster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n                coords = roster[k].getAllShipCells();\n\n                if (this.passesThroughHitCell(coords)) {\n                  for (var j = 0; j < coords.length; j++) {\n                    this.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n                  }\n                } else {\n                  for (var _j = 0; _j < coords.length; _j++) {\n                    this.probGrid[coords[_j].x][coords[_j].y]++;\n                  }\n                }\n              } // Set hit cells to probability zero so the AI doesn't\n              // target cells that are already hit\n\n\n              if (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n                this.probGrid[x][y] = 0;\n              }\n            }\n          }\n        }\n      }; // Initializes the probability grid for targeting\n\n\n      AI.prototype.initProbs = function () {\n        for (var x = 0; x < Game.size; x++) {\n          var row = [];\n          this.probGrid[x] = row;\n\n          for (var y = 0; y < Game.size; y++) {\n            row.push(0);\n          }\n        }\n      }; // Resets the probability grid to all 0.\n\n\n      AI.prototype.resetProbs = function () {\n        for (var x = 0; x < Game.size; x++) {\n          for (var y = 0; y < Game.size; y++) {\n            this.probGrid[x][y] = 0;\n          }\n        }\n      }; // Finds a human ship by coordinates\n      // Returns Ship\n\n\n      AI.prototype.findHumanShip = function (x, y) {\n        return this.gameObject.humanFleet.findShipByCoords(x, y);\n      }; // Checks whether or not a given ship's cells passes through\n      // any cell that is hit.\n      // Returns boolean\n\n\n      AI.prototype.passesThroughHitCell = function (shipCells) {\n        for (var i = 0; i < shipCells.length; i++) {\n          if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n            return true;\n          }\n        }\n\n        return false;\n      }; // Gives the number of hit cells the ships passes through. The more\n      // cells this is, the more probable the ship exists in those coordinates\n      // Returns int\n\n\n      AI.prototype.numHitCellsCovered = function (shipCells) {\n        var cells = 0;\n\n        for (var i = 0; i < shipCells.length; i++) {\n          if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n            cells++;\n          }\n        }\n\n        return cells;\n      }; // Global constant only initialized once\n\n\n      var gameTutorial = new Tutorial(); // Start the game\n\n      new Game(10);\n\n      function transitionEndEventName() {\n        var i,\n            undefined,\n            el = document.createElement('div'),\n            transitions = {\n          'transition': 'transitionend',\n          'OTransition': 'otransitionend',\n          // oTransitionEnd in very old Opera\n          'MozTransition': 'transitionend',\n          'WebkitTransition': 'webkitTransitionEnd'\n        };\n\n        for (i in transitions) {\n          if (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n            return transitions[i];\n          }\n        }\n      } // Returns a random number between min (inclusive) and max (exclusive)\n\n\n      function getRandom(min, max) {\n        return Math.random() * (max - min) + min;\n      }\n    };\n\n    this.state = {\n      battles: []\n    };\n  }\n\n  componentDidMount() {\n    Service.getAllBattles().then(res => {\n      this.setState({\n        battles: res.data.content\n      });\n    });\n    this.mainGame();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Battles List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1166,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"restart-sidebar\",\n            className: \"hidden\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Try Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1170,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"restart-game\",\n              children: \"Restart Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1171,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1169,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"roster-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Place Your Ships\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1173,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"fleet-roster\",\n              id: \"fleet-roster\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1175,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1176,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1177,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1178,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1179,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1180,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1181,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"3.1\",\n                children: \" \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1182,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"3.2\",\n                children: \" \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1183,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"4.1\",\n                children: \"  \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1184,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1174,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"rotate-button\",\n              \"data-direction\": \"0\",\n              children: \"Rotate Ship\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1186,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"start-game\",\n              className: \"hidden\",\n              children: \"Start Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1187,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"place-randomly\",\n              className: \"hidden\",\n              children: \"Place Randomly and Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1188,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1172,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-box-contenier\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Your Fleet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1192,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid human-player\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-js\",\n                  children: \"Please enable JavaScript to play this game\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1193,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1193,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1191,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Enemy Fleet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1196,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid computer-player\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-js\",\n                  children: \"Please enable JavaScript to play this game\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1197,\n                  columnNumber: 47\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1197,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1195,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1190,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1168,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1167,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1203,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1204,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1205,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1165,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(BattlesComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/anushik/Desktop/dip/seebattle/src/components/GameComponent.jsx"],"names":["React","Component","Service","Link","withRouter","BattlesComponent","constructor","props","mainGame","CONST","AVAILABLE_SHIPS","HUMAN_PLAYER","COMPUTER_PLAYER","VIRTUAL_PLAYER","CSS_TYPE_EMPTY","CSS_TYPE_SHIP","CSS_TYPE_MISS","CSS_TYPE_HIT","CSS_TYPE_SUNK","TYPE_EMPTY","TYPE_SHIP","TYPE_MISS","TYPE_HIT","TYPE_SUNK","TYPE_NOT_ALLOWED","Game","usedShips","UNUSED","USED","size","shotsTaken","createGrid","init","gameOver","prototype","checkIfWon","computerFleet","allShipsSunk","alert","showRestartSidebar","humanFleet","shoot","x","y","targetPlayer","targetGrid","targetFleet","humanGrid","computerGrid","isDamagedShip","isMiss","isUndamagedShip","updateCell","findShipByCoords","incrementDamage","shootListener","e","self","target","parseInt","getAttribute","result","readyToPlay","gameTutorial","showTutorial","nextStep","robot","rosterListener","roster","document","querySelectorAll","i","length","classes","replace","setAttribute","currentStep","placeShipType","getElementById","placeShipDirection","placingOnGrid","placementListener","successful","placeShip","endPlacing","areAllShipsPlaced","el","addEventListener","transitionEndEventName","removeAttribute","placementMouseover","fleetRoster","shipType","type","isLegal","j","placeShipCoords","querySelector","indexOf","placementMouseout","toggleRotation","direction","Ship","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","startGame","fn","removeEventListener","restartGame","window","location","reload","playerRoster","resetFogOfWar","map","resetRosterSidebar","els","sidebar","computerCells","childNodes","restartButton","gridDiv","grid","removeChild","createElement","appendChild","Grid","Fleet","AI","humanCells","k","rotateButton","startButton","randomButton","placeRandomly","placeShipsRandomlyComp","cells","row","push","player","join","playerGrid","numShips","populate","shipCoords","shipTypes","create","getAllShipCells","placeShipsRandomly","illegalPlacement","randomX","Math","floor","random","randomY","randomDirection","unusedShips","console","log","currentShip","yPosition","xPosition","shipLength","findShipByType","sunk","damage","maxDamage","withinBounds","isSunk","sinkShip","virtual","allCells","resultObject","checkPosition","triger","Tutorial","localStorage","getItem","humanClasses","computerClasses","setItem","gameObject","virtualGrid","virtualFleet","probGrid","initProbs","updateProbs","PROB_WEIGHT","OPEN_HIGH_MIN","OPEN_HIGH_MAX","OPEN_MED_MIN","OPEN_MED_MAX","OPEN_LOW_MIN","OPEN_LOW_MAX","RANDOMNESS","OPENINGS","getRandom","maxProbability","maxProbCoords","maxProbs","cell","weight","humanShip","findHumanShip","index","splice","shipCells","_i","coords","resetProbs","passesThroughHitCell","numHitCellsCovered","_j","undefined","transitions","hasOwnProperty","style","min","max","state","battles","componentDidMount","getAllBattles","then","res","setState","data","content","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\nimport './styles.css';\n\n\nclass BattlesComponent extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tbattles: []\n\t\t}\n\t}\n\tcomponentDidMount() {\n\t\tService.getAllBattles().then((res) => {\n\t\t\tthis.setState({ battles: res.data.content });\n\t\t});\n\t\tthis.mainGame()\n\t}\n\n\tmainGame = () => {\n\t\tvar CONST = {};\n\t\tCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1'];\n\t\t// You are player 0 and the computer is player 1\n\t\t// The virtual player is used for generating temporary ships\n\t\t// for calculating the probability heatmap\n\t\tCONST.HUMAN_PLAYER = 0;\n\t\tCONST.COMPUTER_PLAYER = 1;\n\t\tCONST.VIRTUAL_PLAYER = 2;\n\n\t\tCONST.CSS_TYPE_EMPTY = 'empty';\n\t\tCONST.CSS_TYPE_SHIP = 'ship';\n\t\tCONST.CSS_TYPE_MISS = 'miss';\n\t\tCONST.CSS_TYPE_HIT = 'hit';\n\t\tCONST.CSS_TYPE_SUNK = 'sunk';\n\n\t\tCONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\t\tCONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\t\tCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\t\tCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\t\tCONST.TYPE_SUNK = 4; // 4 = sunk ship\n\t\tCONST.TYPE_NOT_ALLOWED = 5; // 5 = neighbour of ship\n\n\t\tGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n\t\tCONST.USED = 1;\n\t\tCONST.UNUSED = 0;\n\n\t\tfunction Game(size) {\n\t\t\tGame.size = size;\n\t\t\tthis.shotsTaken = 0;\n\t\t\tthis.createGrid();\n\t\t\tthis.init();\n\t\t}\n\t\tGame.size = 10; // Default grid size is 10x10\n\t\tGame.gameOver = false;\n\t\t// Checks if the game is won, and if it is, re-initializes the game\n\t\tGame.prototype.checkIfWon = function () {\n\t\t\tif (this.computerFleet.allShipsSunk()) {\n\t\t\t\talert('Congratulations, you win!');\n\t\t\t\tGame.gameOver = true;\n\t\t\t\tthis.showRestartSidebar();\n\t\t\t} else if (this.humanFleet.allShipsSunk()) {\n\t\t\t\talert('Yarr! The computer sank all your ships. Try again.');\n\t\t\t\tGame.gameOver = true;\n\t\t\t\tthis.showRestartSidebar();\n\t\t\t}\n\t\t};\n\t\t// Shoots at the target player on the grid.\n\t\t// Returns {int} Constants.TYPE: What the shot uncovered\n\t\tGame.prototype.shoot = function (x, y, targetPlayer) {\n\t\t\tlet targetGrid;\n\t\t\tlet targetFleet;\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\t\ttargetGrid = this.humanGrid;\n\t\t\t\ttargetFleet = this.humanFleet;\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\t\ttargetGrid = this.computerGrid;\n\t\t\t\ttargetFleet = this.computerFleet;\n\t\t\t}\n\n\t\t\tif (targetGrid.isDamagedShip(x, y)) {\n\t\t\t\treturn null;\n\t\t\t} else if (targetGrid.isMiss(x, y)) {\n\t\t\t\treturn null;\n\t\t\t} else if (targetGrid.isUndamagedShip(x, y)) {\n\t\t\t\t// update the board/grid\n\t\t\t\ttargetGrid.updateCell(x, y, 'hit', targetPlayer);\n\t\t\t\t// IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n\t\t\t\t// because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\t\t\t\ttargetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\t\t\t\tthis.checkIfWon();\n\t\t\t\treturn CONST.TYPE_HIT;\n\t\t\t} else {\n\t\t\t\ttargetGrid.updateCell(x, y, 'miss', targetPlayer);\n\t\t\t\tthis.checkIfWon();\n\t\t\t\treturn CONST.TYPE_MISS;\n\t\t\t}\n\t\t};\n\t\t// Creates click event listeners on each one of the 100 grid cells\n\t\tGame.prototype.shootListener = function (e) {\n\t\t\tvar self = e.target.self;\n\t\t\t// Extract coordinates from event listener\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\tvar result = null;\n\t\t\tif (self.readyToPlay) {\n\t\t\t\tresult = self.shoot(x, y, CONST.COMPUTER_PLAYER);\n\n\t\t\t\t// Remove the tutorial arrow\n\t\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\t\tgameTutorial.nextStep();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (result !== null && !Game.gameOver) {\n\t\t\t\t// The AI shoots iff the player clicks on a cell that he/she hasn't\n\t\t\t\t// already clicked on yet\n\t\t\t\tself.robot.shoot();\n\t\t\t} else {\n\t\t\t\tGame.gameOver = false;\n\t\t\t}\n\t\t};\n\t\t// Creates click event listeners on each of the ship names in the roster\n\t\tGame.prototype.rosterListener = function (e) {\n\t\t\tvar self = e.target.self;\n\t\t\t// Remove all classes of 'placing' from the fleet roster first\n\t\t\tvar roster = document.querySelectorAll('.fleet-roster li');\n\t\t\tfor (var i = 0; i < roster.length; i++) {\n\t\t\t\tvar classes = roster[i].getAttribute('class') || '';\n\t\t\t\tclasses = classes.replace('placing', '');\n\t\t\t\troster[i].setAttribute('class', classes);\n\t\t\t}\n\n\t\t\t// Move the highlight to the next step\n\t\t\tif (gameTutorial.currentStep === 1) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t}\n\n\t\t\t// Set the class of the target ship to 'placing'\n\t\t\tGame.placeShipType = e.target.getAttribute('id');\n\t\t\tdocument.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n\t\t\tGame.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n\t\t\tself.placingOnGrid = true;\n\t\t};\n\t\t// Creates click event listeners on the human player's grid to handle\n\t\t// ship placement after the user has selected a ship name\n\t\tGame.prototype.placementListener = function (e) {\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\t// Extract coordinates from event listener\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\n\t\t\t\t// Don't screw up the direction if the user tries to place again.\n\t\t\t\tvar successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\t\t\t\tif (successful) {\n\t\t\t\t\t// Done placing this ship\n\t\t\t\t\tself.endPlacing(Game.placeShipType);\n\n\t\t\t\t\t// Remove the helper arrow\n\t\t\t\t\tif (gameTutorial.currentStep === 2) {\n\t\t\t\t\t\tgameTutorial.nextStep();\n\t\t\t\t\t}\n\n\t\t\t\t\tself.placingOnGrid = false;\n\t\t\t\t\tif (self.areAllShipsPlaced()) {\n\t\t\t\t\t\tvar el = document.getElementById('rotate-button');\n\t\t\t\t\t\tel.addEventListener(transitionEndEventName(), (function () {\n\t\t\t\t\t\t\tel.setAttribute('class', 'hidden');\n\t\t\t\t\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').setAttribute('class', 'highlight');\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').removeAttribute('class');\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}), false);\n\t\t\t\t\t\tel.setAttribute('class', 'invisible');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Creates mouseover event listeners that handles mouseover on the\n\t\t// human player's grid to draw a phantom ship implying that the user\n\t\t// is allowed to place a ship there\n\t\tGame.prototype.placementMouseover = function (e) {\n\t\t\t// conlose.log(\"placementMouseover\");\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\n\t\t\t\tvar classes;\n\t\t\t\tvar fleetRoster = self.humanFleet.fleetRoster;\n\n\t\t\t\tfor (var i = 0; i < fleetRoster.length; i++) {\n\t\t\t\t\tvar shipType = fleetRoster[i].type;\n\n\t\t\t\t\tif (Game.placeShipType === shipType &&\n\t\t\t\t\t\tfleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n\t\t\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\t\t\t\tclasses = el.getAttribute('class');\n\t\t\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\t\t\t\tif (classes.indexOf(' grid-ship') < 0) {\n\t\t\t\t\t\t\t\tclasses += ' grid-ship';\n\t\t\t\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Creates mouseout event listeners that un-draws the phantom ship\n\t\t// on the human player's grid as the user hovers over a different cell\n\t\tGame.prototype.placementMouseout = function (e) {\n\t\t\t// console.log(\"on placementMouseout\");\n\t\t\tvar self = e.target.self;\n\t\t\tif (self.placingOnGrid) {\n\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\n\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n\t\t\t\t\tvar classes = el.getAttribute('class');\n\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\n\t\t\t\t\tif (classes.indexOf(' grid-ship') > -1) {\n\t\t\t\t\t\tclasses = classes.replace(' grid-ship', '');\n\t\t\t\t\t\tel.setAttribute('class', classes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Click handler for the Rotate Ship button\n\t\tGame.prototype.toggleRotation = function (e) {\n\t\t\t// Toggle rotation direction\n\t\t\tvar direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\te.target.setAttribute('data-direction', '1');\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n\t\t\t} else if (direction === Ship.DIRECTION_HORIZONTAL) {\n\t\t\t\te.target.setAttribute('data-direction', '0');\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_VERTICAL;\n\t\t\t}\n\t\t};\n\t\t// Click handler for the Start Game button\n\t\tGame.prototype.startGame = function (e) {\n\t\t\tvar self = e.target.self;\n\t\t\tvar el = document.getElementById('roster-sidebar');\n\t\t\tvar fn = function () { el.setAttribute('class', 'hidden'); };\n\t\t\tel.addEventListener(transitionEndEventName(), fn, false);\n\t\t\tel.setAttribute('class', 'invisible');\n\t\t\tself.readyToPlay = true;\n\n\t\t\t// Advanced the tutorial step\n\t\t\tif (gameTutorial.currentStep === 3) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t}\n\t\t\tel.removeEventListener(transitionEndEventName(), fn, false);\n\t\t};\n\t\t// Click handler for Restart Game button\n\t\tGame.prototype.restartGame = function (e) {\n\t\t\twindow.location.reload();\n\t\t};\n\t\t// // Debugging function used to place all ships and just start\n\t\t// Game.prototype.placeRandomly = function (e) {\n\t\t// \te.target.removeEventListener(e.type, arguments.callee);\n\t\t// \te.target.self.humanFleet.placeShipsRandomly();\n\t\t// \te.target.self.readyToPlay = true;\n\t\t// \tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n\t\t// \tthis.setAttribute('class', 'hidden');\n\t\t// };\n\t\t// Ends placing the current ship\n\t\tGame.prototype.endPlacing = function (shipType) {\n\t\t\tdocument.getElementById(shipType).setAttribute('class', 'placed');\n\n\t\t\t// Mark the ship as 'used'\n\t\t\tGame.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED;\n\n\t\t\t// Wipe out the variable when you're done with it\n\t\t\tGame.placeShipDirection = null;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\t\t};\n\t\t// Checks whether or not all ships are done placing\n\t\t// Returns boolean\n\t\tGame.prototype.areAllShipsPlaced = function () {\n\t\t\tvar playerRoster = document.querySelectorAll('.fleet-roster li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tif (playerRoster[i].getAttribute('class') === 'placed') {\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Reset temporary variables\n\t\t\tGame.placeShipDirection = 0;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\t\t\treturn true;\n\t\t};\n\t\t// Resets the fog of war\n\t\tGame.prototype.resetFogOfWar = function () {\n\t\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\t\tthis.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n\t\t\t\t\tthis.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Reset all values to indicate the ships are ready to be placed again\n\t\t\tGame.usedShips = Game.usedShips.map(function () { return CONST.UNUSED; });\n\t\t};\n\t\t// Resets CSS styling of the sidebar\n\t\tGame.prototype.resetRosterSidebar = function () {\n\t\t\tvar els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < els.length; i++) {\n\t\t\t\tels[i].removeAttribute('class');\n\t\t\t}\n\n\t\t\tif (gameTutorial.showTutorial) {\n\t\t\t\tgameTutorial.nextStep();\n\t\t\t} else {\n\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t\t}\n\t\t\tdocument.getElementById('rotate-button').removeAttribute('class');\n\t\t\tdocument.getElementById('start-game').setAttribute('class', 'hidden');\n\t\t};\n\t\tGame.prototype.showRestartSidebar = function () {\n\t\t\tvar sidebar = document.getElementById('restart-sidebar');\n\t\t\tsidebar.setAttribute('class', 'highlight');\n\n\t\t\t// Deregister listeners\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\t\tcomputerCells[j].removeEventListener('click', this.shootListener, false);\n\t\t\t}\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tplayerRoster[i].removeEventListener('click', this.rosterListener, false);\n\t\t\t}\n\n\t\t\tvar restartButton = document.getElementById('restart-game');\n\t\t\trestartButton.addEventListener('click', this.restartGame, false);\n\t\t\trestartButton.self = this;\n\t\t};\n\t\t// Generates the HTML divs for the grid for both players\n\t\tGame.prototype.createGrid = function () {\n\t\t\tvar gridDiv = document.querySelectorAll('.grid');\n\t\t\tfor (var grid = 0; grid < gridDiv.length; grid++) {\n\t\t\t\tgridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\t\t\t\tfor (var i = 0; i < Game.size; i++) {\n\t\t\t\t\tfor (var j = 0; j < Game.size; j++) {\n\t\t\t\t\t\tvar el = document.createElement('div');\n\t\t\t\t\t\tel.setAttribute('data-x', i);\n\t\t\t\t\t\tel.setAttribute('data-y', j);\n\t\t\t\t\t\tel.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n\t\t\t\t\t\tgridDiv[grid].appendChild(el);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Initializes the Game\n\t\tGame.prototype.init = function () {\n\t\t\tthis.humanGrid = new Grid(Game.size);\n\t\t\tthis.computerGrid = new Grid(Game.size);\n\t\t\tthis.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n\t\t\tthis.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n\n\t\t\tthis.robot = new AI(this);\n\n\t\t\t// Reset game variables\n\t\t\tthis.shotsTaken = 0;\n\t\t\tthis.readyToPlay = false;\n\t\t\tthis.placingOnGrid = false;\n\t\t\tGame.placeShipDirection = 0;\n\t\t\tGame.placeShipType = '';\n\t\t\tGame.placeShipCoords = [];\n\n\t\t\tthis.resetRosterSidebar();\n\n\t\t\t// Add a click listener for the Grid.shoot() method for all cells\n\t\t\t// Only add this listener to the computer's grid\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\n\t\t\t\tcomputerCells[j].self = this;\n\t\t\t\tcomputerCells[j].addEventListener('click', this.shootListener, false);\n\t\t\t}\n\n\t\t\t// Add a click listener to the roster\t\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\n\t\t\t\tplayerRoster[i].self = this;\n\t\t\t\tplayerRoster[i].addEventListener('click', this.rosterListener, false);\n\t\t\t}\n\n\t\t\t// Add a click listener to the human player's grid while placing\n\t\t\tvar humanCells = document.querySelector('.human-player').childNodes;\n\t\t\tfor (var k = 0; k < humanCells.length; k++) {\n\t\t\t\thumanCells[k].self = this;\n\t\t\t\thumanCells[k].addEventListener('click', this.placementListener, false);\n\t\t\t\thumanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n\t\t\t\thumanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n\t\t\t}\n\n\t\t\tvar rotateButton = document.getElementById('rotate-button');\n\t\t\trotateButton.addEventListener('click', this.toggleRotation, false);\n\t\t\tvar startButton = document.getElementById('start-game');\n\t\t\tstartButton.self = this;\n\t\t\tstartButton.addEventListener('click', this.startGame, false);\n\t\t\t// var resetButton = document.getElementById('reset-stats');\n\t\t\t// resetButton.addEventListener('click', Game.stats.resetStats, false);\n\t\t\tvar randomButton = document.getElementById('place-randomly');\n\t\t\trandomButton.self = this;\n\t\t\trandomButton.addEventListener('click', this.placeRandomly, false);\n\t\t\t// this.computerFleet.placeShipsRandomly();\n\t\t\tthis.computerFleet.placeShipsRandomlyComp();\n\t\t};\n\n\t\t// Grid object\n\t\t// Constructor\n\t\tfunction Grid(size) {\n\t\t\tthis.size = size;\n\t\t\tthis.cells = [];\n\t\t\tthis.init();\n\t\t}\n\n\t\t// Initialize and populate the grid\n\t\tGrid.prototype.init = function () {\n\t\t\tfor (var x = 0; x < this.size; x++) {\n\t\t\t\tvar row = [];\n\t\t\t\tthis.cells[x] = row;\n\t\t\t\tfor (var y = 0; y < this.size; y++) {\n\t\t\t\t\trow.push(CONST.TYPE_EMPTY);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Updates the cell's CSS class based on the type passed in\n\t\tGrid.prototype.updateCell = function (x, y, type, targetPlayer) {\n\t\t\tvar player;\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\n\t\t\t\tplayer = 'human-player';\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n\t\t\t\tplayer = 'computer-player';\n\t\t\t}\n\n\t\t\tswitch (type) {\n\t\t\t\tcase CONST.CSS_TYPE_EMPTY:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_SHIP:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SHIP;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_MISS:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_MISS;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_HIT:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_HIT;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.CSS_TYPE_SUNK:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SUNK;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tvar classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n\t\t\tdocument.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n\t\t};\n\t\t// Checks to see if a cell contains an undamaged ship\n\t\t// Returns boolean\n\t\tGrid.prototype.isUndamagedShip = function (x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_SHIP;\n\t\t};\n\t\t// Checks to see if the shot was missed. This is equivalent\n\t\t// to checking if a cell contains a cannonball\n\t\t// Returns boolean\n\t\tGrid.prototype.isMiss = function (x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_MISS;\n\t\t};\n\t\t// Checks to see if a cell contains a damaged ship,\n\t\t// either hit or sunk.\n\t\t// Returns boolean\n\t\tGrid.prototype.isDamagedShip = function (x, y) {\n\t\t\treturn this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n\t\t};\n\n\t\t// Fleet object\n\t\t// This object is used to keep track of a player's portfolio of ships\n\t\t// Constructor\n\t\tfunction Fleet(playerGrid, player) {\n\t\t\tthis.numShips = CONST.AVAILABLE_SHIPS.length;\n\t\t\tthis.playerGrid = playerGrid;\n\t\t\tthis.player = player;\n\t\t\tthis.fleetRoster = [];\n\t\t\tthis.populate();\n\t\t}\n\t\t// Populates a fleet\n\t\tFleet.prototype.populate = function () {\n\t\t\tfor (var i = 0; i < this.numShips; i++) {\n\t\t\t\t// loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n\t\t\t\tvar j = i % CONST.AVAILABLE_SHIPS.length;\n\t\t\t\tthis.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n\t\t\t}\n\t\t};\n\t\t// Places the ship and returns whether or not the placement was successful\n\t\t// Returns boolean\n\t\tFleet.prototype.placeShip = function (x, y, direction, shipType) {\n\t\t\tvar shipCoords;\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar shipTypes = this.fleetRoster[i].type;\n\n\t\t\t\tif (shipType === shipTypes &&\n\t\t\t\t\tthis.fleetRoster[i].isLegal(x, y, direction)) {\n\t\t\t\t\tthis.fleetRoster[i].create(x, y, direction, false);\n\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t\t}\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\t// Places ships randomly on the board\n\t\t// TODO: Avoid placing ships too close to each other\n\t\tFleet.prototype.placeShipsRandomly = function () {\n\t\t\tvar shipCoords;\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar illegalPlacement = true;\n\n\t\t\t\t// Prevents the random placement of already placed ships\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\twhile (illegalPlacement) {\n\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\n\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\n\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\n\n\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\t\t\t\tillegalPlacement = false;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n\t\t\t\t\t\tGame.usedShips[i] = CONST.USED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tFleet.prototype.placeShipsRandomlyComp = function () {\n\t\t\tvar shipCoords;\n\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', '3.2', '4.1']\n\t\t\t\n\t\t\tfor (var i = this.fleetRoster.length -1; i >= 0; i--) {\n\t\t\t// for (var i = 0; i < this.fleetRoster.length ; i++) {\n\t\t\t\tvar illegalPlacement = true;\n\t\t\t\t\n\t\t\t\twhile (illegalPlacement) {\n\t\t\t\t\t// console.log(\"miaca\");\n\t\t\t\t\tvar randomX = Math.floor(10 * Math.random());\n\t\t\t\t\t\n\t\t\t\t\tvar randomY;\n\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\n\t\t\t\t\tconsole.log(this.fleetRoster[i].getAllShipCells().length)\n\t\t\t\t\tif( randomDirection = 1) {\n\t\t\t\t\t\trandomY = Math.floor((6 - this.fleetRoster[i].getAllShipCells().length) * Math.random());\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\trandomY = Math.floor(5 * Math.random());\n\t\t\t\t\t}\n\n\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\t\t\t\tillegalPlacement = false;\n\t\t\t\t\t\t(console.log(\"drec\"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconsole.log(\"done\");\n\t\t\t// // in the hole grid\n\t\t\t// for (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t// \tvar illegalPlacement = true;\n\t\t\t// \twhile (illegalPlacement) {\n\t\t\t// \t\tvar randomX = Math.floor(Game.size * Math.random());\n\t\t\t// \t\tvar randomY = Math.floor(Game.size * Math.random());\n\t\t\t// \t\tvar randomDirection = Math.floor(2 * Math.random());\n\n\t\t\t// \t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n\t\t\t// \t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n\t\t\t// \t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\n\t\t\t// \t\t\tillegalPlacement = false;\n\t\t\t// \t\t} else {\n\t\t\t// \t\t\tcontinue;\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// }\n\t\t};\n\t\t// Finds a ship by location\n\t\t// Returns the ship object located at (x, y)\n\t\t// If no ship exists at (x, y), this returns null instead\n\t\tFleet.prototype.findShipByCoords = function (x, y) {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tvar currentShip = this.fleetRoster[i];\n\t\t\t\tif (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tif (y === currentShip.yPosition &&\n\t\t\t\t\t\tx >= currentShip.xPosition &&\n\t\t\t\t\t\tx < currentShip.xPosition + currentShip.shipLength) {\n\t\t\t\t\t\treturn currentShip;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (x === currentShip.xPosition &&\n\t\t\t\t\t\ty >= currentShip.yPosition &&\n\t\t\t\t\t\ty < currentShip.yPosition + currentShip.shipLength) {\n\t\t\t\t\t\treturn currentShip;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t// Finds a ship by its type\n\t\t// Param shipType is a string\n\t\t// Returns the ship object that is of type shipType\n\t\t// If no ship exists, this returns null.\n\t\tFleet.prototype.findShipByType = function (shipType) {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\tif (this.fleetRoster[i].type === shipType) {\n\t\t\t\t\treturn this.fleetRoster[i];\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t};\n\t\t// Checks to see if all ships have been sunk\n\t\t// Returns boolean\n\t\tFleet.prototype.allShipsSunk = function () {\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\n\t\t\t\t// If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n\t\t\t\tif (this.fleetRoster[i].sunk === false) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn true;\n\t\t};\n\n\t\t// Ship object\n\t\t// Constructor\n\t\tfunction Ship(type, playerGrid, player) {\n\t\t\tthis.damage = 0;\n\t\t\tthis.type = type;\n\t\t\tthis.playerGrid = playerGrid;\n\t\t\tthis.player = player;\n\n\t\t\tswitch (this.type) {\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[0]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[1]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[2]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[3]:\n\t\t\t\t\tthis.shipLength = 1;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[4]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[5]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[6]:\n\t\t\t\t\tthis.shipLength = 2;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[7]:\n\t\t\t\t\tthis.shipLength = 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[8]:\n\t\t\t\t\tthis.shipLength = 3;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[9]:\n\t\t\t\t\tthis.shipLength = 4;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tthis.maxDamage = this.shipLength;\n\t\t\tthis.sunk = false;\n\t\t}\n\t\t// Checks to see if the placement of a ship is legal\n\t\t// Returns boolean\n\t\tShip.prototype.isLegal = function (x, y, direction) {\n\t\t\t// first, check if the ship is within the grid...\n\t\t\tif (this.withinBounds(x, y, direction)) {\n\t\t\t\t// ...then check to make sure it doesn't collide with another ship\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\t\tif (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_MISS ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_MISS ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK ||\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t};\n\t\t// Checks to see if the ship is within bounds of the grid\n\t\t// Returns boolean\n\t\tShip.prototype.withinBounds = function (x, y, direction) {\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\treturn x + this.shipLength <= Game.size;\n\t\t\t} else {\n\t\t\t\treturn y + this.shipLength <= Game.size;\n\t\t\t}\n\t\t};\n\n\t\t// Increments the damage counter of a ship\n\t\t// Returns Ship\n\t\tShip.prototype.incrementDamage = function () {\n\t\t\tthis.damage++;\n\t\t\tif (this.isSunk()) {\n\t\t\t\tthis.sinkShip(false); // Sinks the ship\n\t\t\t}\n\t\t};\n\t\t// Checks to see if the ship is sunk\n\t\t// Returns boolean\n\t\tShip.prototype.isSunk = function () {\n\t\t\treturn this.damage >= this.maxDamage;\n\t\t};\n\t\t// Sinks the ship\n\t\tShip.prototype.sinkShip = function (virtual) {\n\t\t\tthis.damage = this.maxDamage; // Force the damage to exceed max damage\n\t\t\tthis.sunk = true;\n\n\t\t\t// Make the CSS class sunk, but only if the ship is not virtual\n\t\t\tif (!virtual) {\n\t\t\t\tvar allCells = this.getAllShipCells();\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tthis.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t/**\n\t\t * Gets all the ship cells\n\t\t *\n\t\t * Returns an array with all (x, y) coordinates of the ship:\n\t\t * e.g.\n\t\t * [\n\t\t *\t{'x':2, 'y':2},\n\t\t *\t{'x':3, 'y':2},\n\t\t *\t{'x':4, 'y':2}\n\t\t * ]\n\t\t */\n\t\tShip.prototype.getAllShipCells = function () {\n\t\t\tvar resultObject = [];\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition + i, 'y': this.yPosition };\n\t\t\t\t} else {\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition, 'y': this.yPosition + i };\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn resultObject;\n\t\t};\n\t\t// Initializes a ship with the given coordinates and direction (bearing).\n\t\t// If the ship is declared \"virtual\", then the ship gets initialized with\n\t\t// its coordinates but DOESN'T get placed on the grid.\n\t\tShip.prototype.create = function (x, y, direction, virtual) {\n\t\t\t// This function assumes that you've already checked that the placement is legal\n\t\t\tthis.xPosition = x;\n\t\t\tthis.yPosition = y;\n\t\t\tthis.direction = direction;\n\n\t\t\t// If the ship is virtual, don't add it to the grid.\n\t\t\tif (!virtual) {\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\n\t\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n\t\t\t\t\t\tif (this.checkPosition(x + i, y + 1)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.checkPosition(x + i, y - 1)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\n\t\t\t\t\t\tif (this.checkPosition(x + 1, y + i)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (this.checkPosition(x - 1, y + i)) {\n\t\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x - 1, y)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x - 1, y + 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y + 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\t\t\t\t\tif (this.checkPosition(x + 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x, y - 1)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x + 1, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x - 1, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t\tif (this.checkPosition(x, y + this.shipLength)) {\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tShip.prototype.checkPosition = function (x, y) {\n\t\t\tlet triger = false;\n\t\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\n\t\t\t\ttriger = true;\n\t\t\t}\n\t\t\treturn triger\n\t\t};\n\t\t// direction === 0 when the ship is facing north/south\n\t\t// direction === 1 when the ship is facing east/west\n\t\tShip.DIRECTION_VERTICAL = 0;\n\t\tShip.DIRECTION_HORIZONTAL = 1;\n\n\t\t// Tutorial Object\n\t\t// Constructor\n\t\tfunction Tutorial() {\n\t\t\tthis.currentStep = 0;\n\t\t\t// Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\t\t\tthis.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n\t\t}\n\t\t// Advances the tutorial to the next step\n\t\tTutorial.prototype.nextStep = function () {\n\t\t\tvar humanGrid = document.querySelector('.human-player');\n\t\t\tvar computerGrid = document.querySelector('.computer-player');\n\t\t\tswitch (this.currentStep) {\n\t\t\t\tcase 0:\n\t\t\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'highlight');\n\t\t\t\t\t//document.getElementById('step1').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 1:\n\t\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\n\t\t\t\t\t// document.getElementById('step1').removeAttribute('class');\n\t\t\t\t\thumanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\n\t\t\t\t\t// document.getElementById('step2').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 2:\n\t\t\t\t\t// document.getElementById('step2').removeAttribute('class');\n\t\t\t\t\tvar humanClasses = humanGrid.getAttribute('class');\n\t\t\t\t\thumanClasses = humanClasses.replace(' highlight', '');\n\t\t\t\t\thumanGrid.setAttribute('class', humanClasses);\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\n\t\t\t\t\t// document.getElementById('step3').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 4:\n\t\t\t\t\tvar computerClasses = computerGrid.getAttribute('class');\n\t\t\t\t\t// document.getElementById('step3').removeAttribute('class');\n\t\t\t\t\tcomputerClasses = computerClasses.replace(' highlight', '');\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerClasses);\n\t\t\t\t\t// document.getElementById('step4').setAttribute('class', 'current-step');\n\t\t\t\t\tthis.currentStep++;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 5:\n\t\t\t\t\t//document.getElementById('step4').removeAttribute('class');\n\t\t\t\t\tthis.currentStep = 6;\n\t\t\t\t\tthis.showTutorial = false;\n\t\t\t\t\tlocalStorage.setItem('showTutorial', false);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// AI Object\n\t\t// Optimal battleship-playing AI\n\t\t// Constructor\n\t\tfunction AI(gameObject) {\n\t\t\tthis.gameObject = gameObject;\n\t\t\tthis.virtualGrid = new Grid(Game.size);\n\t\t\tthis.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n\n\t\t\tthis.probGrid = []; // Probability Grid\n\t\t\tthis.initProbs();\n\t\t\tthis.updateProbs();\n\t\t}\n\n\t\tAI.PROB_WEIGHT = 5000; // arbitrarily big number\n\t\t// how much weight to give to the opening book's high probability cells\n\t\tAI.OPEN_HIGH_MIN = 20;\n\t\tAI.OPEN_HIGH_MAX = 30;\n\t\t// how much weight to give to the opening book's medium probability cells\n\t\tAI.OPEN_MED_MIN = 15;\n\t\tAI.OPEN_MED_MAX = 25;\n\t\t// how much weight to give to the opening book's low probability cells\n\t\tAI.OPEN_LOW_MIN = 10;\n\t\tAI.OPEN_LOW_MAX = 20;\n\t\t// Amount of randomness when selecting between cells of equal probability\n\t\tAI.RANDOMNESS = 0.1;\n\t\t// AI's opening book.\n\t\t// This is the pattern of the first cells for the AI to target\n\t\tAI.OPENINGS = [\n\t\t\t{ 'x': 7, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 6, 'y': 2, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 3, 'y': 7, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 2, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 6, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 3, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 5, 'y': 5, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 4, 'y': 4, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\n\t\t\t{ 'x': 0, 'y': 8, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\n\t\t\t{ 'x': 1, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\n\t\t\t{ 'x': 8, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\n\t\t\t{ 'x': 9, 'y': 1, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\n\t\t\t{ 'x': 9, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\n\t\t\t{ 'x': 0, 'y': 0, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) }\n\t\t];\n\t\t// Scouts the grid based on max probability, and shoots at the cell\n\t\t// that has the highest probability of containing a ship\n\t\tAI.prototype.shoot = function () {\n\t\t\tvar maxProbability = 0;\n\t\t\tvar maxProbCoords;\n\t\t\tvar maxProbs = [];\n\n\t\t\t// Add the AI's opening book to the probability grid\n\t\t\tfor (var i = 0; i < AI.OPENINGS.length; i++) {\n\t\t\t\tvar cell = AI.OPENINGS[i];\n\t\t\t\tif (this.probGrid[cell.x][cell.y] !== 0) {\n\t\t\t\t\tthis.probGrid[cell.x][cell.y] += cell.weight;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\tif (this.probGrid[x][y] > maxProbability) {\n\t\t\t\t\t\tmaxProbability = this.probGrid[x][y];\n\t\t\t\t\t\tmaxProbs = [{ 'x': x, 'y': y }]; // Replace the array\n\t\t\t\t\t} else if (this.probGrid[x][y] === maxProbability) {\n\t\t\t\t\t\tmaxProbs.push({ 'x': x, 'y': y });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tmaxProbCoords = Math.random() < AI.RANDOMNESS ?\n\t\t\t\tmaxProbs[Math.floor(Math.random() * maxProbs.length)] :\n\t\t\t\tmaxProbs[0];\n\n\t\t\tvar result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER);\n\n\t\t\t// If the game ends, the next lines need to be skipped.\n\t\t\tif (Game.gameOver) {\n\t\t\t\tGame.gameOver = false;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tthis.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result;\n\n\t\t\t// If you hit a ship, check to make sure if you've sunk it.\n\t\t\tif (result === CONST.TYPE_HIT) {\n\t\t\t\tvar humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\t\t\t\tif (humanShip.isSunk()) {\n\t\t\t\t\t// Remove any ships from the roster that have been sunk\n\t\t\t\t\tvar shipTypes = [];\n\t\t\t\t\tfor (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n\t\t\t\t\t\tshipTypes.push(this.virtualFleet.fleetRoster[k].type);\n\t\t\t\t\t}\n\t\t\t\t\tvar index = shipTypes.indexOf(humanShip.type);\n\t\t\t\t\tthis.virtualFleet.fleetRoster.splice(index, 1);\n\n\t\t\t\t\t// Update the virtual grid with the sunk ship's cells\n\t\t\t\t\tvar shipCells = humanShip.getAllShipCells();\n\t\t\t\t\tfor (var _i = 0; _i < shipCells.length; _i++) {\n\t\t\t\t\t\tthis.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Update probability grid after each shot\n\t\t\tthis.updateProbs();\n\t\t};\n\t\t// Update the probability grid\n\t\tAI.prototype.updateProbs = function () {\n\t\t\tvar roster = this.virtualFleet.fleetRoster;\n\t\t\tvar coords;\n\t\t\tthis.resetProbs();\n\n\t\t\t// Probabilities are not normalized to fit in the interval [0, 1]\n\t\t\t// because we're only interested in the maximum value.\n\n\t\t\t// This works by trying to fit each ship in each cell in every orientation\n\t\t\t// For every cell, the more legal ways a ship can pass through it, the more\n\t\t\t// likely the cell is to contain a ship.\n\t\t\t// Cells that surround known 'hits' are given an arbitrarily large probability\n\t\t\t// so that the AI tries to completely sink the ship before moving on.\n\n\t\t\tfor (var k = 0; k < roster.length; k++) {\n\t\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\t\tfor (var i = 0; i < coords.length; i++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (var _i = 0; _i < coords.length; _i++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_i].x][coords[_i].y]++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\n\t\t\t\t\t\t\t\tfor (var j = 0; j < coords.length; j++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tfor (var _j = 0; _j < coords.length; _j++) {\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_j].x][coords[_j].y]++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set hit cells to probability zero so the AI doesn't\n\t\t\t\t\t\t// target cells that are already hit\n\t\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n\t\t\t\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Initializes the probability grid for targeting\n\t\tAI.prototype.initProbs = function () {\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tvar row = [];\n\t\t\t\tthis.probGrid[x] = row;\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\trow.push(0);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t// Resets the probability grid to all 0.\n\t\tAI.prototype.resetProbs = function () {\n\t\t\tfor (var x = 0; x < Game.size; x++) {\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\n\t\t\t\t\tthis.probGrid[x][y] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\t// Finds a human ship by coordinates\n\t\t// Returns Ship\n\t\tAI.prototype.findHumanShip = function (x, y) {\n\t\t\treturn this.gameObject.humanFleet.findShipByCoords(x, y);\n\t\t};\n\t\t// Checks whether or not a given ship's cells passes through\n\t\t// any cell that is hit.\n\t\t// Returns boolean\n\t\tAI.prototype.passesThroughHitCell = function (shipCells) {\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn false;\n\t\t};\n\t\t// Gives the number of hit cells the ships passes through. The more\n\t\t// cells this is, the more probable the ship exists in those coordinates\n\t\t// Returns int\n\t\tAI.prototype.numHitCellsCovered = function (shipCells) {\n\t\t\tvar cells = 0;\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n\t\t\t\t\tcells++;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn cells;\n\t\t};\n\n\t\t// Global constant only initialized once\n\t\tvar gameTutorial = new Tutorial();\n\n\t\t// Start the game\n\t\tnew Game(10);\n\n\t\tfunction transitionEndEventName() {\n\t\t\tvar i,\n\t\t\t\tundefined,\n\t\t\t\tel = document.createElement('div'),\n\t\t\t\ttransitions = {\n\t\t\t\t\t'transition': 'transitionend',\n\t\t\t\t\t'OTransition': 'otransitionend',  // oTransitionEnd in very old Opera\n\t\t\t\t\t'MozTransition': 'transitionend',\n\t\t\t\t\t'WebkitTransition': 'webkitTransitionEnd'\n\t\t\t\t};\n\n\t\t\tfor (i in transitions) {\n\t\t\t\tif (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n\t\t\t\t\treturn transitions[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Returns a random number between min (inclusive) and max (exclusive)\n\t\tfunction getRandom(min, max) {\n\t\t\treturn Math.random() * (max - min) + min;\n\t\t}\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"container text-center\">\n\t\t\t\t<h2>Battles List</h2>\n\t\t\t\t<div className=\"game-container\">\n\t\t\t\t\t<div className=\"game-container\">\n\t\t\t\t\t\t<div id=\"restart-sidebar\" className=\"hidden\">\n\t\t\t\t\t\t\t<h2>Try Again</h2>\n\t\t\t\t\t\t\t<button id=\"restart-game\">Restart Game</button>\n\t\t\t\t\t\t</div><div id=\"roster-sidebar\">\n\t\t\t\t\t\t\t<h2>Place Your Ships</h2>\n\t\t\t\t\t\t\t<ul className=\"fleet-roster\" id=\"fleet-roster\">\n\t\t\t\t\t\t\t\t<li id=\"1.1\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"1.2\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"1.3\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"1.4\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"2.1\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"2.2\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"2.3\" ></li>\n\t\t\t\t\t\t\t\t<li id=\"3.1\" > </li>\n\t\t\t\t\t\t\t\t<li id=\"3.2\" > </li>\n\t\t\t\t\t\t\t\t<li id=\"4.1\" >  </li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t<button id=\"rotate-button\" data-direction=\"0\">Rotate Ship</button>\n\t\t\t\t\t\t\t<button id=\"start-game\" className=\"hidden\">Start Game</button>\n\t\t\t\t\t\t\t<button id=\"place-randomly\" className=\"hidden\">Place Randomly and Start</button>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"flex-box-contenier\">\n\t\t\t\t\t\t\t<div className=\"grid-container\">\n\t\t\t\t\t\t\t\t<h2>Your Fleet</h2>\n\t\t\t\t\t\t\t\t<div className=\"grid human-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div className=\"grid-container\">\n\t\t\t\t\t\t\t\t<h2>Enemy Fleet</h2>\n\t\t\t\t\t\t\t\t<div className=\"grid computer-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch1\"></span>\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch2\"></span>\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch3\"></span>\n\n\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default withRouter(BattlesComponent);"]},"metadata":{},"sourceType":"module"}