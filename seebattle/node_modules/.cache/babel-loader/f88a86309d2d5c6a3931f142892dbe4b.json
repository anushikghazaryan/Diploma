{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP_USER\\\\Desktop\\\\diploma\\\\Diploma\\\\seebattle\\\\src\\\\components\\\\GameComponent.jsx\";\nimport React, { Component } from 'react';\nimport Service from '../services/Service';\nimport { Link, withRouter } from \"react-router-dom\";\nimport './styles.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass BattlesComponent extends Component {\n  constructor(props) {\n    super(props);\n\n    this.mainGame = () => {\n      var CONST = {};\n      CONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1']; // You are player 0 and the computer is player 1\n      // The virtual player is used for generating temporary ships\n      // for calculating the probability heatmap\n\n      CONST.HUMAN_PLAYER = 0;\n      CONST.COMPUTER_PLAYER = 1;\n      CONST.VIRTUAL_PLAYER = 2;\n      CONST.CSS_TYPE_EMPTY = 'empty';\n      CONST.CSS_TYPE_SHIP = 'ship';\n      CONST.CSS_TYPE_MISS = 'miss';\n      CONST.CSS_TYPE_HIT = 'hit';\n      CONST.CSS_TYPE_SUNK = 'sunk';\n      CONST.TYPE_EMPTY = 0; // 0 = water (empty)\n\n      CONST.TYPE_SHIP = 1; // 1 = undamaged ship\n\n      CONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\n\n      CONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\n\n      CONST.TYPE_SUNK = 4; // 4 = sunk ship\n\n      CONST.TYPE_NOT_ALLOWED = 5; // 5 = neighbour of ship\n\n      Game.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\n      CONST.USED = 1;\n      CONST.UNUSED = 0;\n\n      function Game(size) {\n        Game.size = size;\n        this.shotsTaken = 0;\n        this.createGrid();\n        this.init();\n      }\n\n      Game.size = 10; // Default grid size is 10x10\n\n      Game.gameOver = false; // Checks if the game is won, and if it is, re-initializes the game\n\n      Game.prototype.checkIfWon = function () {\n        if (this.computerFleet.allShipsSunk()) {\n          alert('Congratulations, you win!');\n          console.log(this.shotsTaken);\n          const token = localStorage.getItem('jwtToken');\n          const userId = localStorage.getItem('uid');\n          const userPoint = (100 - this.shotsTaken - 20) * 23;\n          const sendData = [userId, userPoint];\n          axios.post(\"http://localhost:9090/api/v1/users/rating\", sendData, {\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': `Bearer ${token}`\n            }\n          });\n          Game.gameOver = true;\n          this.showRestartSidebar();\n        } else if (this.humanFleet.allShipsSunk()) {\n          alert('Yarr! The computer sank all your ships. Try again.');\n          Game.gameOver = true;\n          this.showRestartSidebar();\n        }\n      }; // Shoots at the target player on the grid.\n      // Returns {int} Constants.TYPE: What the shot uncovered\n\n\n      Game.prototype.shoot = function (x, y, targetPlayer) {\n        let targetGrid;\n        let targetFleet;\n\n        if (targetPlayer === CONST.HUMAN_PLAYER) {\n          targetGrid = this.humanGrid;\n          targetFleet = this.humanFleet;\n        } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n          targetGrid = this.computerGrid;\n          targetFleet = this.computerFleet;\n        }\n\n        if (targetGrid.isDamagedShip(x, y)) {\n          return null;\n        } else if (targetGrid.isMiss(x, y)) {\n          return null;\n        } else if (targetGrid.isUndamagedShip(x, y)) {\n          // update the board/grid\n          targetGrid.updateCell(x, y, 'hit', targetPlayer); // IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\n          // because it overrides the CSS class to 'sunk' if we find that the ship was sunk\n\n          targetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\n\n          if (targetPlayer === CONST.HUMAN_PLAYER) {\n            this.shotsTaken++;\n          }\n\n          this.checkIfWon();\n          return CONST.TYPE_HIT;\n        } else {\n          targetGrid.updateCell(x, y, 'miss', targetPlayer);\n\n          if (targetPlayer === CONST.HUMAN_PLAYER) {\n            this.shotsTaken++;\n          }\n\n          this.checkIfWon();\n          return CONST.TYPE_MISS;\n        }\n      }; // Creates click event listeners on each one of the 100 grid cells\n\n\n      Game.prototype.shootListener = function (e) {\n        var self = e.target.self; // Extract coordinates from event listener\n\n        var x = parseInt(e.target.getAttribute('data-x'), 10);\n        var y = parseInt(e.target.getAttribute('data-y'), 10);\n        var result = null;\n\n        if (self.readyToPlay) {\n          result = self.shoot(x, y, CONST.COMPUTER_PLAYER); // Remove the tutorial arrow\n\n          if (gameTutorial.showTutorial) {\n            gameTutorial.nextStep();\n          }\n        }\n\n        if (result !== null && !Game.gameOver) {\n          // The AI shoots iff the player clicks on a cell that he/she hasn't\n          // already clicked on yet\n          self.robot.shoot();\n        } else {\n          Game.gameOver = false;\n        }\n      }; // Creates click event listeners on each of the ship names in the roster\n\n\n      Game.prototype.rosterListener = function (e) {\n        var self = e.target.self; // Remove all classes of 'placing' from the fleet roster first\n\n        var roster = document.querySelectorAll('.fleet-roster li');\n\n        for (var i = 0; i < roster.length; i++) {\n          var classes = roster[i].getAttribute('class') || '';\n          classes = classes.replace('placing', '');\n          roster[i].setAttribute('class', classes);\n        } // Move the highlight to the next step\n\n\n        if (gameTutorial.currentStep === 1) {\n          gameTutorial.nextStep();\n        } // Set the class of the target ship to 'placing'\n\n\n        Game.placeShipType = e.target.getAttribute('id');\n        document.getElementById(Game.placeShipType).setAttribute('class', 'placing');\n        Game.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\n        self.placingOnGrid = true;\n      }; // Creates click event listeners on the human player's grid to handle\n      // ship placement after the user has selected a ship name\n\n\n      Game.prototype.placementListener = function (e) {\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          // Extract coordinates from event listener\n          var x = parseInt(e.target.getAttribute('data-x'), 10);\n          var y = parseInt(e.target.getAttribute('data-y'), 10); // Don't screw up the direction if the user tries to place again.\n\n          var successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\n\n          if (successful) {\n            // Done placing this ship\n            self.endPlacing(Game.placeShipType); // Remove the helper arrow\n\n            if (gameTutorial.currentStep === 2) {\n              gameTutorial.nextStep();\n            }\n\n            self.placingOnGrid = false;\n\n            if (self.areAllShipsPlaced()) {\n              var el = document.getElementById('rotate-button');\n              el.addEventListener(transitionEndEventName(), function () {\n                el.setAttribute('class', 'hidden');\n\n                if (gameTutorial.showTutorial) {\n                  document.getElementById('start-game').setAttribute('class', 'highlight');\n                } else {\n                  document.getElementById('start-game').removeAttribute('class');\n                }\n              }, false);\n              el.setAttribute('class', 'invisible');\n            }\n          }\n        }\n      }; // Creates mouseover event listeners that handles mouseover on the\n      // human player's grid to draw a phantom ship implying that the user\n      // is allowed to place a ship there\n\n\n      Game.prototype.placementMouseover = function (e) {\n        // conlose.log(\"placementMouseover\");\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          var x = parseInt(e.target.getAttribute('data-x'), 10);\n          var y = parseInt(e.target.getAttribute('data-y'), 10);\n          var classes;\n          var fleetRoster = self.humanFleet.fleetRoster;\n\n          for (var i = 0; i < fleetRoster.length; i++) {\n            var shipType = fleetRoster[i].type;\n\n            if (Game.placeShipType === shipType && fleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\n              for (var j = 0; j < Game.placeShipCoords.length; j++) {\n                var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n                classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n                if (classes.indexOf(' grid-ship') < 0) {\n                  classes += ' grid-ship';\n                  el.setAttribute('class', classes);\n                }\n              }\n            }\n          }\n        }\n      }; // Creates mouseout event listeners that un-draws the phantom ship\n      // on the human player's grid as the user hovers over a different cell\n\n\n      Game.prototype.placementMouseout = function (e) {\n        // console.log(\"on placementMouseout\");\n        var self = e.target.self;\n\n        if (self.placingOnGrid) {\n          for (var j = 0; j < Game.placeShipCoords.length; j++) {\n            var el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\n            var classes = el.getAttribute('class'); // Check if the substring ' grid-ship' already exists to avoid adding it twice\n\n            if (classes.indexOf(' grid-ship') > -1) {\n              classes = classes.replace(' grid-ship', '');\n              el.setAttribute('class', classes);\n            }\n          }\n        }\n      }; // Click handler for the Rotate Ship button\n\n\n      Game.prototype.toggleRotation = function (e) {\n        // Toggle rotation direction\n        var direction = parseInt(e.target.getAttribute('data-direction'), 10);\n\n        if (direction === Ship.DIRECTION_VERTICAL) {\n          e.target.setAttribute('data-direction', '1');\n          Game.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\n        } else if (direction === Ship.DIRECTION_HORIZONTAL) {\n          e.target.setAttribute('data-direction', '0');\n          Game.placeShipDirection = Ship.DIRECTION_VERTICAL;\n        }\n      }; // Click handler for the Start Game button\n\n\n      Game.prototype.startGame = function (e) {\n        var self = e.target.self;\n        var el = document.getElementById('roster-sidebar');\n\n        var fn = function () {\n          el.setAttribute('class', 'hidden');\n        };\n\n        el.addEventListener(transitionEndEventName(), fn, false);\n        el.setAttribute('class', 'invisible');\n        self.readyToPlay = true; // Advanced the tutorial step\n\n        if (gameTutorial.currentStep === 3) {\n          gameTutorial.nextStep();\n        }\n\n        el.removeEventListener(transitionEndEventName(), fn, false);\n      }; // Click handler for Restart Game button\n\n\n      Game.prototype.restartGame = function (e) {\n        window.location.reload();\n      }; // // Debugging function used to place all ships and just start\n      // Game.prototype.placeRandomly = function (e) {\n      // \te.target.removeEventListener(e.type, arguments.callee);\n      // \te.target.self.humanFleet.placeShipsRandomly();\n      // \te.target.self.readyToPlay = true;\n      // \tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\n      // \tthis.setAttribute('class', 'hidden');\n      // };\n      // Ends placing the current ship\n\n\n      Game.prototype.endPlacing = function (shipType) {\n        document.getElementById(shipType).setAttribute('class', 'placed'); // Mark the ship as 'used'\n\n        Game.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED; // Wipe out the variable when you're done with it\n\n        Game.placeShipDirection = null;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n      }; // Checks whether or not all ships are done placing\n      // Returns boolean\n\n\n      Game.prototype.areAllShipsPlaced = function () {\n        var playerRoster = document.querySelectorAll('.fleet-roster li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          if (playerRoster[i].getAttribute('class') === 'placed') {\n            continue;\n          } else {\n            return false;\n          }\n        } // Reset temporary variables\n\n\n        Game.placeShipDirection = 0;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n        return true;\n      }; // Resets the fog of war\n\n\n      Game.prototype.resetFogOfWar = function () {\n        for (var i = 0; i < Game.size; i++) {\n          for (var j = 0; j < Game.size; j++) {\n            this.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\n            this.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\n          }\n        } // Reset all values to indicate the ships are ready to be placed again\n\n\n        Game.usedShips = Game.usedShips.map(function () {\n          return CONST.UNUSED;\n        });\n      }; // Resets CSS styling of the sidebar\n\n\n      Game.prototype.resetRosterSidebar = function () {\n        var els = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < els.length; i++) {\n          els[i].removeAttribute('class');\n        }\n\n        if (gameTutorial.showTutorial) {\n          gameTutorial.nextStep();\n        } else {\n          document.getElementById('roster-sidebar').removeAttribute('class');\n        }\n\n        document.getElementById('rotate-button').removeAttribute('class');\n        document.getElementById('start-game').setAttribute('class', 'hidden');\n      };\n\n      Game.prototype.showRestartSidebar = function () {\n        var sidebar = document.getElementById('restart-sidebar');\n        sidebar.setAttribute('class', 'highlight'); // Deregister listeners\n\n        var computerCells = document.querySelector('.computer-player').childNodes;\n\n        for (var j = 0; j < computerCells.length; j++) {\n          computerCells[j].removeEventListener('click', this.shootListener, false);\n        }\n\n        var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          playerRoster[i].removeEventListener('click', this.rosterListener, false);\n        }\n\n        var restartButton = document.getElementById('restart-game');\n        restartButton.addEventListener('click', this.restartGame, false);\n        restartButton.self = this;\n      }; // Generates the HTML divs for the grid for both players\n\n\n      Game.prototype.createGrid = function () {\n        var gridDiv = document.querySelectorAll('.grid');\n\n        for (var grid = 0; grid < gridDiv.length; grid++) {\n          gridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\n\n          for (var i = 0; i < Game.size; i++) {\n            for (var j = 0; j < Game.size; j++) {\n              var el = document.createElement('div');\n              el.setAttribute('data-x', i);\n              el.setAttribute('data-y', j);\n              el.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\n              gridDiv[grid].appendChild(el);\n            }\n          }\n        }\n      }; // Initializes the Game\n\n\n      Game.prototype.init = function () {\n        this.humanGrid = new Grid(Game.size);\n        this.computerGrid = new Grid(Game.size);\n        this.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\n        this.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\n        this.robot = new AI(this); // Reset game variables\n\n        this.shotsTaken = 0;\n        this.readyToPlay = false;\n        this.placingOnGrid = false;\n        Game.placeShipDirection = 0;\n        Game.placeShipType = '';\n        Game.placeShipCoords = [];\n        this.resetRosterSidebar(); // Add a click listener for the Grid.shoot() method for all cells\n        // Only add this listener to the computer's grid\n\n        var computerCells = document.querySelector('.computer-player').childNodes;\n\n        for (var j = 0; j < computerCells.length; j++) {\n          computerCells[j].self = this;\n          computerCells[j].addEventListener('click', this.shootListener, false);\n        } // Add a click listener to the roster\t\n\n\n        var playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\n\n        for (var i = 0; i < playerRoster.length; i++) {\n          playerRoster[i].self = this;\n          playerRoster[i].addEventListener('click', this.rosterListener, false);\n        } // Add a click listener to the human player's grid while placing\n\n\n        var humanCells = document.querySelector('.human-player').childNodes;\n\n        for (var k = 0; k < humanCells.length; k++) {\n          humanCells[k].self = this;\n          humanCells[k].addEventListener('click', this.placementListener, false);\n          humanCells[k].addEventListener('mouseover', this.placementMouseover, false);\n          humanCells[k].addEventListener('mouseout', this.placementMouseout, false);\n        }\n\n        var rotateButton = document.getElementById('rotate-button');\n        rotateButton.addEventListener('click', this.toggleRotation, false);\n        var startButton = document.getElementById('start-game');\n        startButton.self = this;\n        startButton.addEventListener('click', this.startGame, false); // var resetButton = document.getElementById('reset-stats');\n        // resetButton.addEventListener('click', Game.stats.resetStats, false);\n\n        var randomButton = document.getElementById('place-randomly');\n        randomButton.self = this;\n        randomButton.addEventListener('click', this.placeRandomly, false); // this.computerFleet.placeShipsRandomly();\n\n        this.computerFleet.placeShipsRandomlyComp();\n      }; // Grid object\n      // Constructor\n\n\n      function Grid(size) {\n        this.size = size;\n        this.cells = [];\n        this.init();\n      } // Initialize and populate the grid\n\n\n      Grid.prototype.init = function () {\n        for (var x = 0; x < this.size; x++) {\n          var row = [];\n          this.cells[x] = row;\n\n          for (var y = 0; y < this.size; y++) {\n            row.push(CONST.TYPE_EMPTY);\n          }\n        }\n      }; // Updates the cell's CSS class based on the type passed in\n\n\n      Grid.prototype.updateCell = function (x, y, type, targetPlayer) {\n        var player;\n\n        if (targetPlayer === CONST.HUMAN_PLAYER) {\n          player = 'human-player';\n        } else if (targetPlayer === CONST.COMPUTER_PLAYER) {\n          player = 'computer-player';\n        }\n\n        switch (type) {\n          case CONST.CSS_TYPE_EMPTY:\n            this.cells[x][y] = CONST.TYPE_EMPTY;\n            break;\n\n          case CONST.CSS_TYPE_SHIP:\n            this.cells[x][y] = CONST.TYPE_SHIP;\n            break;\n\n          case CONST.CSS_TYPE_MISS:\n            this.cells[x][y] = CONST.TYPE_MISS;\n            break;\n\n          case CONST.CSS_TYPE_HIT:\n            this.cells[x][y] = CONST.TYPE_HIT;\n            break;\n\n          case CONST.CSS_TYPE_SUNK:\n            this.cells[x][y] = CONST.TYPE_SUNK;\n            break;\n\n          default:\n            this.cells[x][y] = CONST.TYPE_EMPTY;\n            break;\n        }\n\n        var classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\n        document.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\n      }; // Checks to see if a cell contains an undamaged ship\n      // Returns boolean\n\n\n      Grid.prototype.isUndamagedShip = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_SHIP;\n      }; // Checks to see if the shot was missed. This is equivalent\n      // to checking if a cell contains a cannonball\n      // Returns boolean\n\n\n      Grid.prototype.isMiss = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_MISS;\n      }; // Checks to see if a cell contains a damaged ship,\n      // either hit or sunk.\n      // Returns boolean\n\n\n      Grid.prototype.isDamagedShip = function (x, y) {\n        return this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\n      }; // Fleet object\n      // This object is used to keep track of a player's portfolio of ships\n      // Constructor\n\n\n      function Fleet(playerGrid, player) {\n        this.numShips = CONST.AVAILABLE_SHIPS.length;\n        this.playerGrid = playerGrid;\n        this.player = player;\n        this.fleetRoster = [];\n        this.populate();\n      } // Populates a fleet\n\n\n      Fleet.prototype.populate = function () {\n        for (var i = 0; i < this.numShips; i++) {\n          // loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\n          var j = i % CONST.AVAILABLE_SHIPS.length;\n          this.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\n        }\n      }; // Places the ship and returns whether or not the placement was successful\n      // Returns boolean\n\n\n      Fleet.prototype.placeShip = function (x, y, direction, shipType) {\n        var shipCoords;\n\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var shipTypes = this.fleetRoster[i].type;\n\n          if (shipType === shipTypes && this.fleetRoster[i].isLegal(x, y, direction)) {\n            this.fleetRoster[i].create(x, y, direction, false);\n            shipCoords = this.fleetRoster[i].getAllShipCells();\n\n            for (var j = 0; j < shipCoords.length; j++) {\n              this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n            }\n\n            return true;\n          }\n        }\n\n        return false;\n      }; // Places ships randomly on the board\n      // TODO: Avoid placing ships too close to each other\n\n\n      Fleet.prototype.placeShipsRandomly = function () {\n        var shipCoords;\n\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var illegalPlacement = true; // Prevents the random placement of already placed ships\n\n          if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\n            continue;\n          }\n\n          while (illegalPlacement) {\n            var randomX = Math.floor(Game.size * Math.random());\n            var randomY = Math.floor(Game.size * Math.random());\n            var randomDirection = Math.floor(2 * Math.random());\n\n            if (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n              this.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n              shipCoords = this.fleetRoster[i].getAllShipCells();\n              illegalPlacement = false;\n            } else {\n              continue;\n            }\n          }\n\n          if (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\n            for (var j = 0; j < shipCoords.length; j++) {\n              this.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\n              Game.usedShips[i] = CONST.USED;\n            }\n          }\n        }\n      };\n\n      Fleet.prototype.placeShipsRandomlyComp = function () {\n        switch (Math.floor(4 * Math.random())) {\n          case 0:\n            console.log(\"case 0\");\n            var unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\n            var availableShipsCount = 10;\n            var shipIndex;\n            var ySub;\n\n            while (availableShipsCount > 0) {\n              // console.log(availableShipsCount + \"count ship\");\n              shipIndex = Math.floor(10 * Math.random()); // console.log(shipIndex + \" shipIndex\");\n\n              ySub = 0;\n\n              while (unusedShips[shipIndex] == 'used') {\n                shipIndex = Math.floor(10 * Math.random()); // console.log(shipIndex + \" shipIndex in if cond\");\n              } // console.log(shipIndex + \" shipIndex after cond\");\n\n\n              var randomDirection = Math.floor(2 * Math.random()); // console.log(randomDirection + \"dir\");\n\n              if (randomDirection === 1) {\n                ySub = this.fleetRoster[shipIndex].maxDamage;\n                console.log(\" in cond\");\n              }\n\n              console.log(ySub + \"  sub\"); // console.log(this.fleetRoster[shipIndex]);\n\n              var isPlaced = false;\n\n              for (var x = 0; x < 10; x++) {\n                if (!isPlaced) {\n                  for (var y = 0; y < 5; y++) {\n                    if (!isPlaced) {\n                      // if (y + ySub < 5) {\n                      // \tySub = 0;\n                      // }\n                      // console.log(ySub + \"  after if   \" + y);\n                      if (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection) && y + ySub < 5) {\n                        // console.log(x + \" x\" + y + \" y\");\n                        // console.log(\"is legal\")\n                        this.fleetRoster[shipIndex].create(x, y, randomDirection, false);\n                        unusedShips[shipIndex] = 'used';\n                        availableShipsCount--;\n                        isPlaced = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            console.log(\"done\");\n            break;\n\n          case 1:\n            console.log(\"case 1\");\n            var unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\n            var availableShipsCount = 10;\n            var shipIndex;\n            var ySub;\n\n            while (availableShipsCount > 0) {\n              // console.log(availableShipsCount + \"count ship\");\n              shipIndex = Math.floor(10 * Math.random()); // console.log(shipIndex + \" shipIndex\");\n\n              ySub = 0;\n\n              while (unusedShips[shipIndex] == 'used') {\n                shipIndex = Math.floor(10 * Math.random()); // console.log(shipIndex + \" shipIndex in if cond\");\n              } // console.log(shipIndex + \" shipIndex after cond\");\n\n\n              var randomDirection = Math.floor(2 * Math.random()); // console.log(randomDirection + \"dir\");\n\n              if (randomDirection === 1) {\n                ySub = this.fleetRoster[shipIndex].maxDamage;\n                console.log(\" in cond\");\n              }\n\n              console.log(ySub + \"  sub\"); // console.log(this.fleetRoster[shipIndex]);\n\n              var isPlaced = false;\n\n              for (var x = 0; x < 10; x++) {\n                if (!isPlaced) {\n                  for (var y = 5; y < 10; y++) {\n                    if (!isPlaced) {\n                      if (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection) && y + ySub < 10) {\n                        this.fleetRoster[shipIndex].create(x, y, randomDirection, false);\n                        unusedShips[shipIndex] = 'used';\n                        availableShipsCount--;\n                        isPlaced = true;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            console.log(\"done\");\n            break;\n\n          case 2:\n            console.log(\"case 2\"); // in the hole grid\n\n            var shipCoords;\n\n            for (var i = 0; i < this.fleetRoster.length; i++) {\n              var illegalPlacement = true;\n\n              while (illegalPlacement) {\n                var randomX = Math.floor(Game.size * Math.random());\n                var randomY = Math.floor(Game.size * Math.random());\n                var randomDirection = Math.floor(2 * Math.random());\n\n                if (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\n                  this.fleetRoster[i].create(randomX, randomY, randomDirection, false);\n                  shipCoords = this.fleetRoster[i].getAllShipCells();\n                  illegalPlacement = false;\n                } else {\n                  continue;\n                }\n              }\n            }\n\n            console.log(\"done\");\n            break;\n\n          case 3:\n            console.log(\"case 3\");\n            var unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\n            var availableShipsCount = 10;\n            var shipIndex;\n            var ySub;\n\n            while (availableShipsCount > 4) {\n              // console.log(availableShipsCount + \"count ship\");\n              shipIndex = Math.floor(6 * Math.random() + 4); // console.log(shipIndex + \" shipIndex\");\n\n              ySub = 0;\n\n              while (unusedShips[shipIndex] == 'used') {\n                shipIndex = Math.floor(6 * Math.random() + 4); // console.log(shipIndex + \" shipIndex in if cond\");\n              }\n\n              var randomDirection = Math.floor(2 * Math.random()); // console.log(randomDirection + \" dir\");\n\n              if (randomDirection === 1) {\n                var isPlaced = false;\n\n                for (var x = 0; x < 10; x += 9) {\n                  if (!isPlaced) {\n                    for (var y = 0; y < 10; y++) {\n                      if (!isPlaced) {\n                        if (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\n                          // console.log(x + \" x\" + y + \" y\");\n                          // console.log(\"is legal\")\n                          this.fleetRoster[shipIndex].create(x, y, randomDirection, false);\n                          unusedShips[shipIndex] = 'used';\n                          availableShipsCount--;\n                          isPlaced = true;\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                var isPlaced = false;\n\n                for (var y = 0; y < 10; y += 9) {\n                  if (!isPlaced) {\n                    for (var x = 0; x < 10; x++) {\n                      if (!isPlaced) {\n                        if (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\n                          // console.log(x + \" x\" + y + \" y\");\n                          // console.log(\"is legal\")\n                          this.fleetRoster[shipIndex].create(x, y, randomDirection, false);\n                          unusedShips[shipIndex] = 'used';\n                          availableShipsCount--;\n                          isPlaced = true;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            while (availableShipsCount > 4) {\n              // console.log(availableShipsCount + \"count ship\");\n              shipIndex = Math.floor(6 * Math.random() + 4); // console.log(shipIndex + \" shipIndex\");\n\n              ySub = 0;\n\n              while (unusedShips[shipIndex] == 'used') {\n                shipIndex = Math.floor(6 * Math.random() + 4); // console.log(shipIndex + \" shipIndex in if cond\");\n              }\n\n              var randomDirection = Math.floor(2 * Math.random()); // console.log(randomDirection + \" dir\");\n\n              if (randomDirection === 1) {\n                var isPlaced = false;\n\n                for (var x = 0; x < 10; x += 9) {\n                  if (!isPlaced) {\n                    for (var y = 9; y >= 0; y--) {\n                      if (!isPlaced) {\n                        if (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\n                          // console.log(x + \" x\" + y + \" y\");\n                          // console.log(\"is legal\")\n                          this.fleetRoster[shipIndex].create(x, y, randomDirection, false);\n                          unusedShips[shipIndex] = 'used';\n                          availableShipsCount--;\n                          isPlaced = true;\n                        }\n                      }\n                    }\n                  }\n                }\n              } else {\n                var isPlaced = false;\n\n                for (var y = 0; y < 10; y += 9) {\n                  if (!isPlaced) {\n                    for (var x = 0; x < 10; x++) {\n                      if (!isPlaced) {\n                        if (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\n                          // console.log(x + \" x\" + y + \" y\");\n                          // console.log(\"is legal\")\n                          this.fleetRoster[shipIndex].create(x, y, randomDirection, false);\n                          unusedShips[shipIndex] = 'used';\n                          availableShipsCount--;\n                          isPlaced = true;\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n\n            var m = 0;\n\n            while (availableShipsCount > 0) {\n              // console.log(\"in last while\");\t\t\t\t\t\t\n              var x = Math.floor(8 * Math.random() + 1);\n              var y = Math.floor(8 * Math.random() + 1);\n              randomDirection = Math.floor(2 * Math.random());\n\n              if (this.fleetRoster[m].isLegal(x, y, randomDirection)) {\n                // console.log(x + \" x\" + y + \" y\");\n                // console.log(\"is legal\")\n                this.fleetRoster[m].create(x, y, randomDirection, false);\n                unusedShips[m] = 'used'; // console.log(availableShipsCount + \"ship count\")\n\n                availableShipsCount--;\n                m++;\n              }\n            } // console.log(unusedShips);\n\n\n            console.log(\"done\");\n            break;\n\n          default:\n            break;\n        }\n      }; // Finds a ship by location\n      // Returns the ship object located at (x, y)\n      // If no ship exists at (x, y), this returns null instead\n\n\n      Fleet.prototype.findShipByCoords = function (x, y) {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          var currentShip = this.fleetRoster[i];\n\n          if (currentShip.direction === Ship.DIRECTION_VERTICAL) {\n            if (y === currentShip.yPosition && x >= currentShip.xPosition && x < currentShip.xPosition + currentShip.shipLength) {\n              return currentShip;\n            } else {\n              continue;\n            }\n          } else {\n            if (x === currentShip.xPosition && y >= currentShip.yPosition && y < currentShip.yPosition + currentShip.shipLength) {\n              return currentShip;\n            } else {\n              continue;\n            }\n          }\n        }\n\n        return null;\n      }; // Finds a ship by its type\n      // Param shipType is a string\n      // Returns the ship object that is of type shipType\n      // If no ship exists, this returns null.\n\n\n      Fleet.prototype.findShipByType = function (shipType) {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          if (this.fleetRoster[i].type === shipType) {\n            return this.fleetRoster[i];\n          }\n        }\n\n        return null;\n      }; // Checks to see if all ships have been sunk\n      // Returns boolean\n\n\n      Fleet.prototype.allShipsSunk = function () {\n        for (var i = 0; i < this.fleetRoster.length; i++) {\n          // If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\n          if (this.fleetRoster[i].sunk === false) {\n            return false;\n          }\n        }\n\n        return true;\n      }; // Ship object\n      // Constructor\n\n\n      function Ship(type, playerGrid, player) {\n        this.damage = 0;\n        this.type = type;\n        this.playerGrid = playerGrid;\n        this.player = player;\n\n        switch (this.type) {\n          case CONST.AVAILABLE_SHIPS[0]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[1]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[2]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[3]:\n            this.shipLength = 1;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[4]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[5]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[6]:\n            this.shipLength = 2;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[7]:\n            this.shipLength = 3;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[8]:\n            this.shipLength = 3;\n            break;\n\n          case CONST.AVAILABLE_SHIPS[9]:\n            this.shipLength = 4;\n            break;\n        }\n\n        this.maxDamage = this.shipLength;\n        this.sunk = false;\n      } // Checks to see if the placement of a ship is legal\n      // Returns boolean\n\n\n      Ship.prototype.isLegal = function (x, y, direction) {\n        // first, check if the ship is within the grid...\n        if (this.withinBounds(x, y, direction)) {\n          // ...then check to make sure it doesn't collide with another ship\n          for (var i = 0; i < this.shipLength; i++) {\n            if (direction === Ship.DIRECTION_VERTICAL) {\n              if (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP || this.playerGrid.cells[x + i][y] === CONST.TYPE_MISS || this.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK || this.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\n                return false;\n              }\n            } else {\n              if (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP || this.playerGrid.cells[x][y + i] === CONST.TYPE_MISS || this.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK || this.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\n                return false;\n              }\n            }\n          }\n\n          return true;\n        } else {\n          return false;\n        }\n      }; // Checks to see if the ship is within bounds of the grid\n      // Returns boolean\n\n\n      Ship.prototype.withinBounds = function (x, y, direction) {\n        if (direction === Ship.DIRECTION_VERTICAL) {\n          return x + this.shipLength <= Game.size;\n        } else {\n          return y + this.shipLength <= Game.size;\n        }\n      }; // Increments the damage counter of a ship\n      // Returns Ship\n\n\n      Ship.prototype.incrementDamage = function () {\n        this.damage++;\n\n        if (this.isSunk()) {\n          this.sinkShip(false); // Sinks the ship\n        }\n      }; // Checks to see if the ship is sunk\n      // Returns boolean\n\n\n      Ship.prototype.isSunk = function () {\n        return this.damage >= this.maxDamage;\n      }; // Sinks the ship\n\n\n      Ship.prototype.sinkShip = function (virtual) {\n        this.damage = this.maxDamage; // Force the damage to exceed max damage\n\n        this.sunk = true; // Make the CSS class sunk, but only if the ship is not virtual\n\n        if (!virtual) {\n          var allCells = this.getAllShipCells();\n\n          for (var i = 0; i < this.shipLength; i++) {\n            this.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\n          }\n        }\n      };\n      /**\r\n       * Gets all the ship cells\r\n       *\r\n       * Returns an array with all (x, y) coordinates of the ship:\r\n       * e.g.\r\n       * [\r\n       *\t{'x':2, 'y':2},\r\n       *\t{'x':3, 'y':2},\r\n       *\t{'x':4, 'y':2}\r\n       * ]\r\n       */\n\n\n      Ship.prototype.getAllShipCells = function () {\n        var resultObject = [];\n\n        for (var i = 0; i < this.shipLength; i++) {\n          if (this.direction === Ship.DIRECTION_VERTICAL) {\n            resultObject[i] = {\n              'x': this.xPosition + i,\n              'y': this.yPosition\n            };\n          } else {\n            resultObject[i] = {\n              'x': this.xPosition,\n              'y': this.yPosition + i\n            };\n          }\n        }\n\n        return resultObject;\n      }; // Initializes a ship with the given coordinates and direction (bearing).\n      // If the ship is declared \"virtual\", then the ship gets initialized with\n      // its coordinates but DOESN'T get placed on the grid.\n\n\n      Ship.prototype.create = function (x, y, direction, virtual) {\n        // This function assumes that you've already checked that the placement is legal\n        this.xPosition = x;\n        this.yPosition = y;\n        this.direction = direction; // If the ship is virtual, don't add it to the grid.\n\n        if (!virtual) {\n          for (var i = 0; i < this.shipLength; i++) {\n            if (this.direction === Ship.DIRECTION_VERTICAL) {\n              this.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\n\n              if (this.checkPosition(x + i, y + 1)) {\n                this.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\n              }\n\n              if (this.checkPosition(x + i, y - 1)) {\n                this.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\n              }\n            } else {\n              this.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\n\n              if (this.checkPosition(x + 1, y + i)) {\n                this.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n              }\n\n              if (this.checkPosition(x - 1, y + i)) {\n                this.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\n              }\n            }\n          }\n\n          if (this.direction === Ship.DIRECTION_VERTICAL) {\n            if (this.checkPosition(x - 1, y - 1)) {\n              this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y)) {\n              this.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y + 1)) {\n              this.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y - 1)) {\n              this.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y)) {\n              this.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + this.shipLength, y + 1)) {\n              this.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n          } else {\n            if (this.checkPosition(x + 1, y - 1)) {\n              this.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y - 1)) {\n              this.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x, y - 1)) {\n              this.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x + 1, y + this.shipLength)) {\n              this.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x - 1, y + this.shipLength)) {\n              this.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n\n            if (this.checkPosition(x, y + this.shipLength)) {\n              this.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            }\n          }\n        }\n      };\n\n      Ship.prototype.checkPosition = function (x, y) {\n        let triger = false;\n\n        if (x < 10 && y < 10 && x >= 0 && y >= 0) {\n          triger = true;\n        }\n\n        return triger;\n      }; // direction === 0 when the ship is facing north/south\n      // direction === 1 when the ship is facing east/west\n\n\n      Ship.DIRECTION_VERTICAL = 0;\n      Ship.DIRECTION_HORIZONTAL = 1; // Tutorial Object\n      // Constructor\n\n      function Tutorial() {\n        this.currentStep = 0; // Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\n\n        this.showTutorial = localStorage.getItem('showTutorial') !== 'false';\n      } // Advances the tutorial to the next step\n\n\n      Tutorial.prototype.nextStep = function () {\n        var humanGrid = document.querySelector('.human-player');\n        var computerGrid = document.querySelector('.computer-player');\n\n        switch (this.currentStep) {\n          case 0:\n            document.getElementById('roster-sidebar').setAttribute('class', 'highlight'); //document.getElementById('step1').setAttribute('class', 'current-step');\n\n            this.currentStep++;\n            break;\n\n          case 1:\n            document.getElementById('roster-sidebar').removeAttribute('class'); // document.getElementById('step1').removeAttribute('class');\n\n            humanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight'); // document.getElementById('step2').setAttribute('class', 'current-step');\n\n            this.currentStep++;\n            break;\n\n          case 2:\n            // document.getElementById('step2').removeAttribute('class');\n            var humanClasses = humanGrid.getAttribute('class');\n            humanClasses = humanClasses.replace(' highlight', '');\n            humanGrid.setAttribute('class', humanClasses);\n            this.currentStep++;\n            break;\n\n          case 3:\n            computerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight'); // document.getElementById('step3').setAttribute('class', 'current-step');\n\n            this.currentStep++;\n            break;\n\n          case 4:\n            var computerClasses = computerGrid.getAttribute('class'); // document.getElementById('step3').removeAttribute('class');\n\n            computerClasses = computerClasses.replace(' highlight', '');\n            computerGrid.setAttribute('class', computerClasses); // document.getElementById('step4').setAttribute('class', 'current-step');\n\n            this.currentStep++;\n            break;\n\n          case 5:\n            //document.getElementById('step4').removeAttribute('class');\n            this.currentStep = 6;\n            this.showTutorial = false;\n            localStorage.setItem('showTutorial', false);\n            break;\n\n          default:\n            break;\n        }\n      }; // AI Object\n      // Optimal battleship-playing AI\n      // Constructor\n\n\n      function AI(gameObject) {\n        this.gameObject = gameObject;\n        this.virtualGrid = new Grid(Game.size);\n        this.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\n        this.probGrid = []; // Probability Grid\n\n        this.initProbs();\n        this.updateProbs();\n      }\n\n      AI.PROB_WEIGHT = 5000; // arbitrarily big number\n      // how much weight to give to the opening book's high probability cells\n\n      AI.OPEN_HIGH_MIN = 20;\n      AI.OPEN_HIGH_MAX = 30; // how much weight to give to the opening book's medium probability cells\n\n      AI.OPEN_MED_MIN = 15;\n      AI.OPEN_MED_MAX = 25; // how much weight to give to the opening book's low probability cells\n\n      AI.OPEN_LOW_MIN = 10;\n      AI.OPEN_LOW_MAX = 20; // Amount of randomness when selecting between cells of equal probability\n\n      AI.RANDOMNESS = 0.1; // AI's opening book.\n      // This is the pattern of the first cells for the AI to target\n\n      AI.OPENINGS = [{\n        'x': 7,\n        'y': 3,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 6,\n        'y': 2,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 3,\n        'y': 7,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 2,\n        'y': 6,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 6,\n        'y': 6,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 3,\n        'y': 3,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 5,\n        'y': 5,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 4,\n        'y': 4,\n        'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX)\n      }, {\n        'x': 0,\n        'y': 8,\n        'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n      }, {\n        'x': 1,\n        'y': 9,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 8,\n        'y': 0,\n        'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX)\n      }, {\n        'x': 9,\n        'y': 1,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 9,\n        'y': 9,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }, {\n        'x': 0,\n        'y': 0,\n        'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX)\n      }]; // Scouts the grid based on max probability, and shoots at the cell\n      // that has the highest probability of containing a ship\n\n      AI.prototype.shoot = function () {\n        var maxProbability = 0;\n        var maxProbCoords;\n        var maxProbs = []; // Add the AI's opening book to the probability grid\n\n        for (var i = 0; i < AI.OPENINGS.length; i++) {\n          var cell = AI.OPENINGS[i];\n\n          if (this.probGrid[cell.x][cell.y] !== 0) {\n            this.probGrid[cell.x][cell.y] += cell.weight;\n          }\n        }\n\n        for (var x = 0; x < Game.size; x++) {\n          for (var y = 0; y < Game.size; y++) {\n            if (this.probGrid[x][y] > maxProbability) {\n              maxProbability = this.probGrid[x][y];\n              maxProbs = [{\n                'x': x,\n                'y': y\n              }]; // Replace the array\n            } else if (this.probGrid[x][y] === maxProbability) {\n              maxProbs.push({\n                'x': x,\n                'y': y\n              });\n            }\n          }\n        }\n\n        maxProbCoords = Math.random() < AI.RANDOMNESS ? maxProbs[Math.floor(Math.random() * maxProbs.length)] : maxProbs[0];\n        var result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER); // If the game ends, the next lines need to be skipped.\n\n        if (Game.gameOver) {\n          Game.gameOver = false;\n          return;\n        }\n\n        this.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result; // If you hit a ship, check to make sure if you've sunk it.\n\n        if (result === CONST.TYPE_HIT) {\n          var humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\n\n          if (humanShip.isSunk()) {\n            // add here\n            // var coords = humanShip.getAllShipCells();\n            // console.log(coords);\n            // for (var i = 0; i < coords.length; i++) {\n            // \tif (humanShip.direction === Ship.DIRECTION_VERTICAL){\t\n            // \t\tif (this.checkPos(coords[i].x, coords[i].y + 1)) {\n            // \t\t\tthis.probGrid[coords[i].x][coords[i].y + 1] = 0;\n            // \t\t}\n            // \t\tif (this.checkPos(coords[i].x, coords[i].y - 1)) {\n            // \t\t\tthis.probGrid[coords[i].x][coords[i].y - 1] = 0;\n            // \t\t}\n            // \t} else {\n            // \t\tif (this.checkPos(coords[i].x + 1, coords[i].y)) {\n            // \t\t\tthis.probGrid[coords[i].x + 1][coords[i].y] = 0;\n            // \t\t}\n            // \t\tif (this.checkPos(coords[i].x - 1, coords[i].y)) {\n            // \t\t\tthis.probGrid[coords[i].x - 1][coords[i].y] = 0;\n            // \t\t}\n            // \t}\n            // }\n            // console.log(this.probGrid);\n            // if (this.direction === Ship.DIRECTION_VERTICAL) {\n            // \tif (this.checkPosition(x - 1, y - 1)) {\n            // \t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x - 1, y)) {\n            // \t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x - 1, y + 1)) {\n            // \t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x + this.shipLength, y - 1)) {\n            // \t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x + this.shipLength, y)) {\n            // \t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x + this.shipLength, y + 1)) {\n            // \t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // } else {\n            // \tif (this.checkPosition(x + 1, y - 1)) {\n            // \t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x - 1, y - 1)) {\n            // \t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x, y - 1)) {\n            // \t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x + 1, y + this.shipLength)) {\n            // \t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x - 1, y + this.shipLength)) {\n            // \t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // \tif (this.checkPosition(x, y + this.shipLength)) {\n            // \t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\n            // \t}\n            // }\n            // Remove any ships from the roster that have been sunk\n            var shipTypes = [];\n\n            for (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\n              shipTypes.push(this.virtualFleet.fleetRoster[k].type);\n            }\n\n            var index = shipTypes.indexOf(humanShip.type);\n            this.virtualFleet.fleetRoster.splice(index, 1); // Update the virtual grid with the sunk ship's cells\n\n            var shipCells = humanShip.getAllShipCells();\n\n            for (var _i = 0; _i < shipCells.length; _i++) {\n              this.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\n            } // add here\n\n          }\n        } // Update probability grid after each shot\n\n\n        this.updateProbs();\n      };\n\n      AI.prototype.checkPos = function (x, y) {\n        let triger = false;\n\n        if (x < 10 && y < 10 && x >= 0 && y >= 0) {\n          triger = true;\n        }\n\n        return triger;\n      }; // Update the probability grid\n\n\n      AI.prototype.updateProbs = function () {\n        var roster = this.virtualFleet.fleetRoster;\n        var coords;\n        this.resetProbs(); // Probabilities are not normalized to fit in the interval [0, 1]\n        // because we're only interested in the maximum value.\n        // This works by trying to fit each ship in each cell in every orientation\n        // For every cell, the more legal ways a ship can pass through it, the more\n        // likely the cell is to contain a ship.\n        // Cells that surround known 'hits' are given an arbitrarily large probability\n        // so that the AI tries to completely sink the ship before moving on.\n\n        for (var k = 0; k < roster.length; k++) {\n          for (var x = 0; x < Game.size; x++) {\n            for (var y = 0; y < Game.size; y++) {\n              if (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\n                roster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\n                coords = roster[k].getAllShipCells();\n\n                if (this.passesThroughHitCell(coords)) {\n                  for (var i = 0; i < coords.length; i++) {\n                    this.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n                  }\n                } else {\n                  for (var _i = 0; _i < coords.length; _i++) {\n                    this.probGrid[coords[_i].x][coords[_i].y]++;\n                  }\n                }\n              }\n\n              if (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\n                roster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\n                coords = roster[k].getAllShipCells();\n\n                if (this.passesThroughHitCell(coords)) {\n                  for (var j = 0; j < coords.length; j++) {\n                    this.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\n                  }\n                } else {\n                  for (var _j = 0; _j < coords.length; _j++) {\n                    this.probGrid[coords[_j].x][coords[_j].y]++;\n                  }\n                }\n              } // Set hit cells to probability zero so the AI doesn't\n              // target cells that are already hit\n\n\n              if (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\n                this.probGrid[x][y] = 0;\n              }\n            }\n          }\n        }\n\n        for (var x = 0; x < Game.size; x++) {\n          for (var y = 0; y < Game.size; y++) {\n            if (this.virtualGrid.cells[x][y] === CONST.TYPE_SUNK) {\n              console.log(\"this sell is sunk   \" + x + \"   \" + y);\n\n              if (this.checkPos(x - 1, y - 1)) {\n                this.probGrid[x - 1][y - 1] = 0;\n              }\n\n              if (this.checkPos(x - 1, y)) {\n                this.probGrid[x - 1][y] = 0;\n              }\n\n              if (this.checkPos(x - 1, y + 1)) {\n                this.probGrid[x - 1][y + 1] = 0;\n              }\n\n              if (this.checkPos(x, y - 1)) {\n                this.probGrid[x][y - 1] = 0;\n              }\n\n              if (this.checkPos(x, y + 1)) {\n                this.probGrid[x][y + 1] = 0;\n              }\n\n              if (this.checkPos(x + 1, y - 1)) {\n                this.probGrid[x + 1][y - 1] = 0;\n              }\n\n              if (this.checkPos(x + 1, y)) {\n                this.probGrid[x + 1][y] = 0;\n              }\n\n              if (this.checkPos(x + 1, y + 1)) {\n                this.probGrid[x + 1][y + 1] = 0;\n              }\n            }\n          }\n        }\n\n        console.log(this.probGrid);\n      }; // Initializes the probability grid for targeting\n\n\n      AI.prototype.initProbs = function () {\n        for (var x = 0; x < Game.size; x++) {\n          var row = [];\n          this.probGrid[x] = row;\n\n          for (var y = 0; y < Game.size; y++) {\n            row.push(0);\n          }\n        }\n      }; // Resets the probability grid to all 0.\n\n\n      AI.prototype.resetProbs = function () {\n        for (var x = 0; x < Game.size; x++) {\n          for (var y = 0; y < Game.size; y++) {\n            this.probGrid[x][y] = 0;\n          }\n        }\n      }; // Finds a human ship by coordinates\n      // Returns Ship\n\n\n      AI.prototype.findHumanShip = function (x, y) {\n        return this.gameObject.humanFleet.findShipByCoords(x, y);\n      }; // Checks whether or not a given ship's cells passes through\n      // any cell that is hit.\n      // Returns boolean\n\n\n      AI.prototype.passesThroughHitCell = function (shipCells) {\n        for (var i = 0; i < shipCells.length; i++) {\n          if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n            return true;\n          }\n        }\n\n        return false;\n      }; // Gives the number of hit cells the ships passes through. The more\n      // cells this is, the more probable the ship exists in those coordinates\n      // Returns int\n\n\n      AI.prototype.numHitCellsCovered = function (shipCells) {\n        var cells = 0;\n\n        for (var i = 0; i < shipCells.length; i++) {\n          if (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\n            cells++;\n          }\n        }\n\n        return cells;\n      }; // Global constant only initialized once\n\n\n      var gameTutorial = new Tutorial(); // Start the game\n\n      new Game(10);\n\n      function transitionEndEventName() {\n        var i,\n            undefined,\n            el = document.createElement('div'),\n            transitions = {\n          'transition': 'transitionend',\n          'OTransition': 'otransitionend',\n          // oTransitionEnd in very old Opera\n          'MozTransition': 'transitionend',\n          'WebkitTransition': 'webkitTransitionEnd'\n        };\n\n        for (i in transitions) {\n          if (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\n            return transitions[i];\n          }\n        }\n      } // Returns a random number between min (inclusive) and max (exclusive)\n\n\n      function getRandom(min, max) {\n        return Math.random() * (max - min) + min;\n      }\n    };\n\n    this.state = {\n      battles: []\n    };\n  }\n\n  componentDidMount() {\n    Service.getAllBattles().then(res => {\n      this.setState({\n        battles: res.data.content\n      });\n    });\n    this.mainGame();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container text-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Sea Battle with computer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1491,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-container\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"restart-sidebar\",\n            className: \"hidden\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Try Again\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1495,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"restart-game\",\n              children: \"Restart Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1496,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1494,\n            columnNumber: 7\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            id: \"roster-sidebar\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Place Your Ships\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1498,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n              className: \"fleet-roster\",\n              id: \"fleet-roster\",\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1500,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1501,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1502,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"1.4\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1503,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.1\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1504,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.2\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1505,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"2.3\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1506,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"3.1\",\n                children: \" \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1507,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"3.2\",\n                children: \" \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1508,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n                id: \"4.1\",\n                children: \"  \"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1509,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1499,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"rotate-button\",\n              \"data-direction\": \"0\",\n              children: \"Rotate Ship\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1511,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"start-game\",\n              className: \"hidden\",\n              children: \"Start Game\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1512,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              id: \"place-randomly\",\n              className: \"hidden\",\n              children: \"Place Randomly and Start\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1513,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1497,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex-box-contenier\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Your Fleet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1517,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid human-player\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-js\",\n                  children: \"Please enable JavaScript to play this game\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1518,\n                  columnNumber: 44\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1518,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1516,\n              columnNumber: 8\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"grid-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: \"Enemy Fleet\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1521,\n                columnNumber: 9\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"grid computer-player\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"no-js\",\n                  children: \"Please enable JavaScript to play this game\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 1522,\n                  columnNumber: 47\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 1522,\n                columnNumber: 9\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 1520,\n              columnNumber: 8\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1515,\n            columnNumber: 7\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1493,\n          columnNumber: 6\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1492,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1528,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1529,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"prefetch\",\n        id: \"prefetch3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1530,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1490,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(BattlesComponent);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["C:/Users/HP_USER/Desktop/diploma/Diploma/seebattle/src/components/GameComponent.jsx"],"names":["React","Component","Service","Link","withRouter","axios","BattlesComponent","constructor","props","mainGame","CONST","AVAILABLE_SHIPS","HUMAN_PLAYER","COMPUTER_PLAYER","VIRTUAL_PLAYER","CSS_TYPE_EMPTY","CSS_TYPE_SHIP","CSS_TYPE_MISS","CSS_TYPE_HIT","CSS_TYPE_SUNK","TYPE_EMPTY","TYPE_SHIP","TYPE_MISS","TYPE_HIT","TYPE_SUNK","TYPE_NOT_ALLOWED","Game","usedShips","UNUSED","USED","size","shotsTaken","createGrid","init","gameOver","prototype","checkIfWon","computerFleet","allShipsSunk","alert","console","log","token","localStorage","getItem","userId","userPoint","sendData","post","headers","showRestartSidebar","humanFleet","shoot","x","y","targetPlayer","targetGrid","targetFleet","humanGrid","computerGrid","isDamagedShip","isMiss","isUndamagedShip","updateCell","findShipByCoords","incrementDamage","shootListener","e","self","target","parseInt","getAttribute","result","readyToPlay","gameTutorial","showTutorial","nextStep","robot","rosterListener","roster","document","querySelectorAll","i","length","classes","replace","setAttribute","currentStep","placeShipType","getElementById","placeShipDirection","placingOnGrid","placementListener","successful","placeShip","endPlacing","areAllShipsPlaced","el","addEventListener","transitionEndEventName","removeAttribute","placementMouseover","fleetRoster","shipType","type","isLegal","j","placeShipCoords","querySelector","indexOf","placementMouseout","toggleRotation","direction","Ship","DIRECTION_VERTICAL","DIRECTION_HORIZONTAL","startGame","fn","removeEventListener","restartGame","window","location","reload","playerRoster","resetFogOfWar","map","resetRosterSidebar","els","sidebar","computerCells","childNodes","restartButton","gridDiv","grid","removeChild","createElement","appendChild","Grid","Fleet","AI","humanCells","k","rotateButton","startButton","randomButton","placeRandomly","placeShipsRandomlyComp","cells","row","push","player","join","playerGrid","numShips","populate","shipCoords","shipTypes","create","getAllShipCells","placeShipsRandomly","illegalPlacement","randomX","Math","floor","random","randomY","randomDirection","unusedShips","availableShipsCount","shipIndex","ySub","maxDamage","isPlaced","m","currentShip","yPosition","xPosition","shipLength","findShipByType","sunk","damage","withinBounds","isSunk","sinkShip","virtual","allCells","resultObject","checkPosition","triger","Tutorial","humanClasses","computerClasses","setItem","gameObject","virtualGrid","virtualFleet","probGrid","initProbs","updateProbs","PROB_WEIGHT","OPEN_HIGH_MIN","OPEN_HIGH_MAX","OPEN_MED_MIN","OPEN_MED_MAX","OPEN_LOW_MIN","OPEN_LOW_MAX","RANDOMNESS","OPENINGS","getRandom","maxProbability","maxProbCoords","maxProbs","cell","weight","humanShip","findHumanShip","index","splice","shipCells","_i","checkPos","coords","resetProbs","passesThroughHitCell","numHitCellsCovered","_j","undefined","transitions","hasOwnProperty","style","min","max","state","battles","componentDidMount","getAllBattles","then","res","setState","data","content","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Service from '../services/Service';\r\nimport { Link, withRouter } from \"react-router-dom\";\r\nimport './styles.css';\r\nimport axios from 'axios';\r\n\r\n\r\nclass BattlesComponent extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tbattles: []\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {\r\n\t\tService.getAllBattles().then((res) => {\r\n\t\t\tthis.setState({ battles: res.data.content });\r\n\t\t});\r\n\t\tthis.mainGame();\r\n\t}\r\n\r\n\tmainGame = () => {\r\n\t\tvar CONST = {};\r\n\t\tCONST.AVAILABLE_SHIPS = ['1.1', '1.2', '1.3', '1.4', '2.1', '2.2', '2.3', '3.1', '3.2', '4.1'];\r\n\t\t// You are player 0 and the computer is player 1\r\n\t\t// The virtual player is used for generating temporary ships\r\n\t\t// for calculating the probability heatmap\r\n\t\tCONST.HUMAN_PLAYER = 0;\r\n\t\tCONST.COMPUTER_PLAYER = 1;\r\n\t\tCONST.VIRTUAL_PLAYER = 2;\r\n\r\n\t\tCONST.CSS_TYPE_EMPTY = 'empty';\r\n\t\tCONST.CSS_TYPE_SHIP = 'ship';\r\n\t\tCONST.CSS_TYPE_MISS = 'miss';\r\n\t\tCONST.CSS_TYPE_HIT = 'hit';\r\n\t\tCONST.CSS_TYPE_SUNK = 'sunk';\r\n\r\n\t\tCONST.TYPE_EMPTY = 0; // 0 = water (empty)\r\n\t\tCONST.TYPE_SHIP = 1; // 1 = undamaged ship\r\n\t\tCONST.TYPE_MISS = 2; // 2 = water with a cannonball in it (missed shot)\r\n\t\tCONST.TYPE_HIT = 3; // 3 = damaged ship (hit shot)\r\n\t\tCONST.TYPE_SUNK = 4; // 4 = sunk ship\r\n\t\tCONST.TYPE_NOT_ALLOWED = 5; // 5 = neighbour of ship\r\n\r\n\t\tGame.usedShips = [CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED, CONST.UNUSED];\r\n\t\tCONST.USED = 1;\r\n\t\tCONST.UNUSED = 0;\r\n\r\n\t\tfunction Game(size) {\r\n\t\t\tGame.size = size;\r\n\t\t\tthis.shotsTaken = 0;\r\n\t\t\tthis.createGrid();\r\n\t\t\tthis.init();\r\n\t\t}\r\n\t\tGame.size = 10; // Default grid size is 10x10\r\n\t\tGame.gameOver = false;\r\n\t\t// Checks if the game is won, and if it is, re-initializes the game\r\n\t\tGame.prototype.checkIfWon = function () {\r\n\t\t\tif (this.computerFleet.allShipsSunk()) {\r\n\t\t\t\talert('Congratulations, you win!');\r\n\t\t\t\tconsole.log(this.shotsTaken);\r\n\r\n\t\t\t\tconst token = localStorage.getItem('jwtToken');\r\n\t\t\t\tconst userId = localStorage.getItem('uid');\r\n\t\t\t\tconst userPoint = (100 - this.shotsTaken - 20) * 23;\r\n\t\t\t\tconst sendData = [userId, userPoint];\r\n\t\t\t\taxios.post(\"http://localhost:9090/api/v1/users/rating\", sendData, {\r\n\t\t\t\t\theaders: {\r\n\t\t\t\t\t\t'Content-Type': 'application/json',\r\n\t\t\t\t\t\t'Authorization': `Bearer ${token}`\r\n\t\t\t\t\t}\r\n\t\t\t\t})\r\n\t\t\t\tGame.gameOver = true;\r\n\t\t\t\tthis.showRestartSidebar();\r\n\t\t\t} else if (this.humanFleet.allShipsSunk()) {\r\n\t\t\t\talert('Yarr! The computer sank all your ships. Try again.');\r\n\t\t\t\tGame.gameOver = true;\r\n\t\t\t\tthis.showRestartSidebar();\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Shoots at the target player on the grid.\r\n\t\t// Returns {int} Constants.TYPE: What the shot uncovered\r\n\t\tGame.prototype.shoot = function (x, y, targetPlayer) {\r\n\t\t\tlet targetGrid;\r\n\t\t\tlet targetFleet;\r\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\ttargetGrid = this.humanGrid;\r\n\t\t\t\ttargetFleet = this.humanFleet;\r\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\r\n\t\t\t\ttargetGrid = this.computerGrid;\r\n\t\t\t\ttargetFleet = this.computerFleet;\r\n\t\t\t}\r\n\r\n\t\t\tif (targetGrid.isDamagedShip(x, y)) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else if (targetGrid.isMiss(x, y)) {\r\n\t\t\t\treturn null;\r\n\t\t\t} else\r\n\t\t\t\tif (targetGrid.isUndamagedShip(x, y)) {\r\n\t\t\t\t\t// update the board/grid\r\n\t\t\t\t\ttargetGrid.updateCell(x, y, 'hit', targetPlayer);\r\n\t\t\t\t\t// IMPORTANT: This function needs to be called _after_ updating the cell to a 'hit',\r\n\t\t\t\t\t// because it overrides the CSS class to 'sunk' if we find that the ship was sunk\r\n\t\t\t\t\ttargetFleet.findShipByCoords(x, y).incrementDamage(); // increase the damage\r\n\t\t\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\t\t\tthis.shotsTaken++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.checkIfWon();\r\n\t\t\t\t\treturn CONST.TYPE_HIT;\r\n\t\t\t\t} else {\r\n\t\t\t\t\ttargetGrid.updateCell(x, y, 'miss', targetPlayer);\r\n\t\t\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\t\t\tthis.shotsTaken++;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.checkIfWon();\r\n\t\t\t\t\treturn CONST.TYPE_MISS;\r\n\t\t\t\t}\r\n\t\t};\r\n\t\t// Creates click event listeners on each one of the 100 grid cells\r\n\t\tGame.prototype.shootListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\t// Extract coordinates from event listener\r\n\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\t\t\tvar result = null;\r\n\t\t\tif (self.readyToPlay) {\r\n\t\t\t\tresult = self.shoot(x, y, CONST.COMPUTER_PLAYER);\r\n\r\n\t\t\t\t// Remove the tutorial arrow\r\n\t\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tif (result !== null && !Game.gameOver) {\r\n\t\t\t\t// The AI shoots iff the player clicks on a cell that he/she hasn't\r\n\t\t\t\t// already clicked on yet\r\n\t\t\t\tself.robot.shoot();\r\n\t\t\t} else {\r\n\t\t\t\tGame.gameOver = false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates click event listeners on each of the ship names in the roster\r\n\t\tGame.prototype.rosterListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\t// Remove all classes of 'placing' from the fleet roster first\r\n\t\t\tvar roster = document.querySelectorAll('.fleet-roster li');\r\n\t\t\tfor (var i = 0; i < roster.length; i++) {\r\n\t\t\t\tvar classes = roster[i].getAttribute('class') || '';\r\n\t\t\t\tclasses = classes.replace('placing', '');\r\n\t\t\t\troster[i].setAttribute('class', classes);\r\n\t\t\t}\r\n\r\n\t\t\t// Move the highlight to the next step\r\n\t\t\tif (gameTutorial.currentStep === 1) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t}\r\n\r\n\t\t\t// Set the class of the target ship to 'placing'\r\n\t\t\tGame.placeShipType = e.target.getAttribute('id');\r\n\t\t\tdocument.getElementById(Game.placeShipType).setAttribute('class', 'placing');\r\n\t\t\tGame.placeShipDirection = parseInt(document.getElementById('rotate-button').getAttribute('data-direction'), 10);\r\n\t\t\tself.placingOnGrid = true;\r\n\t\t};\r\n\t\t// Creates click event listeners on the human player's grid to handle\r\n\t\t// ship placement after the user has selected a ship name\r\n\t\tGame.prototype.placementListener = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\t// Extract coordinates from event listener\r\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\r\n\t\t\t\t// Don't screw up the direction if the user tries to place again.\r\n\t\t\t\tvar successful = self.humanFleet.placeShip(x, y, Game.placeShipDirection, Game.placeShipType);\r\n\t\t\t\tif (successful) {\r\n\t\t\t\t\t// Done placing this ship\r\n\t\t\t\t\tself.endPlacing(Game.placeShipType);\r\n\r\n\t\t\t\t\t// Remove the helper arrow\r\n\t\t\t\t\tif (gameTutorial.currentStep === 2) {\r\n\t\t\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tself.placingOnGrid = false;\r\n\t\t\t\t\tif (self.areAllShipsPlaced()) {\r\n\t\t\t\t\t\tvar el = document.getElementById('rotate-button');\r\n\t\t\t\t\t\tel.addEventListener(transitionEndEventName(), (function () {\r\n\t\t\t\t\t\t\tel.setAttribute('class', 'hidden');\r\n\t\t\t\t\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').setAttribute('class', 'highlight');\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tdocument.getElementById('start-game').removeAttribute('class');\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}), false);\r\n\t\t\t\t\t\tel.setAttribute('class', 'invisible');\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates mouseover event listeners that handles mouseover on the\r\n\t\t// human player's grid to draw a phantom ship implying that the user\r\n\t\t// is allowed to place a ship there\r\n\t\tGame.prototype.placementMouseover = function (e) {\r\n\t\t\t// conlose.log(\"placementMouseover\");\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\tvar x = parseInt(e.target.getAttribute('data-x'), 10);\r\n\t\t\t\tvar y = parseInt(e.target.getAttribute('data-y'), 10);\r\n\t\t\t\tvar classes;\r\n\t\t\t\tvar fleetRoster = self.humanFleet.fleetRoster;\r\n\r\n\t\t\t\tfor (var i = 0; i < fleetRoster.length; i++) {\r\n\t\t\t\t\tvar shipType = fleetRoster[i].type;\r\n\r\n\t\t\t\t\tif (Game.placeShipType === shipType &&\r\n\t\t\t\t\t\tfleetRoster[i].isLegal(x, y, Game.placeShipDirection)) {\r\n\t\t\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\r\n\t\t\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\r\n\t\t\t\t\t\t\tclasses = el.getAttribute('class');\r\n\t\t\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\r\n\t\t\t\t\t\t\tif (classes.indexOf(' grid-ship') < 0) {\r\n\t\t\t\t\t\t\t\tclasses += ' grid-ship';\r\n\t\t\t\t\t\t\t\tel.setAttribute('class', classes);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Creates mouseout event listeners that un-draws the phantom ship\r\n\t\t// on the human player's grid as the user hovers over a different cell\r\n\t\tGame.prototype.placementMouseout = function (e) {\r\n\t\t\t// console.log(\"on placementMouseout\");\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tif (self.placingOnGrid) {\r\n\t\t\t\tfor (var j = 0; j < Game.placeShipCoords.length; j++) {\r\n\t\t\t\t\tvar el = document.querySelector('.grid-cell-' + Game.placeShipCoords[j].x + '-' + Game.placeShipCoords[j].y);\r\n\t\t\t\t\tvar classes = el.getAttribute('class');\r\n\t\t\t\t\t// Check if the substring ' grid-ship' already exists to avoid adding it twice\r\n\t\t\t\t\tif (classes.indexOf(' grid-ship') > -1) {\r\n\t\t\t\t\t\tclasses = classes.replace(' grid-ship', '');\r\n\t\t\t\t\t\tel.setAttribute('class', classes);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Click handler for the Rotate Ship button\r\n\t\tGame.prototype.toggleRotation = function (e) {\r\n\t\t\t// Toggle rotation direction\r\n\t\t\tvar direction = parseInt(e.target.getAttribute('data-direction'), 10);\r\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\te.target.setAttribute('data-direction', '1');\r\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_HORIZONTAL;\r\n\t\t\t} else if (direction === Ship.DIRECTION_HORIZONTAL) {\r\n\t\t\t\te.target.setAttribute('data-direction', '0');\r\n\t\t\t\tGame.placeShipDirection = Ship.DIRECTION_VERTICAL;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Click handler for the Start Game button\r\n\t\tGame.prototype.startGame = function (e) {\r\n\t\t\tvar self = e.target.self;\r\n\t\t\tvar el = document.getElementById('roster-sidebar');\r\n\t\t\tvar fn = function () { el.setAttribute('class', 'hidden'); };\r\n\t\t\tel.addEventListener(transitionEndEventName(), fn, false);\r\n\t\t\tel.setAttribute('class', 'invisible');\r\n\t\t\tself.readyToPlay = true;\r\n\r\n\t\t\t// Advanced the tutorial step\r\n\t\t\tif (gameTutorial.currentStep === 3) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t}\r\n\t\t\tel.removeEventListener(transitionEndEventName(), fn, false);\r\n\t\t};\r\n\t\t// Click handler for Restart Game button\r\n\t\tGame.prototype.restartGame = function (e) {\r\n\t\t\twindow.location.reload();\r\n\t\t};\r\n\t\t// // Debugging function used to place all ships and just start\r\n\t\t// Game.prototype.placeRandomly = function (e) {\r\n\t\t// \te.target.removeEventListener(e.type, arguments.callee);\r\n\t\t// \te.target.self.humanFleet.placeShipsRandomly();\r\n\t\t// \te.target.self.readyToPlay = true;\r\n\t\t// \tdocument.getElementById('roster-sidebar').setAttribute('class', 'hidden');\r\n\t\t// \tthis.setAttribute('class', 'hidden');\r\n\t\t// };\r\n\t\t// Ends placing the current ship\r\n\t\tGame.prototype.endPlacing = function (shipType) {\r\n\t\t\tdocument.getElementById(shipType).setAttribute('class', 'placed');\r\n\r\n\t\t\t// Mark the ship as 'used'\r\n\t\t\tGame.usedShips[CONST.AVAILABLE_SHIPS.indexOf(shipType)] = CONST.USED;\r\n\r\n\t\t\t// Wipe out the variable when you're done with it\r\n\t\t\tGame.placeShipDirection = null;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\t\t};\r\n\t\t// Checks whether or not all ships are done placing\r\n\t\t// Returns boolean\r\n\t\tGame.prototype.areAllShipsPlaced = function () {\r\n\t\t\tvar playerRoster = document.querySelectorAll('.fleet-roster li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tif (playerRoster[i].getAttribute('class') === 'placed') {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t} else {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Reset temporary variables\r\n\t\t\tGame.placeShipDirection = 0;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\t\t\treturn true;\r\n\t\t};\r\n\t\t// Resets the fog of war\r\n\t\tGame.prototype.resetFogOfWar = function () {\r\n\t\t\tfor (var i = 0; i < Game.size; i++) {\r\n\t\t\t\tfor (var j = 0; j < Game.size; j++) {\r\n\t\t\t\t\tthis.humanGrid.updateCell(i, j, 'empty', CONST.HUMAN_PLAYER);\r\n\t\t\t\t\tthis.computerGrid.updateCell(i, j, 'empty', CONST.COMPUTER_PLAYER);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Reset all values to indicate the ships are ready to be placed again\r\n\t\t\tGame.usedShips = Game.usedShips.map(function () { return CONST.UNUSED; });\r\n\t\t};\r\n\t\t// Resets CSS styling of the sidebar\r\n\t\tGame.prototype.resetRosterSidebar = function () {\r\n\t\t\tvar els = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < els.length; i++) {\r\n\t\t\t\tels[i].removeAttribute('class');\r\n\t\t\t}\r\n\r\n\t\t\tif (gameTutorial.showTutorial) {\r\n\t\t\t\tgameTutorial.nextStep();\r\n\t\t\t} else {\r\n\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\r\n\t\t\t}\r\n\t\t\tdocument.getElementById('rotate-button').removeAttribute('class');\r\n\t\t\tdocument.getElementById('start-game').setAttribute('class', 'hidden');\r\n\t\t};\r\n\t\tGame.prototype.showRestartSidebar = function () {\r\n\t\t\tvar sidebar = document.getElementById('restart-sidebar');\r\n\t\t\tsidebar.setAttribute('class', 'highlight');\r\n\r\n\t\t\t// Deregister listeners\r\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\r\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\r\n\t\t\t\tcomputerCells[j].removeEventListener('click', this.shootListener, false);\r\n\t\t\t}\r\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tplayerRoster[i].removeEventListener('click', this.rosterListener, false);\r\n\t\t\t}\r\n\r\n\t\t\tvar restartButton = document.getElementById('restart-game');\r\n\t\t\trestartButton.addEventListener('click', this.restartGame, false);\r\n\t\t\trestartButton.self = this;\r\n\t\t};\r\n\t\t// Generates the HTML divs for the grid for both players\r\n\t\tGame.prototype.createGrid = function () {\r\n\t\t\tvar gridDiv = document.querySelectorAll('.grid');\r\n\t\t\tfor (var grid = 0; grid < gridDiv.length; grid++) {\r\n\t\t\t\tgridDiv[grid].removeChild(gridDiv[grid].querySelector('.no-js')); // Removes the no-js warning\r\n\t\t\t\tfor (var i = 0; i < Game.size; i++) {\r\n\t\t\t\t\tfor (var j = 0; j < Game.size; j++) {\r\n\t\t\t\t\t\tvar el = document.createElement('div');\r\n\t\t\t\t\t\tel.setAttribute('data-x', i);\r\n\t\t\t\t\t\tel.setAttribute('data-y', j);\r\n\t\t\t\t\t\tel.setAttribute('class', 'grid-cell grid-cell-' + i + '-' + j);\r\n\t\t\t\t\t\tgridDiv[grid].appendChild(el);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Initializes the Game\r\n\t\tGame.prototype.init = function () {\r\n\t\t\tthis.humanGrid = new Grid(Game.size);\r\n\t\t\tthis.computerGrid = new Grid(Game.size);\r\n\t\t\tthis.humanFleet = new Fleet(this.humanGrid, CONST.HUMAN_PLAYER);\r\n\t\t\tthis.computerFleet = new Fleet(this.computerGrid, CONST.COMPUTER_PLAYER);\r\n\r\n\t\t\tthis.robot = new AI(this);\r\n\r\n\t\t\t// Reset game variables\r\n\t\t\tthis.shotsTaken = 0;\r\n\t\t\tthis.readyToPlay = false;\r\n\t\t\tthis.placingOnGrid = false;\r\n\t\t\tGame.placeShipDirection = 0;\r\n\t\t\tGame.placeShipType = '';\r\n\t\t\tGame.placeShipCoords = [];\r\n\r\n\t\t\tthis.resetRosterSidebar();\r\n\r\n\t\t\t// Add a click listener for the Grid.shoot() method for all cells\r\n\t\t\t// Only add this listener to the computer's grid\r\n\t\t\tvar computerCells = document.querySelector('.computer-player').childNodes;\r\n\t\t\tfor (var j = 0; j < computerCells.length; j++) {\r\n\t\t\t\tcomputerCells[j].self = this;\r\n\t\t\t\tcomputerCells[j].addEventListener('click', this.shootListener, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add a click listener to the roster\t\r\n\t\t\tvar playerRoster = document.querySelector('.fleet-roster').querySelectorAll('li');\r\n\t\t\tfor (var i = 0; i < playerRoster.length; i++) {\r\n\t\t\t\tplayerRoster[i].self = this;\r\n\t\t\t\tplayerRoster[i].addEventListener('click', this.rosterListener, false);\r\n\t\t\t}\r\n\r\n\t\t\t// Add a click listener to the human player's grid while placing\r\n\t\t\tvar humanCells = document.querySelector('.human-player').childNodes;\r\n\t\t\tfor (var k = 0; k < humanCells.length; k++) {\r\n\t\t\t\thumanCells[k].self = this;\r\n\t\t\t\thumanCells[k].addEventListener('click', this.placementListener, false);\r\n\t\t\t\thumanCells[k].addEventListener('mouseover', this.placementMouseover, false);\r\n\t\t\t\thumanCells[k].addEventListener('mouseout', this.placementMouseout, false);\r\n\t\t\t}\r\n\r\n\t\t\tvar rotateButton = document.getElementById('rotate-button');\r\n\t\t\trotateButton.addEventListener('click', this.toggleRotation, false);\r\n\t\t\tvar startButton = document.getElementById('start-game');\r\n\t\t\tstartButton.self = this;\r\n\t\t\tstartButton.addEventListener('click', this.startGame, false);\r\n\t\t\t// var resetButton = document.getElementById('reset-stats');\r\n\t\t\t// resetButton.addEventListener('click', Game.stats.resetStats, false);\r\n\t\t\tvar randomButton = document.getElementById('place-randomly');\r\n\t\t\trandomButton.self = this;\r\n\t\t\trandomButton.addEventListener('click', this.placeRandomly, false);\r\n\t\t\t// this.computerFleet.placeShipsRandomly();\r\n\t\t\tthis.computerFleet.placeShipsRandomlyComp();\r\n\t\t};\r\n\r\n\t\t// Grid object\r\n\t\t// Constructor\r\n\t\tfunction Grid(size) {\r\n\t\t\tthis.size = size;\r\n\t\t\tthis.cells = [];\r\n\t\t\tthis.init();\r\n\t\t}\r\n\r\n\t\t// Initialize and populate the grid\r\n\t\tGrid.prototype.init = function () {\r\n\t\t\tfor (var x = 0; x < this.size; x++) {\r\n\t\t\t\tvar row = [];\r\n\t\t\t\tthis.cells[x] = row;\r\n\t\t\t\tfor (var y = 0; y < this.size; y++) {\r\n\t\t\t\t\trow.push(CONST.TYPE_EMPTY);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Updates the cell's CSS class based on the type passed in\r\n\t\tGrid.prototype.updateCell = function (x, y, type, targetPlayer) {\r\n\t\t\tvar player;\r\n\t\t\tif (targetPlayer === CONST.HUMAN_PLAYER) {\r\n\t\t\t\tplayer = 'human-player';\r\n\t\t\t} else if (targetPlayer === CONST.COMPUTER_PLAYER) {\r\n\t\t\t\tplayer = 'computer-player';\r\n\t\t\t}\r\n\r\n\t\t\tswitch (type) {\r\n\t\t\t\tcase CONST.CSS_TYPE_EMPTY:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_SHIP:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SHIP;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_MISS:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_MISS;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_HIT:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_HIT;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.CSS_TYPE_SUNK:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_SUNK;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.cells[x][y] = CONST.TYPE_EMPTY;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tvar classes = ['grid-cell', 'grid-cell-' + x + '-' + y, 'grid-' + type];\r\n\t\t\tdocument.querySelector('.' + player + ' .grid-cell-' + x + '-' + y).setAttribute('class', classes.join(' '));\r\n\t\t};\r\n\t\t// Checks to see if a cell contains an undamaged ship\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isUndamagedShip = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_SHIP;\r\n\t\t};\r\n\t\t// Checks to see if the shot was missed. This is equivalent\r\n\t\t// to checking if a cell contains a cannonball\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isMiss = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_MISS;\r\n\t\t};\r\n\t\t// Checks to see if a cell contains a damaged ship,\r\n\t\t// either hit or sunk.\r\n\t\t// Returns boolean\r\n\t\tGrid.prototype.isDamagedShip = function (x, y) {\r\n\t\t\treturn this.cells[x][y] === CONST.TYPE_HIT || this.cells[x][y] === CONST.TYPE_SUNK;\r\n\t\t};\r\n\r\n\t\t// Fleet object\r\n\t\t// This object is used to keep track of a player's portfolio of ships\r\n\t\t// Constructor\r\n\t\tfunction Fleet(playerGrid, player) {\r\n\t\t\tthis.numShips = CONST.AVAILABLE_SHIPS.length;\r\n\t\t\tthis.playerGrid = playerGrid;\r\n\t\t\tthis.player = player;\r\n\t\t\tthis.fleetRoster = [];\r\n\t\t\tthis.populate();\r\n\t\t}\r\n\t\t// Populates a fleet\r\n\t\tFleet.prototype.populate = function () {\r\n\t\t\tfor (var i = 0; i < this.numShips; i++) {\r\n\t\t\t\t// loop over the ship types when numShips > Constants.AVAILABLE_SHIPS.length\r\n\t\t\t\tvar j = i % CONST.AVAILABLE_SHIPS.length;\r\n\t\t\t\tthis.fleetRoster.push(new Ship(CONST.AVAILABLE_SHIPS[j], this.playerGrid, this.player));\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Places the ship and returns whether or not the placement was successful\r\n\t\t// Returns boolean\r\n\t\tFleet.prototype.placeShip = function (x, y, direction, shipType) {\r\n\t\t\tvar shipCoords;\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar shipTypes = this.fleetRoster[i].type;\r\n\r\n\t\t\t\tif (shipType === shipTypes &&\r\n\t\t\t\t\tthis.fleetRoster[i].isLegal(x, y, direction)) {\r\n\t\t\t\t\tthis.fleetRoster[i].create(x, y, direction, false);\r\n\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\r\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\r\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\r\n\t\t\t\t\t}\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t// Places ships randomly on the board\r\n\t\t// TODO: Avoid placing ships too close to each other\r\n\t\tFleet.prototype.placeShipsRandomly = function () {\r\n\t\t\tvar shipCoords;\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar illegalPlacement = true;\r\n\r\n\t\t\t\t// Prevents the random placement of already placed ships\r\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] === CONST.USED) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\twhile (illegalPlacement) {\r\n\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\r\n\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\r\n\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\r\n\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\t\t\t\t\t\tillegalPlacement = false;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.player === CONST.HUMAN_PLAYER && Game.usedShips[i] !== CONST.USED) {\r\n\t\t\t\t\tfor (var j = 0; j < shipCoords.length; j++) {\r\n\t\t\t\t\t\tthis.playerGrid.updateCell(shipCoords[j].x, shipCoords[j].y, 'ship', this.player);\r\n\t\t\t\t\t\tGame.usedShips[i] = CONST.USED;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\tFleet.prototype.placeShipsRandomlyComp = function () {\r\n\t\t\tswitch (Math.floor(4 * Math.random())) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tconsole.log(\"case 0\");\r\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\r\n\t\t\t\t\tvar availableShipsCount = 10;\r\n\t\t\t\t\tvar shipIndex;\r\n\t\t\t\t\tvar ySub;\r\n\r\n\t\t\t\t\twhile (availableShipsCount > 0) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex after cond\");\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \"dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tySub = this.fleetRoster[shipIndex].maxDamage;\r\n\t\t\t\t\t\t\tconsole.log(\" in cond\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconsole.log(ySub + \"  sub\");\r\n\t\t\t\t\t\t// console.log(this.fleetRoster[shipIndex]);\r\n\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\tfor (var y = 0; y < 5; y++) {\r\n\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t// if (y + ySub < 5) {\r\n\t\t\t\t\t\t\t\t\t\t// \tySub = 0;\r\n\t\t\t\t\t\t\t\t\t\t// }\r\n\t\t\t\t\t\t\t\t\t\t// console.log(ySub + \"  after if   \" + y);\r\n\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection) && (y + ySub < 5)) {\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tconsole.log(\"case 1\");\r\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\r\n\t\t\t\t\tvar availableShipsCount = 10;\r\n\t\t\t\t\tvar shipIndex;\r\n\t\t\t\t\tvar ySub;\r\n\r\n\t\t\t\t\twhile (availableShipsCount > 0) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(10 * Math.random());\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex after cond\");\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \"dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tySub = this.fleetRoster[shipIndex].maxDamage;\r\n\t\t\t\t\t\t\tconsole.log(\" in cond\")\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tconsole.log(ySub + \"  sub\");\r\n\t\t\t\t\t\t// console.log(this.fleetRoster[shipIndex]);\r\n\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\tfor (var y = 5; y < 10; y++) {\r\n\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection) && (y + ySub < 10)) {\r\n\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tconsole.log(\"case 2\");\r\n\t\t\t\t\t// in the hole grid\r\n\t\t\t\t\tvar shipCoords;\r\n\t\t\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\t\t\tvar illegalPlacement = true;\r\n\t\t\t\t\t\twhile (illegalPlacement) {\r\n\t\t\t\t\t\t\tvar randomX = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\t\t\tvar randomY = Math.floor(Game.size * Math.random());\r\n\t\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\r\n\t\t\t\t\t\t\tif (this.fleetRoster[i].isLegal(randomX, randomY, randomDirection)) {\r\n\t\t\t\t\t\t\t\tthis.fleetRoster[i].create(randomX, randomY, randomDirection, false);\r\n\t\t\t\t\t\t\t\tshipCoords = this.fleetRoster[i].getAllShipCells();\r\n\t\t\t\t\t\t\t\tillegalPlacement = false;\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tconsole.log(\"case 3\");\r\n\t\t\t\t\tvar unusedShips = ['unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused', 'unused'];\r\n\t\t\t\t\tvar availableShipsCount = 10;\r\n\t\t\t\t\tvar shipIndex;\r\n\t\t\t\t\tvar ySub;\r\n\r\n\t\t\t\t\twhile (availableShipsCount > 4) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \" dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var x = 0; x < 10; x += 9) {\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var y = 0; y < 10; y++) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, y, randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var y = 0; y < 10; y += 9) {\r\n\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\twhile (availableShipsCount > 4) {\r\n\t\t\t\t\t\t// console.log(availableShipsCount + \"count ship\");\r\n\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex\");\r\n\t\t\t\t\t\tySub = 0;\r\n\t\t\t\t\t\twhile (unusedShips[shipIndex] == 'used') {\r\n\t\t\t\t\t\t\tshipIndex = Math.floor(6 * Math.random() + 4);\r\n\t\t\t\t\t\t\t// console.log(shipIndex + \" shipIndex in if cond\");\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tvar randomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\t// console.log(randomDirection + \" dir\");\r\n\t\t\t\t\t\tif (randomDirection === 1) {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var x = 0; x < 10; x += 9) {\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var y = 9; y >= 0 ; y--) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, y, randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\telse {\r\n\t\t\t\t\t\t\tvar isPlaced = false;\r\n\t\t\t\t\t\t\tfor (var y = 0; y < 10; y += 9) {\r\n\r\n\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\tfor (var x = 0; x < 10; x++) {\r\n\t\t\t\t\t\t\t\t\t\tif (!isPlaced) {\r\n\t\t\t\t\t\t\t\t\t\t\tif (this.fleetRoster[shipIndex].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\t\t\t\t\t\tthis.fleetRoster[shipIndex].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\t\t\t\t\t\tunusedShips[shipIndex] = 'used';\r\n\t\t\t\t\t\t\t\t\t\t\t\tavailableShipsCount--;\r\n\r\n\t\t\t\t\t\t\t\t\t\t\t\tisPlaced = true;\r\n\t\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar m = 0;\r\n\t\t\t\t\twhile (availableShipsCount > 0) {\r\n\t\t\t\t\t\t// console.log(\"in last while\");\t\t\t\t\t\t\r\n\t\t\t\t\t\tvar x = Math.floor(8 * Math.random() + 1);\r\n\t\t\t\t\t\tvar y = Math.floor(8 * Math.random() + 1);\r\n\t\t\t\t\t\trandomDirection = Math.floor(2 * Math.random());\r\n\t\t\t\t\t\tif (this.fleetRoster[m].isLegal(x, y, randomDirection)) {\r\n\t\t\t\t\t\t\t// console.log(x + \" x\" + y + \" y\");\r\n\t\t\t\t\t\t\t// console.log(\"is legal\")\r\n\t\t\t\t\t\t\tthis.fleetRoster[m].create(x, (y), randomDirection, false);\r\n\t\t\t\t\t\t\tunusedShips[m] = 'used';\r\n\t\t\t\t\t\t\t// console.log(availableShipsCount + \"ship count\")\r\n\t\t\t\t\t\t\tavailableShipsCount--;\r\n\t\t\t\t\t\t\tm++;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t// console.log(unusedShips);\r\n\t\t\t\t\tconsole.log(\"done\");\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Finds a ship by location\r\n\t\t// Returns the ship object located at (x, y)\r\n\t\t// If no ship exists at (x, y), this returns null instead\r\n\t\tFleet.prototype.findShipByCoords = function (x, y) {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tvar currentShip = this.fleetRoster[i];\r\n\t\t\t\tif (currentShip.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tif (y === currentShip.yPosition &&\r\n\t\t\t\t\t\tx >= currentShip.xPosition &&\r\n\t\t\t\t\t\tx < currentShip.xPosition + currentShip.shipLength) {\r\n\t\t\t\t\t\treturn currentShip;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (x === currentShip.xPosition &&\r\n\t\t\t\t\t\ty >= currentShip.yPosition &&\r\n\t\t\t\t\t\ty < currentShip.yPosition + currentShip.shipLength) {\r\n\t\t\t\t\t\treturn currentShip;\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\t// Finds a ship by its type\r\n\t\t// Param shipType is a string\r\n\t\t// Returns the ship object that is of type shipType\r\n\t\t// If no ship exists, this returns null.\r\n\t\tFleet.prototype.findShipByType = function (shipType) {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\tif (this.fleetRoster[i].type === shipType) {\r\n\t\t\t\t\treturn this.fleetRoster[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn null;\r\n\t\t};\r\n\t\t// Checks to see if all ships have been sunk\r\n\t\t// Returns boolean\r\n\t\tFleet.prototype.allShipsSunk = function () {\r\n\t\t\tfor (var i = 0; i < this.fleetRoster.length; i++) {\r\n\t\t\t\t// If one or more ships are not sunk, then the sentence \"all ships are sunk\" is false.\r\n\t\t\t\tif (this.fleetRoster[i].sunk === false) {\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn true;\r\n\t\t};\r\n\r\n\t\t// Ship object\r\n\t\t// Constructor\r\n\t\tfunction Ship(type, playerGrid, player) {\r\n\t\t\tthis.damage = 0;\r\n\t\t\tthis.type = type;\r\n\t\t\tthis.playerGrid = playerGrid;\r\n\t\t\tthis.player = player;\r\n\r\n\t\t\tswitch (this.type) {\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[0]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[1]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[2]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[3]:\r\n\t\t\t\t\tthis.shipLength = 1;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[4]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[5]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[6]:\r\n\t\t\t\t\tthis.shipLength = 2;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[7]:\r\n\t\t\t\t\tthis.shipLength = 3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[8]:\r\n\t\t\t\t\tthis.shipLength = 3;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase CONST.AVAILABLE_SHIPS[9]:\r\n\t\t\t\t\tthis.shipLength = 4;\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tthis.maxDamage = this.shipLength;\r\n\t\t\tthis.sunk = false;\r\n\t\t}\r\n\t\t// Checks to see if the placement of a ship is legal\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.isLegal = function (x, y, direction) {\r\n\t\t\t// first, check if the ship is within the grid...\r\n\t\t\tif (this.withinBounds(x, y, direction)) {\r\n\t\t\t\t// ...then check to make sure it doesn't collide with another ship\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\t\tif (this.playerGrid.cells[x + i][y] === CONST.TYPE_SHIP ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_MISS ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_SUNK ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] === CONST.TYPE_NOT_ALLOWED) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tif (this.playerGrid.cells[x][y + i] === CONST.TYPE_SHIP ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_MISS ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_SUNK ||\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] === CONST.TYPE_NOT_ALLOWED) {\r\n\t\t\t\t\t\t\treturn false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\treturn true;\r\n\t\t\t} else {\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Checks to see if the ship is within bounds of the grid\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.withinBounds = function (x, y, direction) {\r\n\t\t\tif (direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\treturn x + this.shipLength <= Game.size;\r\n\t\t\t} else {\r\n\t\t\t\treturn y + this.shipLength <= Game.size;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Increments the damage counter of a ship\r\n\t\t// Returns Ship\r\n\t\tShip.prototype.incrementDamage = function () {\r\n\t\t\tthis.damage++;\r\n\t\t\tif (this.isSunk()) {\r\n\t\t\t\tthis.sinkShip(false); // Sinks the ship\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Checks to see if the ship is sunk\r\n\t\t// Returns boolean\r\n\t\tShip.prototype.isSunk = function () {\r\n\t\t\treturn this.damage >= this.maxDamage;\r\n\t\t};\r\n\t\t// Sinks the ship\r\n\t\tShip.prototype.sinkShip = function (virtual) {\r\n\t\t\tthis.damage = this.maxDamage; // Force the damage to exceed max damage\r\n\t\t\tthis.sunk = true;\r\n\r\n\t\t\t// Make the CSS class sunk, but only if the ship is not virtual\r\n\t\t\tif (!virtual) {\r\n\t\t\t\tvar allCells = this.getAllShipCells();\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tthis.playerGrid.updateCell(allCells[i].x, allCells[i].y, 'sunk', this.player);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t/**\r\n\t\t * Gets all the ship cells\r\n\t\t *\r\n\t\t * Returns an array with all (x, y) coordinates of the ship:\r\n\t\t * e.g.\r\n\t\t * [\r\n\t\t *\t{'x':2, 'y':2},\r\n\t\t *\t{'x':3, 'y':2},\r\n\t\t *\t{'x':4, 'y':2}\r\n\t\t * ]\r\n\t\t */\r\n\t\tShip.prototype.getAllShipCells = function () {\r\n\t\t\tvar resultObject = [];\r\n\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition + i, 'y': this.yPosition };\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresultObject[i] = { 'x': this.xPosition, 'y': this.yPosition + i };\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn resultObject;\r\n\t\t};\r\n\t\t// Initializes a ship with the given coordinates and direction (bearing).\r\n\t\t// If the ship is declared \"virtual\", then the ship gets initialized with\r\n\t\t// its coordinates but DOESN'T get placed on the grid.\r\n\t\tShip.prototype.create = function (x, y, direction, virtual) {\r\n\t\t\t// This function assumes that you've already checked that the placement is legal\r\n\t\t\tthis.xPosition = x;\r\n\t\t\tthis.yPosition = y;\r\n\t\t\tthis.direction = direction;\r\n\r\n\t\t\t// If the ship is virtual, don't add it to the grid.\r\n\t\t\tif (!virtual) {\r\n\t\t\t\tfor (var i = 0; i < this.shipLength; i++) {\r\n\t\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + i][y] = CONST.TYPE_SHIP;\r\n\r\n\t\t\t\t\t\tif (this.checkPosition(x + i, y + 1)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPosition(x + i, y - 1)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + i][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + i] = CONST.TYPE_SHIP;\r\n\r\n\t\t\t\t\t\tif (this.checkPosition(x + 1, y + i)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + i] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPosition(x - 1, y + i)) {\r\n\t\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + i] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y + 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + this.shipLength, y + 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n\t\t\t\t\tif (this.checkPosition(x + 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x, y - 1)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x + 1, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x - 1, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (this.checkPosition(x, y + this.shipLength)) {\r\n\t\t\t\t\t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tShip.prototype.checkPosition = function (x, y) {\r\n\t\t\tlet triger = false;\r\n\t\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\r\n\t\t\t\ttriger = true;\r\n\t\t\t}\r\n\t\t\treturn triger\r\n\t\t};\r\n\t\t// direction === 0 when the ship is facing north/south\r\n\t\t// direction === 1 when the ship is facing east/west\r\n\t\tShip.DIRECTION_VERTICAL = 0;\r\n\t\tShip.DIRECTION_HORIZONTAL = 1;\r\n\r\n\t\t// Tutorial Object\r\n\t\t// Constructor\r\n\t\tfunction Tutorial() {\r\n\t\t\tthis.currentStep = 0;\r\n\t\t\t// Check if 'showTutorial' is initialized, if it's uninitialized, set it to true.\r\n\t\t\tthis.showTutorial = localStorage.getItem('showTutorial') !== 'false';\r\n\t\t}\r\n\t\t// Advances the tutorial to the next step\r\n\t\tTutorial.prototype.nextStep = function () {\r\n\t\t\tvar humanGrid = document.querySelector('.human-player');\r\n\t\t\tvar computerGrid = document.querySelector('.computer-player');\r\n\t\t\tswitch (this.currentStep) {\r\n\t\t\t\tcase 0:\r\n\t\t\t\t\tdocument.getElementById('roster-sidebar').setAttribute('class', 'highlight');\r\n\t\t\t\t\t//document.getElementById('step1').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tdocument.getElementById('roster-sidebar').removeAttribute('class');\r\n\t\t\t\t\t// document.getElementById('step1').removeAttribute('class');\r\n\t\t\t\t\thumanGrid.setAttribute('class', humanGrid.getAttribute('class') + ' highlight');\r\n\t\t\t\t\t// document.getElementById('step2').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t// document.getElementById('step2').removeAttribute('class');\r\n\t\t\t\t\tvar humanClasses = humanGrid.getAttribute('class');\r\n\t\t\t\t\thumanClasses = humanClasses.replace(' highlight', '');\r\n\t\t\t\t\thumanGrid.setAttribute('class', humanClasses);\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerGrid.getAttribute('class') + ' highlight');\r\n\t\t\t\t\t// document.getElementById('step3').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 4:\r\n\t\t\t\t\tvar computerClasses = computerGrid.getAttribute('class');\r\n\t\t\t\t\t// document.getElementById('step3').removeAttribute('class');\r\n\t\t\t\t\tcomputerClasses = computerClasses.replace(' highlight', '');\r\n\t\t\t\t\tcomputerGrid.setAttribute('class', computerClasses);\r\n\t\t\t\t\t// document.getElementById('step4').setAttribute('class', 'current-step');\r\n\t\t\t\t\tthis.currentStep++;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 5:\r\n\t\t\t\t\t//document.getElementById('step4').removeAttribute('class');\r\n\t\t\t\t\tthis.currentStep = 6;\r\n\t\t\t\t\tthis.showTutorial = false;\r\n\t\t\t\t\tlocalStorage.setItem('showTutorial', false);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// AI Object\r\n\t\t// Optimal battleship-playing AI\r\n\t\t// Constructor\r\n\t\tfunction AI(gameObject) {\r\n\t\t\tthis.gameObject = gameObject;\r\n\t\t\tthis.virtualGrid = new Grid(Game.size);\r\n\t\t\tthis.virtualFleet = new Fleet(this.virtualGrid, CONST.VIRTUAL_PLAYER);\r\n\r\n\t\t\tthis.probGrid = []; // Probability Grid\r\n\t\t\tthis.initProbs();\r\n\t\t\tthis.updateProbs();\r\n\t\t}\r\n\r\n\t\tAI.PROB_WEIGHT = 5000; // arbitrarily big number\r\n\t\t// how much weight to give to the opening book's high probability cells\r\n\t\tAI.OPEN_HIGH_MIN = 20;\r\n\t\tAI.OPEN_HIGH_MAX = 30;\r\n\t\t// how much weight to give to the opening book's medium probability cells\r\n\t\tAI.OPEN_MED_MIN = 15;\r\n\t\tAI.OPEN_MED_MAX = 25;\r\n\t\t// how much weight to give to the opening book's low probability cells\r\n\t\tAI.OPEN_LOW_MIN = 10;\r\n\t\tAI.OPEN_LOW_MAX = 20;\r\n\t\t// Amount of randomness when selecting between cells of equal probability\r\n\t\tAI.RANDOMNESS = 0.1;\r\n\t\t// AI's opening book.\r\n\t\t// This is the pattern of the first cells for the AI to target\r\n\t\tAI.OPENINGS = [\r\n\t\t\t{ 'x': 7, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 6, 'y': 2, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 3, 'y': 7, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 2, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 6, 'y': 6, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 3, 'y': 3, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 5, 'y': 5, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 4, 'y': 4, 'weight': getRandom(AI.OPEN_LOW_MIN, AI.OPEN_LOW_MAX) },\r\n\t\t\t{ 'x': 0, 'y': 8, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\r\n\t\t\t{ 'x': 1, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 8, 'y': 0, 'weight': getRandom(AI.OPEN_MED_MIN, AI.OPEN_MED_MAX) },\r\n\t\t\t{ 'x': 9, 'y': 1, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 9, 'y': 9, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) },\r\n\t\t\t{ 'x': 0, 'y': 0, 'weight': getRandom(AI.OPEN_HIGH_MIN, AI.OPEN_HIGH_MAX) }\r\n\t\t];\r\n\t\t// Scouts the grid based on max probability, and shoots at the cell\r\n\t\t// that has the highest probability of containing a ship\r\n\t\tAI.prototype.shoot = function () {\r\n\t\t\tvar maxProbability = 0;\r\n\t\t\tvar maxProbCoords;\r\n\t\t\tvar maxProbs = [];\r\n\r\n\t\t\t// Add the AI's opening book to the probability grid\r\n\t\t\tfor (var i = 0; i < AI.OPENINGS.length; i++) {\r\n\t\t\t\tvar cell = AI.OPENINGS[i];\r\n\t\t\t\tif (this.probGrid[cell.x][cell.y] !== 0) {\r\n\t\t\t\t\tthis.probGrid[cell.x][cell.y] += cell.weight;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\tif (this.probGrid[x][y] > maxProbability) {\r\n\t\t\t\t\t\tmaxProbability = this.probGrid[x][y];\r\n\t\t\t\t\t\tmaxProbs = [{ 'x': x, 'y': y }]; // Replace the array\r\n\t\t\t\t\t} else if (this.probGrid[x][y] === maxProbability) {\r\n\t\t\t\t\t\tmaxProbs.push({ 'x': x, 'y': y });\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tmaxProbCoords = Math.random() < AI.RANDOMNESS ?\r\n\t\t\t\tmaxProbs[Math.floor(Math.random() * maxProbs.length)] :\r\n\t\t\t\tmaxProbs[0];\r\n\r\n\t\t\tvar result = this.gameObject.shoot(maxProbCoords.x, maxProbCoords.y, CONST.HUMAN_PLAYER);\r\n\r\n\t\t\t// If the game ends, the next lines need to be skipped.\r\n\t\t\tif (Game.gameOver) {\r\n\t\t\t\tGame.gameOver = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tthis.virtualGrid.cells[maxProbCoords.x][maxProbCoords.y] = result;\r\n\r\n\t\t\t// If you hit a ship, check to make sure if you've sunk it.\r\n\t\t\tif (result === CONST.TYPE_HIT) {\r\n\t\t\t\tvar humanShip = this.findHumanShip(maxProbCoords.x, maxProbCoords.y);\r\n\t\t\t\tif (humanShip.isSunk()) {\r\n\t\t\t\t\t// add here\r\n\t\t\t\t\t// var coords = humanShip.getAllShipCells();\r\n\t\t\t\t\t// console.log(coords);\r\n\t\t\t\t\t// for (var i = 0; i < coords.length; i++) {\r\n\t\t\t\t\t// \tif (humanShip.direction === Ship.DIRECTION_VERTICAL){\t\r\n\t\t\t\t\t// \t\tif (this.checkPos(coords[i].x, coords[i].y + 1)) {\r\n\t\t\t\t\t// \t\t\tthis.probGrid[coords[i].x][coords[i].y + 1] = 0;\r\n\t\t\t\t\t// \t\t}\r\n\t\t\t\t\t// \t\tif (this.checkPos(coords[i].x, coords[i].y - 1)) {\r\n\t\t\t\t\t// \t\t\tthis.probGrid[coords[i].x][coords[i].y - 1] = 0;\r\n\t\t\t\t\t// \t\t}\r\n\r\n\t\t\t\t\t// \t} else {\r\n\t\t\t\t\t// \t\tif (this.checkPos(coords[i].x + 1, coords[i].y)) {\r\n\t\t\t\t\t// \t\t\tthis.probGrid[coords[i].x + 1][coords[i].y] = 0;\r\n\t\t\t\t\t// \t\t}\r\n\t\t\t\t\t// \t\tif (this.checkPos(coords[i].x - 1, coords[i].y)) {\r\n\t\t\t\t\t// \t\t\tthis.probGrid[coords[i].x - 1][coords[i].y] = 0;\r\n\t\t\t\t\t// \t\t}\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// }\r\n\t\t\t\t\t// console.log(this.probGrid);\r\n\t\t\t\t\t// if (this.direction === Ship.DIRECTION_VERTICAL) {\r\n\t\t\t\t\t// \tif (this.checkPosition(x - 1, y - 1)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x - 1, y)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x - 1][y] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x - 1, y + 1)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x - 1][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x + this.shipLength, y - 1)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x + this.shipLength][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x + this.shipLength, y)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x + this.shipLength][y] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x + this.shipLength, y + 1)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x + this.shipLength][y + 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\r\n\t\t\t\t\t// } else {\r\n\t\t\t\t\t// \tif (this.checkPosition(x + 1, y - 1)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x + 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x - 1, y - 1)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x - 1][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x, y - 1)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x][y - 1] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x + 1, y + this.shipLength)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x + 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x - 1, y + this.shipLength)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x - 1][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// \tif (this.checkPosition(x, y + this.shipLength)) {\r\n\t\t\t\t\t// \t\tthis.playerGrid.cells[x][y + this.shipLength] = CONST.TYPE_NOT_ALLOWED;\r\n\t\t\t\t\t// \t}\r\n\t\t\t\t\t// }\r\n\r\n\t\t\t\t\t// Remove any ships from the roster that have been sunk\r\n\t\t\t\t\tvar shipTypes = [];\r\n\t\t\t\t\tfor (var k = 0; k < this.virtualFleet.fleetRoster.length; k++) {\r\n\t\t\t\t\t\tshipTypes.push(this.virtualFleet.fleetRoster[k].type);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tvar index = shipTypes.indexOf(humanShip.type);\r\n\t\t\t\t\tthis.virtualFleet.fleetRoster.splice(index, 1);\r\n\r\n\t\t\t\t\t// Update the virtual grid with the sunk ship's cells\r\n\t\t\t\t\tvar shipCells = humanShip.getAllShipCells();\r\n\t\t\t\t\tfor (var _i = 0; _i < shipCells.length; _i++) {\r\n\t\t\t\t\t\tthis.virtualGrid.cells[shipCells[_i].x][shipCells[_i].y] = CONST.TYPE_SUNK;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t// add here\r\n\r\n\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// Update probability grid after each shot\r\n\t\t\tthis.updateProbs();\r\n\t\t};\r\n\t\tAI.prototype.checkPos = function (x, y) {\r\n\t\t\tlet triger = false;\r\n\t\t\tif (x < 10 && y < 10 && x >= 0 && y >= 0) {\r\n\t\t\t\ttriger = true;\r\n\t\t\t}\r\n\t\t\treturn triger\r\n\t\t};\r\n\t\t// Update the probability grid\r\n\t\tAI.prototype.updateProbs = function () {\r\n\t\t\tvar roster = this.virtualFleet.fleetRoster;\r\n\t\t\tvar coords;\r\n\t\t\tthis.resetProbs();\r\n\r\n\t\t\t// Probabilities are not normalized to fit in the interval [0, 1]\r\n\t\t\t// because we're only interested in the maximum value.\r\n\r\n\t\t\t// This works by trying to fit each ship in each cell in every orientation\r\n\t\t\t// For every cell, the more legal ways a ship can pass through it, the more\r\n\t\t\t// likely the cell is to contain a ship.\r\n\t\t\t// Cells that surround known 'hits' are given an arbitrarily large probability\r\n\t\t\t// so that the AI tries to completely sink the ship before moving on.\r\n\r\n\t\t\tfor (var k = 0; k < roster.length; k++) {\r\n\t\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_VERTICAL)) {\r\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_VERTICAL, true);\r\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\r\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\r\n\t\t\t\t\t\t\t\tfor (var i = 0; i < coords.length; i++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[i].x][coords[i].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfor (var _i = 0; _i < coords.length; _i++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_i].x][coords[_i].y]++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (roster[k].isLegal(x, y, Ship.DIRECTION_HORIZONTAL)) {\r\n\t\t\t\t\t\t\troster[k].create(x, y, Ship.DIRECTION_HORIZONTAL, true);\r\n\t\t\t\t\t\t\tcoords = roster[k].getAllShipCells();\r\n\t\t\t\t\t\t\tif (this.passesThroughHitCell(coords)) {\r\n\t\t\t\t\t\t\t\tfor (var j = 0; j < coords.length; j++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[j].x][coords[j].y] += AI.PROB_WEIGHT * this.numHitCellsCovered(coords);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tfor (var _j = 0; _j < coords.length; _j++) {\r\n\t\t\t\t\t\t\t\t\tthis.probGrid[coords[_j].x][coords[_j].y]++;\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// Set hit cells to probability zero so the AI doesn't\r\n\t\t\t\t\t\t// target cells that are already hit\r\n\t\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\t\t\tthis.probGrid[x][y] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\tif (this.virtualGrid.cells[x][y] === CONST.TYPE_SUNK) {\r\n\t\t\t\t\t\tconsole.log(\"this sell is sunk   \" + x + \"   \" + y);\r\n\t\t\t\t\t\tif (this.checkPos(x - 1, y - 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x - 1][y - 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x - 1, y)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x - 1][y] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x - 1, y + 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x - 1][y + 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x, y - 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x][y - 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x, y + 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x][y + 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x + 1, y - 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x + 1][y - 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x + 1, y)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x + 1][y] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tif (this.checkPos(x + 1, y + 1)) {\r\n\t\t\t\t\t\t\tthis.probGrid[x + 1][y + 1] = 0;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tconsole.log(this.probGrid);\r\n\t\t};\r\n\t\t// Initializes the probability grid for targeting\r\n\t\tAI.prototype.initProbs = function () {\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tvar row = [];\r\n\t\t\t\tthis.probGrid[x] = row;\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\trow.push(0);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\t\t// Resets the probability grid to all 0.\r\n\t\tAI.prototype.resetProbs = function () {\r\n\t\t\tfor (var x = 0; x < Game.size; x++) {\r\n\t\t\t\tfor (var y = 0; y < Game.size; y++) {\r\n\t\t\t\t\tthis.probGrid[x][y] = 0;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\t// Finds a human ship by coordinates\r\n\t\t// Returns Ship\r\n\t\tAI.prototype.findHumanShip = function (x, y) {\r\n\t\t\treturn this.gameObject.humanFleet.findShipByCoords(x, y);\r\n\t\t};\r\n\t\t// Checks whether or not a given ship's cells passes through\r\n\t\t// any cell that is hit.\r\n\t\t// Returns boolean\r\n\t\tAI.prototype.passesThroughHitCell = function (shipCells) {\r\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\r\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\t// Gives the number of hit cells the ships passes through. The more\r\n\t\t// cells this is, the more probable the ship exists in those coordinates\r\n\t\t// Returns int\r\n\t\tAI.prototype.numHitCellsCovered = function (shipCells) {\r\n\t\t\tvar cells = 0;\r\n\t\t\tfor (var i = 0; i < shipCells.length; i++) {\r\n\t\t\t\tif (this.virtualGrid.cells[shipCells[i].x][shipCells[i].y] === CONST.TYPE_HIT) {\r\n\t\t\t\t\tcells++;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\treturn cells;\r\n\t\t};\r\n\r\n\t\t// Global constant only initialized once\r\n\t\tvar gameTutorial = new Tutorial();\r\n\r\n\t\t// Start the game\r\n\t\tnew Game(10);\r\n\r\n\t\tfunction transitionEndEventName() {\r\n\t\t\tvar i,\r\n\t\t\t\tundefined,\r\n\t\t\t\tel = document.createElement('div'),\r\n\t\t\t\ttransitions = {\r\n\t\t\t\t\t'transition': 'transitionend',\r\n\t\t\t\t\t'OTransition': 'otransitionend',  // oTransitionEnd in very old Opera\r\n\t\t\t\t\t'MozTransition': 'transitionend',\r\n\t\t\t\t\t'WebkitTransition': 'webkitTransitionEnd'\r\n\t\t\t\t};\r\n\r\n\t\t\tfor (i in transitions) {\r\n\t\t\t\tif (transitions.hasOwnProperty(i) && el.style[i] !== undefined) {\r\n\t\t\t\t\treturn transitions[i];\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\t// Returns a random number between min (inclusive) and max (exclusive)\r\n\t\tfunction getRandom(min, max) {\r\n\t\t\treturn Math.random() * (max - min) + min;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"container text-center\">\r\n\t\t\t\t<h2>Sea Battle with computer</h2>\r\n\t\t\t\t<div className=\"game-container\">\r\n\t\t\t\t\t<div className=\"game-container\">\r\n\t\t\t\t\t\t<div id=\"restart-sidebar\" className=\"hidden\">\r\n\t\t\t\t\t\t\t<h2>Try Again</h2>\r\n\t\t\t\t\t\t\t<button id=\"restart-game\">Restart Game</button>\r\n\t\t\t\t\t\t</div><div id=\"roster-sidebar\">\r\n\t\t\t\t\t\t\t<h2>Place Your Ships</h2>\r\n\t\t\t\t\t\t\t<ul className=\"fleet-roster\" id=\"fleet-roster\">\r\n\t\t\t\t\t\t\t\t<li id=\"1.1\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.2\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.3\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"1.4\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.1\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.2\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"2.3\" ></li>\r\n\t\t\t\t\t\t\t\t<li id=\"3.1\" > </li>\r\n\t\t\t\t\t\t\t\t<li id=\"3.2\" > </li>\r\n\t\t\t\t\t\t\t\t<li id=\"4.1\" >  </li>\r\n\t\t\t\t\t\t\t</ul>\r\n\t\t\t\t\t\t\t<button id=\"rotate-button\" data-direction=\"0\">Rotate Ship</button>\r\n\t\t\t\t\t\t\t<button id=\"start-game\" className=\"hidden\">Start Game</button>\r\n\t\t\t\t\t\t\t<button id=\"place-randomly\" className=\"hidden\">Place Randomly and Start</button>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"flex-box-contenier\">\r\n\t\t\t\t\t\t\t<div className=\"grid-container\">\r\n\t\t\t\t\t\t\t\t<h2>Your Fleet</h2>\r\n\t\t\t\t\t\t\t\t<div className=\"grid human-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t\t<div className=\"grid-container\">\r\n\t\t\t\t\t\t\t\t<h2>Enemy Fleet</h2>\r\n\t\t\t\t\t\t\t\t<div className=\"grid computer-player\"><span className=\"no-js\">Please enable JavaScript to play this game</span></div>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch1\"></span>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch2\"></span>\r\n\t\t\t\t<span className=\"prefetch\" id=\"prefetch3\"></span>\r\n\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default withRouter(BattlesComponent);"]},"metadata":{},"sourceType":"module"}